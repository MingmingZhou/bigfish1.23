<?xml version="1.0" encoding="UTF-8" ?>

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">

    <simple-method method-name="createCustomer" short-description="Create Customer" login-required="false">
    
    	<session-to-field field="shoppingCart"/>
        <call-object-method  obj-field="shoppingCart" method-name="shippingApplies" ret-field="shippingApplies"/>

        <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
        <if-compare operator="equals" value="Y" field="parameters.isFBLogin">
        	<!-- Create random password -->
        	<call-class-method class-name="com.osafe.util.Util" method-name="getProductStoreParm" ret-field="regPwdMinChar">
	            <field field="request" type="javax.servlet.ServletRequest"/>
	            <string value="REG_PWD_MIN_CHAR"/>
	        </call-class-method>
	        <if-empty field="regPwdMinChar">
	            <set field="regPwdMinChar" value="6"/>
	        </if-empty>
        	<call-bsh>
	            <![CDATA[ 
	            	import org.apache.commons.lang.RandomStringUtils;
	            	
	                String randomPassword = RandomStringUtils.randomAlphanumeric(Integer.parseInt(regPwdMinChar));
	                parameters.put("PASSWORD", randomPassword);
	                parameters.put("CONFIRM_PASSWORD", randomPassword);
	            ]]>
	        </call-bsh>
        </if-compare>
        <if-compare operator="equals" value="Y" field="parameters.PARTY_TEXT_PREFERENCE">
            <set field="parameters.PHONE_MOBILE_MANDATORY" value="Y" />
        </if-compare>
        
        <call-simple-method method-name="UserLoginValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="PersonalBillingAttributeInfoValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        <call-simple-method method-name="PersonalInfoValidation" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        
        <log level="info" message="Creating new customer, newUserLogin=${newUserLogin}"/>

        <set field="parameters.roleTypeId" value="CUSTOMER"/>
        <!-- Create the PartyRole -->
        <set field="partyRoleContext.roleTypeId" from-field="parameters.roleTypeId"/>
        
        <!-- DETERMINE BILLING ADDRESS -->
        <if-not-empty field="parameters.BILLING_USE_SCREEN">
        	<call-simple-method method-name="validateBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
        	<else>
        		<if-not-empty field="parameters.PERSONAL_USE_SCREEN">
	        		<!-- If BILLING DIVs are hidden, then use the Address(BILLING) DIVs inside of Personal Info -->
	        		<call-simple-method method-name="validatePersonalInfoBillingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
	        		<else>
	        			<!-- Use Shipping Address Divs for Billing -->
	        			<if-not-empty field="parameters.SHIPPING_USE_SCREEN">
	        				<call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
	        				<map-to-map map="shippingAddressContext" to-map="billingAddressContext"/>
	        			</if-not-empty>
	        		</else>
        		</if-not-empty>
        	</else>
        </if-not-empty>
         
        <!-- If SHIPPING DIVs are hidden, then use the Address(BILLING) DIVs inside of Personal Info -->
       	<if-not-empty field="parameters.SHIPPING_USE_SCREEN">
        	<set field="isSameAsBilling" from-field="parameters.isSameAsBilling"/>
	        <if-compare operator="equals" value="Y" field="isSameAsBilling"> 
	        	<map-to-map map="billingAddressContext" to-map="shippingAddressContext"/>
	        	<clear-field field="shippingAddressContext.attnName"/>
	        	<property-to-field field="defaultShippingNickname" resource="OSafeUiLabels" property="ShippingAddressDefaultNickNameLabel"/>
	        	<set field="shippingAddressContext.attnName" from-field="defaultShippingNickname"/>
	        	<else>
	        		<call-simple-method method-name="validateShippingAddress" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>
	        	</else>
	        </if-compare>
        	<else>
        		<map-to-map map="billingAddressContext" to-map="shippingAddressContext"/>
        		<clear-field field="shippingAddressContext.attnName"/>
	        	<property-to-field field="defaultShippingNickname" resource="OSafeUiLabels" property="ShippingAddressDefaultNickNameLabel"/>
	        	<set field="shippingAddressContext.attnName" from-field="defaultShippingNickname"/>
        	</else>
        </if-not-empty>
        
        <!-- Create the email address -->

        <!-- Check for required E-Mail -->
        <if-compare field="parameters.REQUIRE_EMAIL" operator="equals" value="false">
            <call-map-processor in-map-name="parameters" out-map-name="emailContext">
                <simple-map-processor name="newEmail">
                    <process field="roleTypeId"><copy/></process>
                    <process field="CUSTOMER_EMAIL">
                        <copy to-field="emailAddress"/>
                        <validate-method method="isEmail"><fail-property resource="OSafeUiLabels" property="EmailAddressNotFormattedCorrectlyError"/></validate-method>
                    </process>
                    <process field="CUSTOMER_EMAIL_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                </simple-map-processor>
            </call-map-processor>
        </if-compare>
        <check-errors/>


        <!-- create the PartyDataSource entry to track where this info came from... -->
        <make-value entity-name="PartyDataSource" value-field="partyDataSource"/>
        <set value="ECOMMERCE_SITE" field="partyDataSource.dataSourceId"/>
        <set from-field="nowStamp" field="partyDataSource.fromDate"/>
        <set value="Y" field="partyDataSource.isCreate"/>
        <!-- get the visit from the session to get the visitId -->
        <session-to-field field="visit"/>
        <set from-field="visit.visitId" field="partyDataSource.visitId"/>

        <!-- now that everything is validated & setup, check to see if there are errors, then call the services -->
        <check-errors/>

        <set-service-fields map="personContext" service-name="createPersonAndUserLogin" to-map="personUserLoginContext"/>
        <set-service-fields map="newUserLogin" service-name="createPersonAndUserLogin" to-map="personUserLoginContext"/>
        <set from-field="newUserLogin.currentPassword" field="personUserLoginContext.currentPasswordVerify"/>
        <!-- the above copy is okay since we checked already that they are the same -->
        <call-service service-name="createPersonAndUserLogin" in-map-name="personUserLoginContext">
            <result-to-field result-name="partyId" field="tempMap.partyId"/>
            <result-to-field field="createdUserLogin" result-name="newUserLogin"/>
        </call-service>
        <set-current-user-login value-field="createdUserLogin"/>
        <field-to-session field="createdUserLogin" session-name="NEW_USER_LOGIN"/>

        <!-- now that we have the partyId, put it where it needs to go... -->
        <set from-field="tempMap.partyId" field="partyDataSource.partyId"/>
        <set from-field="tempMap.partyId" field="userLoginContext.partyId"/>
        <set from-field="tempMap.partyId" field="personContext.partyId"/>
        <set from-field="tempMap.partyId" field="partyRoleContext.partyId"/>
        <set from-field="tempMap.partyId" field="billingAddressContext.partyId"/>
        <set from-field="tempMap.partyId" field="shippingAddressContext.partyId"/>
        <set from-field="tempMap.partyId" field="homePhoneContext.partyId"/>
        <set from-field="tempMap.partyId" field="workPhoneContext.partyId"/>
        <set from-field="tempMap.partyId" field="faxPhoneContext.partyId"/>
        <set from-field="tempMap.partyId" field="mobilePhoneContext.partyId"/>
        <set from-field="tempMap.partyId" field="emailContext.partyId"/>
        <set from-field="tempMap.partyId" field="parameters.partyId"/>
        <!-- Sets gender and DOB in partyAttribute entity -->
        <call-simple-method method-name="createUpdatePartyAttributes" xml-resource="component://osafe/script/Event/UserProfileEvents.xml"/>
    
        <call-service service-name="createPartyRole" in-map-name="partyRoleContext" include-user-login="true"/>

        <!-- billing address -->
        <if-not-empty field="parameters.BILLING_USE_SCREEN">
	        <call-service service-name="createPartyPostalAddress" in-map-name="billingAddressContext">
	            <result-to-field result-name="contactMechId" field="addressPurposeContext.contactMechId"/>
	        </call-service>
	        
	        <set from-field="tempMap.partyId" field="addressPurposeContext.partyId"/>
	        
	        <set value="BILLING_LOCATION" field="addressPurposeContext.contactMechPurposeTypeId"/>
	        <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>
	        
	        <!-- also consider this address the general correspondence address -->
	        <set value="GENERAL_LOCATION" field="addressPurposeContext.contactMechPurposeTypeId"/>
	        <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>

	    </if-not-empty>

        <!-- shipping address -->
       	<if-not-empty field="parameters.SHIPPING_USE_SCREEN">
	        <call-service service-name="createPartyPostalAddress" in-map-name="shippingAddressContext">
	            <result-to-field result-name="contactMechId" field="shippingAddressPurposeContext.contactMechId"/>
	        </call-service>
	         <set field="shippingAddressPurposeContext.partyId" from-field="tempMap.partyId"/>
	         <!-- create the shipping location -->
	         <set field="shippingAddressPurposeContext.contactMechPurposeTypeId" value="SHIPPING_LOCATION"/>
	         <call-service service-name="createPartyContactMechPurpose" in-map-name="shippingAddressPurposeContext"/>
        </if-not-empty>


        <!-- home phone -->
        <if>
           <condition>
              <or>
                <not><if-empty field="contactHomePhoneMap.contactHomePhoneContact"></if-empty></not>
                <not><if-empty field="contactHomeOtherPhoneMap.contactHomeOtherPhoneContact"></if-empty></not>
              </or>
           </condition>
                <then>
                    <call-service service-name="createPartyTelecomNumber" in-map-name="homePhoneContext">
                        <result-to-field result-name="contactMechId" field="homePhonePurposeContext.contactMechId"/>
                    </call-service>
                    <set from-field="tempMap.partyId" field="homePhonePurposeContext.partyId"/>
                    <set value="PHONE_HOME" field="homePhonePurposeContext.contactMechPurposeTypeId"/>
                    <call-service service-name="createPartyContactMechPurpose" in-map-name="homePhonePurposeContext"/>
                    <set value="PRIMARY_PHONE" field="homePhonePurposeContext.contactMechPurposeTypeId"/>
                    <call-service service-name="createPartyContactMechPurpose" in-map-name="homePhonePurposeContext"/>
               </then>
            </if>  
            
        <!-- work phone -->
        <if>
            <condition>
                <or>
                    <not><if-empty field="contactWorkPhoneMap.contactWorkPhoneContact"></if-empty></not>
                    <not><if-empty field="contactWorkOtherPhoneMap.contactWorkOtherPhoneContact"></if-empty></not>
                </or>
            </condition>
            <then>
                <call-service service-name="createPartyTelecomNumber" in-map-name="workPhoneContext">
                    <result-to-field result-name="contactMechId" field="workPhonePurposeContext.contactMechId"/>
                </call-service>
                <set from-field="tempMap.partyId" field="workPhonePurposeContext.partyId"/>
                <set value="PHONE_WORK" field="workPhonePurposeContext.contactMechPurposeTypeId"/>
                <call-service service-name="createPartyContactMechPurpose" in-map-name="workPhonePurposeContext"/>
            </then>
        </if>

        <!-- mobile phone -->
        <if>
            <condition>
                <or>
                    <not><if-empty field="contactMobilePhoneMap.contactMobilePhoneContact"></if-empty></not>
                    <not><if-empty field="contactMobileOtherPhoneMap.contactMobileOtherPhoneContact"></if-empty></not>
                </or>
            </condition>
            <then>
                <call-service service-name="createPartyTelecomNumber" in-map-name="mobilePhoneContext">
                    <result-to-field result-name="contactMechId" field="mobilePhonePurposeContext.contactMechId"/>
                </call-service>
                <set from-field="tempMap.partyId" field="mobilePhonePurposeContext.partyId"/>
                <set value="PHONE_MOBILE" field="mobilePhonePurposeContext.contactMechPurposeTypeId"/>
                <call-service service-name="createPartyContactMechPurpose" in-map-name="mobilePhonePurposeContext"/>
            </then>
        </if>
        <!-- email address -->
        <if-not-empty field="emailContext.emailAddress">
            <call-service service-name="createPartyEmailAddress" in-map-name="emailContext">
                <result-to-field result-name="contactMechId" field="emailPurposeContext.contactMechId"/>
            </call-service>
            <set from-field="tempMap.partyId" field="emailPurposeContext.partyId"/>
            <set value="PRIMARY_EMAIL" field="emailPurposeContext.contactMechPurposeTypeId"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="emailPurposeContext"/>
        </if-not-empty>

        <!-- club number -->
        <if-not-empty field="parameters.REQUIRE_CLUB">
            <set from-field="tempMap.partyId" field="personLookup.partyId"/>
            <find-by-primary-key map="personLookup" value-field="personVo" entity-name="Person"/>
            <if-empty field="parameters.CLUB_NUMBER">
                <call-bsh><![CDATA[
                    clubId = org.ofbiz.party.party.PartyWorker.createClubId(delegator, "999", 13);
                    parameters.put("CLUB_NUMBER", clubId);
                ]]></call-bsh>
            </if-empty>
            <set from-field="parameters.CLUB_NUMBER" field="personVo.memberId"/>
            <store-value value-field="personVo"/>
        </if-not-empty>

        <!-- now finished, log in the user and set the cart's partyId to that of the newly created customer ... -->
        <if-compare field="productStore.allowPassword" operator="equals" value="Y">
            <call-bsh><![CDATA[
                org.ofbiz.webapp.control.LoginWorker.doBasicLogin(createdUserLogin, request);
                org.ofbiz.webapp.control.LoginWorker.autoLoginSet(request, response);
                session = request.getSession();
                cart = session.getAttribute("shoppingCart");
                if (cart != null) {
                    cart.setOrderPartyId(tempMap.get("partyId"));
                }
            ]]></call-bsh>
        </if-compare>

        <!-- Associated to Product Store -->
        <entity-one entity-name="UserLogin" value-field="userLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <set field="createProductStoreRoleMap.userLogin" from-field="userLogin"/>
        <set field="createProductStoreRoleMap.partyId" from-field="tempMap.partyId"/>
        <set field="createProductStoreRoleMap.roleTypeId" from-field="parameters.roleTypeId"/>
        <set field="createProductStoreRoleMap.productStoreId" from-field="parameters.productStoreId"/>
        <call-service service-name="createProductStoreRole" in-map-name="createProductStoreRoleMap"/>
        
        <!-- Get Company (Pay To Party) email address -->
        <entity-one entity-name="ProductStore" value-field="productStore"/>
        <if-not-empty field="productStore">
        	<set field="getPartyEmailMap.partyId" from-field="productStore.payToPartyId"/>
        </if-not-empty>
        <entity-one entity-name="UserLogin" value-field="systemUserLogin" auto-field-map="false">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <set-current-user-login value-field="systemUserLogin"/>
        <set field="getPartyEmailMap.userLogin" from-field="systemUserLogin"/>
        <call-service service-name="getPartyEmail" in-map-name="getPartyEmailMap">
            <result-to-field result-name="emailAddress" field="emailAddressCompany"/>
        </call-service>
        <set field="registrationEventContext.emailAddressCompany" from-field="emailAddressCompany"/>
        
         <!-- Create Communication Event-->
        <map-to-map map="registrationEventContext" to-map="parameters"/>
        <set-service-fields service-name="createCommunicationEventWithoutPermission" map="parameters" to-map="createComEventMap"/>
        <set field="createComEventMap.communicationEventTypeId" value="EMAIL_COMMUNICATION"/>
        <set field="createComEventMap.userLogin" from-field="systemUserLogin"/>
        <set field="createComEventMap.partyIdTo" from-field="tempMap.partyId"/>
        <set field="createComEventMap.contactMechTypeId" value="EMAIL_ADDRESS"/>
        <set field="createComEventMap.contactMechIdTo" from-field="emailPurposeContext.contactMechId"/>
        <set field="createComEventMap.roleTypeIdTo" from-field="parameters.roleTypeId"/>
        <set field="createComEventMap.reasonEnumId" value="PRDS_CUST_REGISTER"/>
		<set field="createComEventMap.fromString" from-field="emailAddressCompany"/>
        <if-not-empty field="emailContext.emailAddress">
           <set field="createComEventMap.toString" from-field="emailContext.emailAddress"/>
        </if-not-empty>
        <set field="createComEventMap.subject" value="Customer Registration"/>
        <call-service service-name="createCommunicationEventWithoutPermission" in-map-name="createComEventMap"/>
        
        <!-- send off the registration email -->
        <call-simple-method method-name="sendRegistrationEmail" xml-resource="component://osafe/script/Event/EmailEvents.xml"/>

        <!-- tell the control servlet that we just logged in the user... -->
        <set value="TRUE" field="_LOGIN_PASSED_"/>
        <field-to-request field="_LOGIN_PASSED_"/>
    </simple-method>

    <!-- =========================================== -->
    <!-- ======== Anonymous Checkout Events ======== -->
    <!-- =========================================== -->

    <simple-method method-name="processCustomerSettings" short-description="Process Customer Settings; to be called as a Request Event" login-required="false">
        <if-empty field="parameters.partyId">
            <call-simple-method method-name="createAnonymousCustomer" />
            <else>
                <call-simple-method method-name="updateCustomer"/>
            </else>
        </if-empty>
        <!-- see if we should continue now... -->
        <check-errors/>
        <log level="info" message="Setting up party ${tempMap.partyId} and shipping address ${addressPurposeContext} in cart"/>
        <session-to-field field="cart" session-name="shoppingCart"/>
        <session-to-field field="userLogin"/>
        <log level="info" message="userLogin in Env ${userLogin} in parameters.userLogin ${parameters.userLogin}"/>
        <if-empty field="userLogin">
            <call-object-method obj-field="session" method-name="removeAttribute">
                <string value="autoUserLogin"/>
            </call-object-method>
            <check-errors/>
            <call-object-method obj-field="session" method-name="removeAttribute">
                <string value="autoName"/>
            </call-object-method>
            <check-errors/>
            <if-not-empty field="cart">
                <call-bsh><![CDATA[
                    // clear out the login fields from the cart
                    try {
                        if (cart!=null) cart.setAutoUserLogin(null, dispatcher);
                    } catch (CartItemModifyException e) {
                        Debug.logError(e, module);
                    }
                ]]></call-bsh>
            </if-not-empty>
            <set from-field="tempMap.partyId" field="partyId"/>
            <if-not-empty field="partyId">
                <set field="lookupKeyValue.userLoginId" value="anonymous"/>
                <find-by-primary-key map="lookupKeyValue" entity-name="UserLogin" value-field="userLogin"/>
                <if-not-empty field="userLogin">
                    <set field="userLogin.partyId" from-field="partyId"/>
                    <field-to-session field="userLogin" session-name="userLogin"/>
                    <if-not-empty field="cart">
                        <call-object-method obj-field="cart" method-name="setOrderPartyId">
                            <field field="partyId"/>
                        </call-object-method>
                        <call-bsh><![CDATA[
                            // clear out the login fields from the cart
                            try {
                                if (cart!=null) cart.setUserLogin(userLogin, dispatcher);
                            } catch (CartItemModifyException e) {
                                Debug.logError(e, module);
                            }
                        ]]></call-bsh>
                        <!-- call-object-method obj-field="cart"  method-name="setUserLogin">
                            <field field="userLogin"  type="org.ofbiz.entity.GenericValue"/>
                            <field field="dispatcher" map-name="request" type="org.ofbiz.service.LocalDispatcher"/>
                        </call-object-method -->
                    </if-not-empty>
                </if-not-empty>
            </if-not-empty>
        </if-empty>
        <check-errors/>
        <log level="info" message="If anonymous, user-login has been activated"/>
    </simple-method>


    <simple-method method-name="createUpdateCustomerInfo" short-description="Create or Update Customer Info" login-required="false">
        <!-- update the email address -->
        <if-not-empty field="parameters.emailContactMechId">
            <set field="emailMap.partyId" from-field="partyId"/>
            <set field="emailMap.contactMechId" from-field="parameters.emailContactMechId"/>
            <!-- call the update email service -->
            <call-service service-name="updatePartyEmailAddress" in-map-name="emailMap"/>
        <else>
            <!-- create the email address -->
            <set field="emailMap.partyId" from-field="partyId"/>
            <set field="emailMap.contactMechPurposeTypeId" value="PRIMARY_EMAIL"/>
            <!-- call the create email service -->
            <call-service service-name="createPartyEmailAddress" in-map-name="emailMap"/>
        </else>
        </if-not-empty>


        <!-- create home phone -->
        <if-not-empty field="parameters.homePhoneContactMechId">
            <set field="homePhoneMap.partyId" from-field="partyId"/>
            <set field="homePhoneMap.contactMechId" from-field="parameters.homePhoneContactMechId"/>
            <!-- call update telecom service -->
            <call-service service-name="updatePartyTelecomNumber" in-map-name="homePhoneMap"/>
        <else>
            <!-- create home phone -->
            <if-not-empty field="parameters.homeContactNumber">
                <set field="homePhoneMap.partyId" from-field="partyId"/>
                <set field="homePhoneMap.contactMechPurposeTypeId" value="PHONE_HOME"/>
                <!-- call create telecom service -->
                <call-service service-name="createPartyTelecomNumber" in-map-name="homePhoneMap"/>
            </if-not-empty>
        </else>
        </if-not-empty>

        <!-- create work phone -->
        <if-not-empty field="parameters.workPhoneContactMechId">
            <set field="workPhoneMap.partyId" from-field="partyId"/>
            <set field="workPhoneMap.contactMechId" from-field="parameters.workPhoneContactMechId"/>
            <!-- call update telecom service -->
            <call-service service-name="updatePartyTelecomNumber" in-map-name="workPhoneMap"/>
        <else>
            <!-- create work phone -->
            <if-not-empty field="parameters.workContactNumber">
                <set field="workPhoneMap.partyId" from-field="partyId"/>
                <set field="workPhoneMap.contactMechPurposeTypeId" value="PHONE_WORK"/>
                <!-- call create telecom service -->
                <call-service service-name="createPartyTelecomNumber" in-map-name="workPhoneMap"/>
            </if-not-empty>
        </else>
        </if-not-empty>
    </simple-method>
    <simple-method method-name="updateCustomer" short-description="Update Customer" login-required="true">
        <if-empty field="parameters.partyId"><add-error><fail-message message="No partyId passed, cannot Update Customer"/></add-error></if-empty>

        <call-simple-method method-name="validateCustomerInfo" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>

        <!-- see if we should continue now... -->
        <check-errors/>

        <!-- update person service -->
        <set from-field="parameters.partyId" field="personMap.partyId"/>
        <call-service service-name="updatePerson" in-map-name="personMap">
        </call-service>

        <set from-field="parameters.partyId" field="partyId"/>
        <call-simple-method method-name="createUpdateCustomerInfo"/>
    </simple-method>
    <simple-method method-name="createAnonymousCustomer" short-description="Create Customer" login-required="false">
        <call-simple-method method-name="validateCustomerInfo" xml-resource="component://osafe/script/Validation/ValidationEvents.xml"/>

        <!-- see if we should continue now... -->
        <check-errors/>

        <!-- call the create person service -->
        <call-service service-name="createPerson" in-map-name="personMap">
            <result-to-field result-name="partyId" field="tempMap.partyId"/>
            <result-to-request result-name="partyId"/>
        </call-service>

        <log level="info" message="CreatePerson : ${tempMap.partyId}"/>

        <!-- the rest of the methods require a userLogin object; so if we are anonymous lets fake it -->
        <if-empty field="userLogin">
            <set field="ulLookup.userLoginId" value="anonymous"/>
            <find-by-primary-key entity-name="UserLogin" map="ulLookup" value-field="userLogin"/>
            <set field="userLogin.partyId" from-field="tempMap.partyId"/>
            <set-current-user-login value-field="userLogin"/>
            <else><!-- of an anonymous vistor is coming back, update the party id in the userLogin object -->
                <if-compare field="userLogin.userLoginId" value="anonymous" operator="equals">
                    <set field="userLogin.partyId" from-field="tempMap.partyId"/>
                </if-compare>
            </else>
        </if-empty>

        <log level="info" message="UserLogin : ${userLogin}"/>

        <!-- add the party to the customer role -->
        <set field="roleMap.roleTypeId" value="CUSTOMER"/>
        <set field="roleMap.partyId" from-field="tempMap.partyId"/>
        <call-service service-name="createPartyRole" in-map-name="roleMap"/>

        <set from-field="tempMap.partyId" field="partyId"/>
        <call-simple-method method-name="createUpdateCustomerInfo"/>

        <!-- create userLogin -->
        <if-not-empty field="parameters.userLoginId">
            <set field="loginMap.userLoginId" from-field="parameters.userLoginId"/>
            <!-- call create userLogin -->
            <!-- call reset password (to email a password) -->
        </if-not-empty>
    </simple-method>

    <simple-method method-name="createEMailSubscriber" short-description="Create Email Subscriber" login-required="false">
        <!-- timestamp to be used -->
        <now-timestamp field="nowStamp"/>

        <if-empty field="parameters.SUBSCRIBER_EMAIL">
            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="EmailAddressMissingError"/>
            <string-to-list string="${tempErrorMessage}" message-field="SUBSCRIBER_EMAIL" list="error_list"></string-to-list>
        <else>
       		 <call-class-method class-name="org.ofbiz.base.util.StringUtil" method-name="removeSpaces" ret-field="parameters.SUBSCRIBER_EMAIL">
       				<field field="parameters.SUBSCRIBER_EMAIL" type="String"/>
       		 </call-class-method>
             <if-validate-method field="parameters.SUBSCRIBER_EMAIL" method="isEmail">
                 <entity-condition entity-name="PartyContactWithPurpose" list="partyContactPurposeList">
                     <condition-list combine="and">
                         <condition-expr field-name="infoString" from-field="parameters.SUBSCRIBER_EMAIL"/>
                         <condition-expr field-name="contactMechPurposeTypeId" operator="equals" value="PRIMARY_EMAIL"/>
                     </condition-list>
                 </entity-condition>
                    <iterate entry="partyContactPurpose" list="partyContactPurposeList">
                        <get-related-one value-field="partyContactPurpose" relation-name="Party" to-value-field="party"/>
                        <get-related value-field="party" relation-name="PartyRole" list="partyRoles" />
                        <iterate list="partyRoles" entry="roleType">
                            <if-compare value="EMAIL_SUBSCRIBER" operator="equals" field="roleType.roleTypeId">
                                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="EmailMailingListExistsError"/>
                                <string-to-list string="${tempErrorMessage}" message-field="SUBSCRIBER_EMAIL" list="error_list"></string-to-list>
                            </if-compare>
                         <check-errors/>
                        </iterate>
                    </iterate>
             <else>
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="EmailAddressNotFormattedCorrectlyError"/>
                <string-to-list string="${tempErrorMessage}" message-field="SUBSCRIBER_EMAIL" list="error_list"></string-to-list>
             </else>
             </if-validate-method>
             
        </else>
        </if-empty>

        <if-empty field="parameters.SUBSCRIBER_FIRST_NAME">
            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="FirstNameMissingError"/>
            <string-to-list string="${tempErrorMessage}" message-field="SUBSCRIBER_FIRST_NAME" list="error_list"></string-to-list>
        </if-empty>

        <if-empty field="parameters.SUBSCRIBER_LAST_NAME">
            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="LastNameMissingError"/>
            <string-to-list string="${tempErrorMessage}" message-field="SUBSCRIBER_LAST_NAME" list="error_list"></string-to-list>
        </if-empty>

        <!-- see if we should continue now... -->
        <check-errors/>

        <set from-field="parameters.SUBSCRIBER_FIRST_NAME" field="personMap.firstName"/>
        <set from-field="parameters.SUBSCRIBER_LAST_NAME" field="personMap.lastName"/>

        <!-- call the create person service -->
        <call-service service-name="createPerson" in-map-name="personMap">
            <result-to-field result-name="partyId" field="tempMap.partyId"/>
            <result-to-request result-name="partyId"/>
        </call-service>

        <log level="info" message="CreatePerson : ${tempMap.partyId}"/>

        <!-- add the party  role -->
        <make-value entity-name="PartyRole" value-field="partyRole"/>
        <set field="partyRole.roleTypeId" value="EMAIL_SUBSCRIBER"/>
        <set field="partyRole.partyId" from-field="tempMap.partyId"/>
        <create-value value-field="partyRole"/>

        <make-value entity-name="ContactMech" value-field="contactMech"/>
        <sequenced-id sequence-name="ContactMech" field="contactMech.contactMechId"/>
        <set from-field="parameters.SUBSCRIBER_EMAIL" field="contactMech.infoString"/>                
        <set value="EMAIL_ADDRESS" field="contactMech.contactMechTypeId" />
        <create-value value-field="contactMech"/>
        <set field="tempMap.contactMechId" from-field="contactMech.contactMechId"/>

        <make-value entity-name="PartyContactMech" value-field="partyContactMech"/>
        <set field="partyContactMech.partyId" from-field="tempMap.partyId"/>
        <set field="partyContactMech.contactMechId" from-field="tempMap.contactMechId"/>
        <set field="partyContactMech.roleTypeId" value="EMAIL_SUBSCRIBER"/>
        <now-timestamp field="partyContactMech.fromDate"/>  
        <if-not-empty field="parameters.CUSTOMER_EMAIL_ALLOW_SOL">
            <set from-field="parameters.CUSTOMER_EMAIL_ALLOW_SOL" field="partyContactMech.allowSolicitation"/>
        <else>
            <set value="Y" field="partyContactMech.allowSolicitation"/>
        </else>
        </if-not-empty>
        <create-value value-field="partyContactMech"/>

        <make-value entity-name="PartyContactMechPurpose" value-field="partyContactMechPurpose"/>
        <set field="partyContactMechPurpose.partyId" from-field="tempMap.partyId"/>
        <set field="partyContactMechPurpose.contactMechId" from-field="tempMap.contactMechId"/>
        <set field="partyContactMechPurpose.contactMechPurposeTypeId" value="PRIMARY_EMAIL"/>
        <now-timestamp field="partyContactMechPurpose.fromDate"/>  
        <create-value value-field="partyContactMechPurpose"/>
         
        <if-not-empty field="parameters.PARTY_EMAIL_PREFERENCE">
            <make-value entity-name="PartyAttribute" value-field="partyAttribute"/>
            <set from-field="tempMap.partyId" field="partyAttribute.partyId"/>
            <set value="PARTY_EMAIL_PREFERENCE" field="partyAttribute.attrName"/>
            <set from-field="parameters.PARTY_EMAIL_PREFERENCE" field="partyAttribute.attrValue"/>
            <create-value value-field="partyAttribute"/>
        </if-not-empty>
        
        <if-not-empty field="parameters.PARTY_TEXT_PREFERENCE">
            <make-value entity-name="PartyAttribute" value-field="partyAttribute"/>
            <set from-field="tempMap.partyId" field="partyAttribute.partyId"/>
            <set value="PARTY_TEXT_PREFERENCE" field="partyAttribute.attrName"/>
            <set from-field="parameters.PARTY_TEXT_PREFERENCE" field="partyAttribute.attrValue"/>
            <create-value value-field="partyAttribute"/>
        </if-not-empty>
        
        <make-value entity-name="ProductStoreRole" value-field="productStoreRole"/>
        <set field="productStoreRole.partyId" from-field="tempMap.partyId"/>
        <set field="productStoreRole.roleTypeId" value="EMAIL_SUBSCRIBER"/>
        <set field="productStoreRole.productStoreId" from-field="parameters.productStoreId"/>
        <now-timestamp field="productStoreRole.fromDate"/>  
        <create-value value-field="productStoreRole"/>

        <property-to-field field="tempSuccessMessage" resource="OSafeUiLabels" property="JoinMailingListSuccess"/>
        <string-to-list string="${tempSuccessMessage}"  list="success_list"/>
        <field-to-request field="success_list" request-name="osafeSuccessMessageList" />
        
        <call-simple-method method-name="sendMailingListEmail" xml-resource="component://osafe/script/Event/EmailEvents.xml"/>
		
    </simple-method>
    <simple-method method-name="processShipSettings" short-description="Process Ship Settings; to be called as a Request Event" login-required="false">
        <call-map-processor in-map-name="parameters" out-map-name="addressContext">
            <simple-map-processor name="newAddress">
                <process field="toName"><copy/></process>
                <process field="attnName"><copy/></process>
                <process field="address1">
                    <copy/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="AddressLine1MissingError"/></not-empty>
                </process>
                <process field="address2"><copy/></process>
                <process field="city">
                    <copy/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="CityMissingError"/></not-empty>
                </process>
                <process field="stateProvinceGeoId"><copy/></process>
                <process field="postalCode">
                    <copy/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="ZipCodeMissingError"/></not-empty>
                </process>
                <process field="countyGeoId">
                    <copy/>
                </process>
                <process field="countryGeoId">
                    <copy/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="CountryMissingError"/></not-empty>
                </process>
                <process field="allowSolicitation"><copy/></process>
                <process field="yearsAtAddress"><convert type="Long" to-field="yearsWithContactMech"><fail-message message="Years at address not a valid number: ${parameters.yearsAtAddress}"/></convert></process>
                <process field="monthsAtAddress"><convert type="Long" to-field="monthsWithContactMech"><fail-message message="Months at address not a valid number: ${parameters.monthsAtAddress}"/></convert></process>
            </simple-map-processor>
        </call-map-processor>
        <if-compare value="USA" operator="equals" field="parameters.countryGeoId">
            <if-empty field="parameters.stateProvinceGeoId">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="StateMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="BILLING_STATE" list="error_list"/>
            </if-empty>
        </if-compare>
        <if-compare value="CAN" operator="equals" field="parameters.countryGeoId">
            <if-empty field="parameters.stateProvinceGeoId">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="StateMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="BILLING_STATE" list="error_list"/>
            </if-empty>
        </if-compare>
        <check-errors/>

        <!-- shipping address -->
        <if-not-empty field="parameters.shippingContactMechId">
            <set field="addressContext.partyId" from-field="partyId"/>
            <set field="addressContext.contactMechId" from-field="parameters.shippingContactMechId"/>
            <!-- call the update address service -->
            <call-service service-name="updatePartyPostalAddress" in-map-name="addressContext">
                <!-- this is needed for the "anonymous" checkout process, will be used as the shipping address -->
                <result-to-request result-name="contactMechId"/>
                <result-to-field result-name="contactMechId" field="addressContext.contactMechId"/>
            </call-service>
            <else>
                <set field="addressContext.partyId" from-field="partyId"/>
                <call-service service-name="createPartyPostalAddress" in-map-name="addressContext">
                    <result-to-field result-name="contactMechId" field="addressContext.contactMechId"/>
                    <result-to-field result-name="contactMechId" field="addressPurposeContext.contactMechId"/>
                    <result-to-request result-name="contactMechId"/>
                </call-service>

                <set field="addressPurposeContext.partyId" from-field="partyId"/>
                <!-- create the shipping location -->
                <set field="addressPurposeContext.contactMechPurposeTypeId" value="SHIPPING_LOCATION"/>
                <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>
                <!-- also consider this address the general correspondence address -->
                <set field="addressPurposeContext.contactMechPurposeTypeId" value="GENERAL_LOCATION"/>
                <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>
            </else>
        </if-not-empty>
        <session-to-field field="cart" session-name="shoppingCart"/>
        <if-not-empty field="cart">
            <call-object-method obj-field="cart" method-name="addContactMech">
                <string value="SHIPPING_LOCATION"/>
                <field field="addressContext.contactMechId"/>
            </call-object-method>
            <call-object-method obj-field="cart" method-name="setShippingContactMechId">
                <field field="addressContext.contactMechId"/>
            </call-object-method>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="processShipOptions" short-description="Process Ship Options; to be called as a Request Event" login-required="false">
       <call-bsh><![CDATA[
           shipmentMethod = parameters.get("shipping_method");
           if(shipmentMethod != null){
              parameters.put("shipmentMethodTypeId", shipmentMethod.substring(0, shipmentMethod.indexOf("@")));
              parameters.put("carrierPartyId", shipmentMethod.substring(shipmentMethod.indexOf("@")+1));
           }
       ]]></call-bsh>
       <session-to-field field="cart" session-name="shoppingCart"/>
       <if-not-empty field="cart">
           <set field="shipmentMethodTypeId" from-field="parameters.shipmentMethodTypeId"/>
           <call-object-method obj-field="cart" method-name="setShipmentMethodTypeId">
               <field field="shipmentMethodTypeId"/>
           </call-object-method>

           <set field="carrierPartyId" from-field="parameters.carrierPartyId"/>
           <call-object-method obj-field="cart" method-name="setCarrierPartyId">
               <field field="carrierPartyId"/>
           </call-object-method>

           <set field="maySplit" from-field="parameters.may_split" type="Boolean"/>
           <if-not-empty field="maySplit">
               <call-object-method obj-field="cart" method-name="setMaySplit">
                   <field field="maySplit" type="Boolean"/>
               </call-object-method>
           </if-not-empty>

           <set field="shippingInstruction" from-field="parameters.shipping_instructions" type="String"/>
           <if-not-empty field="shippingInstruction">
           <call-object-method obj-field="cart" method-name="setShippingInstructions">
               <field field="shippingInstruction" type="String"/>
           </call-object-method>
           </if-not-empty>

           <set field="correspondingPoId" from-field="parameters.correspondingPoId"/>
           <if-not-empty field="correspondingPoId">
                  <call-object-method obj-field="cart" method-name="setPoNumber">
                   <field field="correspondingPoId" type="String"/>
               </call-object-method>
           </if-not-empty>

           <set field="isGift" from-field="parameters.is_gift" type="Boolean"/>
           <if-not-empty field="isGift">
               <call-object-method obj-field="cart" method-name="setIsGift">
                   <field field="isGift" type="Boolean"/>
               </call-object-method>
           </if-not-empty>

           <set field="giftMessage" from-field="parameters.gift_message" type="String"/>
           <if-not-empty field="giftMessage">
           <call-object-method obj-field="cart" method-name="setGiftMessage">
               <field field="giftMessage" type="String"/>
           </call-object-method>
           </if-not-empty>
       </if-not-empty>
    </simple-method>

    <!-- One page checkout process  -->
    <simple-method method-name="createUpdateUserLogin" short-description="Create and update a user login" login-required="false">
        <if-empty field="parameters.partyId">
            <request-to-field request-name="partyId" field="parameters.partyId"/>
        </if-empty>
        <if-empty field="parameters.username">
            <call-class-method class-name="org.ofbiz.product.store.ProductStoreWorker" method-name="getProductStore" ret-field="productStore">
                <field field="request" type="javax.servlet.ServletRequest"/>
            </call-class-method>
            <if-compare field="productStore.usePrimaryEmailUsername" operator="equals" value="Y">
                <set field="parameters.username" from-field="parameters.emailAddress"/>
            </if-compare>
        </if-empty>
        <property-to-field resource="security" property="username.lowercase" default="false" field="username_lowercase"/>
        <property-to-field resource="security" property="password.lowercase" default="false" field="password_lowercase"/>
        <!-- if username and/or password should be lowercased, do that now -->
        <if-compare field="username_lowercase" operator="equals" value="true">
            <call-object-method obj-field="parameters.username" method-name="toLowerCase" ret-field="parameters.username"/>
        </if-compare>
        <if-compare field="password_lowercase" operator="equals" value="true">
            <call-object-method obj-field="parameters.currentPassword" method-name="toLowerCase" ret-field="parameters.currentPassword"/>
        </if-compare>
        <if-empty field="userLogin">
            <call-map-processor xml-resource="component://securityext/script/org/ofbiz/securityext/login/LoginMapProcs.xml"
                processor-name="userLogin" in-map-name="parameters" out-map-name="userLoginMap"/>
            <if-not-empty field="userLoginMap.userLoginId">
                <entity-one entity-name="UserLogin" value-field="existingUserLogin">
                    <field-map field-name="userLoginId" value="${userLoginMap.userLoginId}"/>
                </entity-one>
                <if-not-empty field="existingUserLogin">
                    <add-error error-list-name="error_list"><fail-property resource="OSafeUiLabels" property="UserNameInUseError"/></add-error>
                </if-not-empty>
            </if-not-empty>
            <make-value entity-name="UserLogin" value-field="newUserLogin"/>
            <set field="newUserLogin.userLoginId" from-field="userLoginMap.userLoginId"/>
            <set field="newUserLogin.currentPassword" from-field="userLoginMap.currentPassword"/>
            <set field="newUserLogin.passwordHint" from-field="userLoginMap.passwordHint"/>
            <!-- Check the password, etc for validity -->
            <call-bsh><![CDATA[
                String password = (String) userLoginMap.get("currentPassword");
                String confirmPassword = (String) userLoginMap.get("currentPasswordVerify");
                String passwordHint = (String) userLoginMap.get("passwordHint");
                org.ofbiz.common.login.LoginServices.checkNewPassword(newUserLogin, null, password, confirmPassword, passwordHint, error_list, true, locale);
            ]]></call-bsh>
            <check-errors/>
            <set-service-fields service-name="createUserLogin"  map="userLoginMap" to-map="userLoginCtx"/>

            <!-- call the service with the system account to get around security constraints for this special create -->
            <entity-one entity-name="UserLogin" value-field="userLoginCtx.userLogin" auto-field-map="false">
                <field-map field-name="userLoginId" value="system"/>
            </entity-one>
            <call-service service-name="createUserLogin" in-map-name="userLoginCtx"/>
            <entity-one entity-name="UserLogin" value-field="userLogin">
                <field-map field-name="userLoginId" from-field="userLoginMap.userLoginId"/>
            </entity-one>

            <!-- now finished, log in the user and set the cart's partyId -->
            <call-bsh>
                <![CDATA[
                    org.ofbiz.webapp.control.LoginWorker.doBasicLogin(userLogin, request);
                    org.ofbiz.webapp.control.LoginWorker.autoLoginSet(request, response);
                ]]>
            </call-bsh>
            <set field="parameters.userLogin" from-field="userLogin"/>
            <field-to-session field="userLogin.userLoginId" session-name="USER_LOGIN_EMAIL"/>
        <else>
            <if>
                <condition>
                    <or>
                        <not><if-empty field="parameters.currentPassword"></if-empty></not>
                        <not><if-empty field="parameters.newPassword"></if-empty></not>
                        <not><if-empty field="parameters.newPasswordVerify"> </if-empty></not>
                    </or>
                </condition>
                <then>
                    <call-map-processor xml-resource="component://securityext/script/org/ofbiz/securityext/login/LoginMapProcs.xml"
                        processor-name="updatePassword" in-map-name="parameters" out-map-name="passwordMap"/>
                    <check-errors/>
                    <set-service-fields service-name="updatePassword" map="passwordMap" to-map="passwordCtx"/>
                    <call-service service-name="updatePassword" in-map-name="passwordCtx">
                        <result-to-field result-name="updatedUserLogin"/>
                    </call-service>
                    <set-current-user-login value-field="updatedUserLogin"/>
                    <session-to-field field="userLogin"/>
                    <if-compare field="userLogin.userLoginId" operator="equals" value="${updatedUserLogin.userLoginId}">
                        <field-to-session field="updatedUserLogin" session-name="userLogin"/>
                    </if-compare>
                    <session-to-field field="userLogin"/>
                    <field-to-session field="userLogin.userLoginId" session-name="USER_LOGIN_EMAIL"/>
              </then>
           </if>
        </else>
        </if-empty>
    </simple-method>

    <simple-method method-name="setAnonUserLogin" short-description="Set user login in the session" login-required="false">
        <if-empty field="userLogin">
            <entity-one entity-name="UserLogin" value-field="userLogin">
                <field-map field-name="userLoginId" value="anonymous"/>
            </entity-one>
            <set field="userLogin.partyId" from-field="partyId"/>
            <set-current-user-login value-field="userLogin"/>
        <else>
            <!-- If an anonymous vistor is coming back, update the party id in the userLogin object -->
            <if-compare field="userLogin.userLoginId" operator="equals" value="anonymous">
                <set field="userLogin.partyId" from-field="partyId"/>
            </if-compare>
        </else>
        </if-empty>
        <field-to-request field="userLogin" request-name="userLogin"/>
        <field-to-session field="userLogin.userLoginId" session-name="USER_LOGIN_EMAIL"/>
        <log level="info" message="userLogin is ${userLogin}"/>
    </simple-method>

    <simple-method method-name="getShipOptions" short-description="Get shipping options" login-required="false">
        <set field="dispatcher" from-field="parameters.dispatcher" type="Object"/>
        <set field="shoppingCart" from-field="parameters.shoppingCart"/>
        <if-empty field="shoppingCart">
            <session-to-field field="shoppingCart"/>
        </if-empty>
        <call-bsh>
            <![CDATA[
                import org.ofbiz.order.shoppingcart.shipping.ShippingEstimateWrapper;
                shippingEstWpr = ShippingEstimateWrapper.getWrapper(dispatcher, shoppingCart, 0);
                parameters.put("shippingEstWpr", shippingEstWpr);
            ]]>
        </call-bsh>
        <set field="shippingEstWpr" from-field="parameters.shippingEstWpr"/>
        <call-object-method obj-field="shippingEstWpr" method-name="getShippingMethods" ret-field="carrierShipmentMethodList"/>
        <call-object-method obj-field="shoppingCart" method-name="getShipmentMethodTypeId" ret-field="shipmentMethodTypeId"/>
        <call-object-method obj-field="shoppingCart" method-name="getCarrierPartyId" ret-field="carrierPartyId"/>
        <call-object-method obj-field="shoppingCart" method-name="getCurrency" ret-field="currency"/>
        <if-not-empty field="shipmentMethodTypeId">
            <if-not-empty field="carrierPartyId">
                 <set field="chosenShippingMethod" value="${shipmentMethodTypeId}@${carrierPartyId}"/>
            </if-not-empty>
        </if-not-empty>
        <iterate list="carrierShipmentMethodList"  entry="carrierShipmentMethod">
            <call-object-method obj-field="shippingEstWpr" method-name="getShippingEstimate" ret-field="shippingEst">
                <field field="carrierShipmentMethod" type="org.ofbiz.entity.GenericValue"/>
            </call-object-method>
            <if-empty field="shippingEst">
                <set field="shippingEst" value="-1" type="Integer"/>
            </if-empty>
            <set field="negValue" value="-1" type="Integer"/>
            <set field="shippingMethod" value="${carrierShipmentMethod.shipmentMethodTypeId}@${carrierShipmentMethod.partyId}"/>

            <if-compare-field field="shippingEst" operator="greater" to-field="negValue">
                <set field="shippingDesc" value="${carrierShipmentMethod.partyId} ${carrierShipmentMethod.description} - ${shippingEst?currency(${currency})}"/>
                <else>
                    <set field="shippingDesc" value="${carrierShipmentMethod.partyId} ${carrierShipmentMethod.description} - ${uiLabelMap.OrderCalculatedOffline}"/>
                </else>
            </if-compare-field>
            <set field="shippingOptionMap.shippingMethod" from-field="shippingMethod"/>
            <set field="shippingOptionMap.shippingDesc" from-field="shippingDesc"/>
            <if-not-empty field="carrierShipmentMethod.productStoreShipMethId">
                <set field="shippingOptionMap.productStoreShipMethId" from-field="carrierShipmentMethod.productStoreShipMethId"/>
            </if-not-empty>
            <field-to-list field="shippingOptionMap" list="shippingOptions"/>
            <clear-field field="shippingOptionMap"/>
        </iterate>
         <set field="parameters.shippingOptions" from-field="shippingOptions"/>
         <field-to-request field="parameters.shippingOptions" request-name="shippingOptions"/>
    </simple-method>

    <simple-method method-name="createCustomerProfile" short-description="create a customer profile" login-required="false">
        <!-- Process all map -->
        <call-map-processor xml-resource="component://party/script/org/ofbiz/party/contact/PartyContactMechMapProcs.xml"
                processor-name="person" in-map-name="parameters" out-map-name="personCtx"/>
        <call-map-processor xml-resource="component://party/script/org/ofbiz/party/contact/PartyContactMechMapProcs.xml"
                processor-name="emailAddress" in-map-name="parameters" out-map-name="emailAddressCtx"/>
        <call-map-processor xml-resource="component://order/script/org/ofbiz/order/customer/CheckoutMapProcs.xml"
            processor-name="shipToAddress" in-map-name="parameters" out-map-name="shipToAddressCtx"/>
        <call-map-processor xml-resource="component://order/script/org/ofbiz/order/customer/CheckoutMapProcs.xml"
                processor-name="shipToPhone" in-map-name="parameters" out-map-name="shipToTelecomNumberCtx"/>
        <check-errors/>

        <!-- create person -->
        <set-service-fields service-name="createPerson" map="personCtx" to-map="createPersonCtx"/>
        <call-service service-name="createPerson" in-map-name="createPersonCtx">
            <result-to-field result-name="partyId" field="partyId"/>
        </call-service>
        <set field="parameters.partyId" from-field="partyId"/>

        <!-- create userLogin -->
        <call-simple-method method-name="createUpdateUserLogin"/>

        <!-- Create party role-->
        <set field="partyRoleContext.partyId" from-field="parameters.partyId"/>
        <set field="partyRoleContext.roleTypeId" from-field="parameters.roleTypeId"/>
        <set field="partyRoleContext.userLogin" from-field="parameters.userLogin"/>
        <call-service service-name="createPartyRole" in-map-name="partyRoleContext"/>

        <!-- Create email address -->
        <set field="emailAddressCtx.partyId" from-field="parameters.partyId"/>
        <set field="emailAddressCtx.userLogin" from-field="parameters.userLogin"/>
        <set field="emailAddressCtx.contactMechPurposeTypeId" from-field="parameters.emailContactMechPurposeTypeId"/>
        <call-service service-name="createPartyEmailAddress" in-map-name="emailAddressCtx">
            <result-to-field result-name="contactMechId" field="emailContactMechId"/>
        </call-service>
        <log level="info" message="Email Contact Created emailContactMechId is ${emailContactMechId}"/>

        <!-- Create shipping address -->
        <set field="shipToAddressCtx.partyId" from-field="parameters.partyId"/>
        <set field="shipToAddressCtx.userLogin" from-field="parameters.userLogin"/>
        <set field="shipToAddressCtx.setShippingPurpose" value="Y"/>
        <set field="shipToAddressCtx.productStoreId" from-field="parameters.productStoreId"/>
        <if-compare field="parameters.useShippingAddressForBilling" operator="equals" value="Y">
          <set field="shipToAddressCtx.setBillingPurpose" value="Y"/>
        </if-compare>
        <call-service service-name="createPostalAddressAndPurposes" in-map-name="shipToAddressCtx">
            <result-to-field result-name="contactMechId" field="shipToContactMechId"/>
        </call-service>
        <log level="info" message="Shipping address created with contactMechId ${shipToContactMechId}"/>

        <!-- create shipping telecom number  -->
        <set field="shipToTelecomNumberCtx.partyId" from-field="parameters.partyId"/>
        <set field="shipToTelecomNumberCtx.userLogin" from-field="parameters.userLogin"/>
        <set field="shipToTelecomNumberCtx.contactMechPurposeTypeId" value="PHONE_SHIPPING"/>
        <!-- call create telecom service -->
        <call-service service-name="createPartyTelecomNumber" in-map-name="shipToTelecomNumberCtx">
            <result-to-field result-name="contactMechId" field="parameters.shipToTelecomContactMechId"/>
        </call-service>
        <log level="info" message="Shipping telecom number is created with contactMechId ${parameters.shipToTelecomContactMechId}"/>

        <!-- Create billing address -->
        <if-compare field="parameters.useShippingAddressForBilling" operator="not-equals" value="Y">
            <call-map-processor xml-resource="component://order/script/org/ofbiz/order/customer/CheckoutMapProcs.xml"
                    processor-name="billToAddress" in-map-name="parameters" out-map-name="billToAddressCtx"/>
            <set field="billToAddressCtx.partyId" from-field="parameters.partyId"/>
            <set field="billToAddressCtx.userLogin" from-field="parameters.userLogin"/>
            <set field="billToAddressCtx.setBillingPurpose" value="Y"/>
            <set field="billToAddressCtx.productStoreId" from-field="parameters.productStoreId"/>
            <call-service service-name="createPostalAddressAndPurposes" in-map-name="billToAddressCtx">
                <result-to-field result-name="contactMechId" field="billToContactMechId"/>
            </call-service>
            <log level="info" message="Billing address created with contactMechId ${billToContactMechId}"/>
        <else>
            <log level="info" message="Billing address created same as Shipping address with contactMechId ${shipToContactMechId}"/>
        </else>
        </if-compare>
        <!-- create billing telecom number  -->
        <call-map-processor xml-resource="component://order/script/org/ofbiz/order/customer/CheckoutMapProcs.xml"
                processor-name="billToPhone" in-map-name="parameters" out-map-name="billToTelecomNumberCtx"/>
        <set field="billToTelecomNumberCtx.partyId" from-field="parameters.partyId"/>
        <set field="billToTelecomNumberCtx.userLogin" from-field="parameters.userLogin"/>
        <set field="billToTelecomNumberCtx.contactMechPurposeTypeId" value="PHONE_BILLING"/>
        <!-- call create telecom service -->
        <call-service service-name="createPartyTelecomNumber" in-map-name="billToTelecomNumberCtx">
            <result-to-field result-name="contactMechId" field="billToTelecomContactMechId"/>
        </call-service>
        <!-- Associated to Product Store -->
        <entity-one entity-name="UserLogin" value-field="userLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <set field="createProductStoreRoleMap.userLogin" from-field="userLogin"/>
        <set field="createProductStoreRoleMap.partyId" from-field="parameters.partyId"/>
        <set field="createProductStoreRoleMap.roleTypeId" from-field="parameters.roleTypeId"/>
        <set field="createProductStoreRoleMap.productStoreId" from-field="parameters.productStoreId"/>
        <call-service service-name="createProductStoreRole" in-map-name="createProductStoreRoleMap"/>

        <set field="emailAddressCtx.productStoreId" from-field="parameters.productStoreId"/>
        <set-service-fields service-name="sendCreatePartyEmailNotification" map="emailAddressCtx" to-map="serviceInMap"/>
        <call-service-asynch service-name="sendCreatePartyEmailNotification" in-map-name="serviceInMap"/>
     </simple-method>

    <simple-method method-name="updateCustomerProfile" short-description="Update a customer profile">
        <call-class-method class-name="org.ofbiz.product.store.ProductStoreWorker" method-name="getProductStore" ret-field="productStore">
            <field field="request" type="javax.servlet.ServletRequest"/>
        </call-class-method>

        <set-service-fields service-name="createUpdatePerson" map="parameters" to-map="createUpdatePersonCtx"/>
        <set field="createUpdatePersonCtx.userLogin" from-field="userLogin"/>
        <set field="createUpdatePersonCtx.partyId" from-field="userLogin.partyId"/>
        <call-service service-name="createUpdatePerson" in-map-name="createUpdatePersonCtx">
            <result-to-request result-name="partyId"/>
            <result-to-field result-name="partyId" field="parameters.partyId"/>
        </call-service>

        <if-compare field="productStore.usePrimaryEmailUsername" operator="equals" value="Y">
            <set field="parameters.userLoginId" from-field="parameters.emailAddress"/>
            <call-simple-method method-name="setUserLoginFromEmail"/>
        </if-compare>

        <call-simple-method method-name="createUpdateUserLogin"/>

        <call-map-processor xml-resource="component://party/script/org/ofbiz/party/contact/PartyContactMechMapProcs.xml"
                processor-name="emailAddress" in-map-name="parameters" out-map-name="emailAddressContext"/>
        <check-errors/>
        <set-service-fields service-name="createUpdatePartyEmailAddress" map="emailAddressContext" to-map="createUpdatePartyEmailCtx"/>
        <set field="createUpdatePartyEmailCtx.contactMechPurposeTypeId" value="PRIMARY_EMAIL"/>
        <set field="createUpdatePartyEmailCtx.contactMechId" from-field="parameters.emailContactMechId"/>
        <set field="createUpdatePartyEmailCtx.userLogin" from-field="userLogin"/>
        <set field="createUpdatePartyEmailCtx.partyId" from-field="parameters.partyId"/>
        <call-service service-name="createUpdatePartyEmailAddress" in-map-name="createUpdatePartyEmailCtx">
            <result-to-field result-name="contactMechId" field="parameters.emailContactMechId"/>
        </call-service>
    </simple-method>

    <simple-method method-name="setUserLoginFromEmail" short-description="Set userloginId from email. If user edit email address then set it as a new userLoginId and disabled date to far in the future for existing userLoginId">
        <if-compare-field field="parameters.userLoginId" operator="not-equals" to-field="userLogin.userLoginId">
            <set field="loggedInUser" from-field="userLogin"/>
            <set-service-fields service-name="updateUserLoginId" map="parameters" to-map="serviceContext"/>
            <set field="serviceContext.userLogin" from-field="userLogin"/>
            <call-service service-name="updateUserLoginId" in-map-name="serviceContext">
                <result-to-field result-name="newUserLogin"/>
            </call-service>
            <set-current-user-login value-field="newUserLogin"/>
            <call-bsh>
                <![CDATA[
                    org.ofbiz.webapp.control.LoginWorker.doBasicLogin(newUserLogin, request);
                    org.ofbiz.webapp.control.LoginWorker.autoLoginSet(request, response);
                ]]>
            </call-bsh>
            <!-- disabledDateTime/disableForYears set time until a user login remains disabled -->
            <if-not-empty field="parameters.disabledDateTime">
                <set field="disabledDateTime" from-field="parameters.disabledDateTime" type="Date"/>
            <else>
                <now-timestamp field="nowTimeStamp"/>
                <set field="disableForYears" from-field="parameters.disableForYears" default-value="20"/>
                <set-calendar field="disabledDateTime" from-field="nowTimeStamp" years="${disableForYears}"/>
            </else>
            </if-not-empty>
            <set field="loggedInUser.disabledDateTime" from-field="disabledDateTime"/>
            <set field="loggedInUser.enabled" value="N"/>
            <store-value value-field="loggedInUser"/>
            <field-to-session field="newUserLogin.userLoginId" session-name="USER_LOGIN_EMAIL"/>
        </if-compare-field>
    </simple-method>

</simple-methods>
