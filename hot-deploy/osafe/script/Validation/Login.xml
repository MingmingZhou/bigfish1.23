<?xml version="1.0" encoding="UTF-8" ?>

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">

    <simple-method method-name="validateLogin" short-description="Validate Login" login-required="false">
        <if-not-empty field="parameters.USERNAME">
	        <property-to-field resource="security" property="username.lowercase" default="false" field="username_lowercase"/>
	        <property-to-field resource="security" property="password.lowercase" default="false" field="password_lowercase"/>
	        <!-- if username and/or password should be lowercased, do that now -->
	        <if-compare field="username_lowercase" operator="equals" value="true">
	            <call-object-method obj-field="parameters.USERNAME" method-name="toLowerCase" ret-field="parameters.USERNAME"/>
	        </if-compare>
	        <if-compare field="password_lowercase" operator="equals" value="true">
	            <call-object-method obj-field="parameters.PASSWORD" method-name="toLowerCase" ret-field="parameters.PASSWORD"/>
	        </if-compare>
        </if-not-empty>

        <!-- Check fields -->
         <call-map-processor in-map-name="parameters" out-map-name="loginContext">
             <simple-map-processor name="login">

                <process field="USERNAME">
                    <copy to-field="login.username"/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="UserNameMissingError"/></not-empty>
                </process>
                <process field="PASSWORD">
                    <copy to-field="login.password"/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="LoginPasswordMissingError"/></not-empty>
                </process>

             </simple-map-processor>
         </call-map-processor>

        <!-- now that everything is validated & setup, check to see if there are errors, then call the services -->
        <check-errors/>

        <!-- Check that a user with the name passed exists -->
        <if-not-empty field="loginContext['login.username']">
            <set from-field="loginContext['login.username']" field="userLoginExistsMap.userLoginId"/>
            <find-by-primary-key entity-name="UserLogin" map="userLoginExistsMap" value-field="existingUserLogin"/>
            <if-empty field="existingUserLogin">
                <add-error><fail-property resource="OSafeUiLabels" property="InvalidUsernameOrPasswordError"/></add-error>
                <check-errors/>
                <return response-code="error"/>
            </if-empty>
        </if-not-empty>

        <!--
            Check we have been passed the correct password, this is a simplified check so we can generate our own message.
            The normal login flow will still pick up anything we miss.
        -->
        <log level="info" message="loginContext =${loginContext}"></log>
        <set field="checkPasswordInMap.username" from-field="loginContext['login.username']"/>
        <set field="checkPasswordInMap.password" from-field="loginContext['login.password']"/>
        <log level="info" message="checkPasswordInMap =${checkPasswordInMap}"></log>

        <call-service service-name="checkUserPassword" in-map-name="checkPasswordInMap">
            <result-to-field result-name="passwordMatches" field="passwordMatches"/>
        </call-service>

        <if-compare operator="equals" value="N" field="passwordMatches">
            <add-error><fail-property resource="OSafeUiLabels" property="InvalidUsernameOrPasswordError"/></add-error>
            <check-errors/>
            <return response-code="error"/>
        </if-compare>
        <call-object-method obj-field="session" method-name="removeAttribute">
            <string value="userLogin"/>
        </call-object-method>

        <session-to-field field="shoppingCart" session-name="shoppingCart"/>
        <if-not-empty field="shoppingCart">
            <call-object-method obj-field="shoppingCart" method-name="setOrderPartyId">
                <field field="existingUserLogin.partyId"/>
            </call-object-method>
        </if-not-empty>

    	<field-to-session field="parameters.USERNAME" session-name="USER_LOGIN_EMAIL"/>
        
    </simple-method>

    <simple-method method-name="validateForgotPassword" short-description="Validate Forgot Password" login-required="false">
        <property-to-field resource="security" property="username.lowercase" default="false" field="username_lowercase"/>
        <!-- if username and/or password should be lowercased, do that now -->
        <if-compare field="username_lowercase" operator="equals" value="true">
            <call-object-method obj-field="parameters.USERNAME" method-name="toLowerCase" ret-field="parameters.USERNAME"/>
        </if-compare>

        <!-- Check fields -->
         <call-map-processor in-map-name="parameters" out-map-name="loginContext">
             <simple-map-processor name="login">
                <process field="USERNAME">
                    <copy to-field="login.username"/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="ForgotPasswordUserNameMissingError"/></not-empty>
                    <validate-method method="isEmail"><fail-property resource="OSafeUiLabels" property="EmailAddressNotFormattedCorrectlyError"/></validate-method>
                </process>
             </simple-map-processor>
         </call-map-processor>

        <!-- now that everything is validated & setup, check to see if there are errors, then call the services -->
        <check-errors/>

        <!-- Check that a user with the name passed exists -->
        <if-not-empty field="loginContext['login.username']">
            <set from-field="loginContext['login.username']" field="userLoginExistsMap.userLoginId"/>
            <entity-condition list="userLoginList" entity-name="UserLogin">
            	<condition-expr field-name="userLoginId" from-field="parameters.USERNAME" ignore-case="true"/>
			</entity-condition>
            <first-from-list entry="existingUserLogin" list="userLoginList"/>
            
            <if-empty field="existingUserLogin" >
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="InvalidForgotPasswordUsernameError"/>
                <string-to-list string="${tempErrorMessage}" message-field="USERNAME" list="error_list"/>
                <check-errors/>
                <return response-code="error"/>
                <else>
                	<set field="userLoginPartyId" from-field="existingUserLogin.partyId" />
                	<set field="isFbUser" value="N"/>
                	<if-not-empty field="userLoginPartyId">
                		<entity-one entity-name="PartyAttribute" value-field="fbPartyAttribute" use-cache="true" auto-field-map="false">
				            <field-map field-name="partyId" from-field="userLoginPartyId"/>
				            <field-map field-name="attrName" value="FACEBOOK_USER"/>
				        </entity-one>
				        <if-not-empty field="fbPartyAttribute">
				        	<if-compare operator="equals" value="TRUE" field="fbPartyAttribute.attrValue" type="String">
				        		<set field="isFbUser" value="Y"/>
				        	</if-compare>
				        </if-not-empty>
                	</if-not-empty>
                	<if-compare operator="equals" value="N" field="isFbUser">
                		<if-compare field="existingUserLogin.enabled" operator="equals" value="N">
	                		<property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="DisabledForgotPasswordUsernameError"/>
			                <string-to-list string="${tempErrorMessage}" message-field="USERNAME" list="error_list"/>
			                <check-errors/>
			                <return response-code="error"/>
	                	</if-compare>
	                	<else>
	                		<property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="FbForgotPasswordUsernameError"/>
			                <string-to-list string="${tempErrorMessage}" message-field="USERNAME" list="error_list"/>
			                <check-errors/>
			                <return response-code="error"/>
	                	</else>
                	</if-compare>
                </else>
            </if-empty>
        </if-not-empty>

    </simple-method>

    <simple-method method-name="validateNewCustomerEmail" short-description="validateNewCustomerEmail" login-required="false">
        <if-not-empty field="parameters.USERNAME_NEW">
	        <property-to-field resource="security" property="username.lowercase" default="false" field="username_lowercase"/>
	        <!-- if username and/or password should be lowercased, do that now -->
	        <if-compare field="username_lowercase" operator="equals" value="true">
	            <call-object-method obj-field="parameters.USERNAME_NEW" method-name="toLowerCase" ret-field="parameters.USERNAME_NEW"/>
	        </if-compare>
        </if-not-empty>

        <!-- Check username email is in correct form -->
        <if-not-empty field="parameters.USERNAME_NEW">
            <call-map-processor in-map-name="parameters" out-map-name="personMap">
                <simple-map-processor name="newPerson">
                    <process field="personalTitle"><copy/></process>
                    <process field="USERNAME_NEW">
                        <copy/>
                        <validate-method method="isEmail"><fail-property resource="OSafeUiLabels" property="EmailAddressNotFormattedCorrectlyError"/></validate-method>
                    </process>
                </simple-map-processor>
            </call-map-processor>

            <check-errors/>

            <!-- Create that UserLogin does not already exist -->
            <call-map-processor in-map-name="parameters" out-map-name="userLoginContext">
                <simple-map-processor name="newUserLogin">
                    <process field="USERNAME_NEW"><copy to-field="userLoginId"/></process>
                </simple-map-processor>
            </call-map-processor>
            <if-not-empty field="userLoginContext.userLoginId">
                <set from-field="userLoginContext.userLoginId" field="userLoginExistsMap.userLoginId"/>
                <find-by-primary-key entity-name="UserLogin" map="userLoginExistsMap" value-field="existingUserLogin" />
                <if-not-empty field="existingUserLogin">
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="UserNameInUseError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_EMAIL_CONFIRM" list="error_list"/>
                    <field-to-request field="userLoginContext.userLoginId" request-name="loginUserName"/>
                </if-not-empty>
            </if-not-empty>
        <else>
            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="LoginEmailAddressMissingError"/>
            <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_EMAIL_CONFIRM" list="error_list"/>
        </else>

        </if-not-empty>

        <check-errors/>

    	<field-to-session field="parameters.USERNAME_NEW" session-name="USER_LOGIN_EMAIL"/>

    </simple-method>

    <simple-method method-name="validateAnonCustomerEmail" short-description="validateNewCustomerEmail" login-required="false">
        <if-not-empty field="parameters.USERNAME_GUEST">
	        <property-to-field resource="security" property="username.lowercase" default="false" field="username_lowercase"/>
	        <!-- if username and/or password should be lowercased, do that now -->
	        <if-compare field="username_lowercase" operator="equals" value="true">
	            <call-object-method obj-field="parameters.USERNAME_GUEST" method-name="toLowerCase" ret-field="parameters.USERNAME_GUEST"/>
	        </if-compare>
        </if-not-empty>
        <!-- Check username email is in correct form -->
        <if-not-empty field="parameters.USERNAME_GUEST">
            <call-map-processor in-map-name="parameters" out-map-name="personMap">
                <simple-map-processor name="newPerson">
                    <process field="personalTitle"><copy/></process>
                    <process field="USERNAME_GUEST">
                        <copy/>
                        <validate-method method="isEmail"><fail-property resource="OSafeUiLabels" property="EmailAddressNotFormattedCorrectlyError"/></validate-method>
                    </process>
                </simple-map-processor>
            </call-map-processor>

            <check-errors/>

            <!-- Create that UserLogin does not already exist -->
            <call-map-processor in-map-name="parameters" out-map-name="userLoginContext">
                <simple-map-processor name="newUserLogin">
                    <process field="USERNAME_GUEST"><copy to-field="userLoginId"/></process>
                </simple-map-processor>
            </call-map-processor>
            <if-not-empty field="userLoginContext.userLoginId">
                <set from-field="userLoginContext.userLoginId" field="userLoginExistsMap.userLoginId"/>
                <find-by-primary-key entity-name="UserLogin" map="userLoginExistsMap" value-field="existingUserLogin" />
                <if-not-empty field="existingUserLogin">
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="UserNameInUseError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_EMAIL_CONFIRM" list="error_list"/>
                    <field-to-request field="userLoginContext.userLoginId" request-name="loginUserName"/>
                </if-not-empty>
            </if-not-empty>
        <else>
            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="LoginEmailAddressMissingError"/>
            <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_EMAIL_CONFIRM" list="error_list"/>
        </else>

        </if-not-empty>
        <check-errors/>
    	<field-to-session field="parameters.USERNAME_GUEST" session-name="USER_LOGIN_EMAIL"/>
        
    </simple-method>
    <simple-method method-name="forgotPasswordEmailedSuccess" short-description="Forgot Password Emailed" login-required="false">
        <property-to-field field="tempSuccessMessage" resource="OSafeUiLabels" property="ForgotPasswordEmailedSuccess"/>
        <string-to-list string="${tempSuccessMessage}"  list="success_list"/>
        <field-to-request field="success_list" request-name="osafeSuccessMessageList"/>
        <return response-code="success"/>
    </simple-method>
    
    
</simple-methods>
