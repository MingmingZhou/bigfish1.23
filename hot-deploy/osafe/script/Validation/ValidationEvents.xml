<?xml version="1.0" encoding="UTF-8" ?>

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">

    <simple-method method-name="validateCustomerInfo" short-description="validateCustomerInfo" login-required="false">
        <!-- timestamp to be used -->
        <now-timestamp field="nowStamp"/>

        <!-- setup the party/person -->
        <if-not-empty field="parameters.birthDateYear">
            <set field="parameters.birthDate" value="${parameters.birthDateYear}-${parameters.birthDateMonth}-${parameters.birthDateDay}" type="Long"/>
        </if-not-empty>
        <call-map-processor in-map-name="parameters" out-map-name="personMap">
            <simple-map-processor name="newPerson">
                <process field="personalTitle"><copy/></process>
                <process field="firstName">
                    <copy/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="FirstNameMissingError"/></not-empty>
                </process>
                <process field="middleName"><copy/></process>
                <process field="lastName">
                    <copy/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="LastNameMissingError"/></not-empty>
                </process>
                <process field="suffix"><copy/></process>
                <process field="birthDate">
                    <convert type="Date" to-field="birthDate"><fail-property resource="OSafeUiLabels" property="BirthDateMissingError"/></convert>
                </process>
                <process field="gender"><copy/></process>

                <process field="residenceStatusEnumId"><copy/></process>
                <process field="maritalStatus"><copy/></process>
                <process field="employmentStatusEnumId"><copy/></process>
                <process field="occupation"><copy/></process>
                <process field="yearsWithEmployer"><convert type="Long"><fail-message message="Years with Employer was not a valid number: ${parameters.yearsWithEmployer}"/></convert></process>
                <process field="monthsWithEmployer"><convert type="Long"><fail-message message="Months with Employer was not a valid number: ${parameters.monthsWithEmployer}"/></convert></process>
                <process field="existingCustomer"><copy/></process>
            </simple-map-processor>
        </call-map-processor>

        <!-- setup the email -->
        <call-map-processor in-map-name="parameters" out-map-name="emailMap">
            <simple-map-processor name="newEmail">
                <process field="emailAddress">
                    <copy/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="EmailAddressMissingError"/></not-empty>
                    <validate-method method="isEmail"><fail-property resource="OSafeUiLabels" property="EmailAddressNotFormattedCorrectlyError"/></validate-method>
                </process>
                <process field="emailSol"><copy to-field="allowSolicitation"/></process>
            </simple-map-processor>
        </call-map-processor>

        <!-- Create the Home Phone -->
        <call-map-processor in-map-name="parameters" out-map-name="homePhoneMap">
            <simple-map-processor name="newTelecomNumber">
                <process field="homeCountryCode">
                    <copy to-field="countryCode"/>
                </process>
                <process field="homeAreaCode">
                    <copy to-field="areaCode"/>
                </process>
                <process field="homeContactNumber">
                    <copy to-field="contactNumber"/>
                    <not-empty><fail-message message="Home Phone Contact Number is missing."/></not-empty>
                </process>
                <process field="homeExt"><copy to-field="extension"/></process>
                <process field="homeSol"><copy to-field="allowSolicitation"/></process>
            </simple-map-processor>
        </call-map-processor>

        <!-- Create the Work Phone -->
        <call-map-processor in-map-name="parameters" out-map-name="workPhoneMap">
            <simple-map-processor name="newTelecomNumber">
                <process field="workCountryCode">
                    <copy to-field="countryCode"/>
                </process>
                <process field="workAreaCode">
                    <copy to-field="areaCode"/>
                </process>
                <process field="workContactNumber">
                    <copy to-field="contactNumber"/>
                </process>
                <process field="workSol"><copy to-field="allowSolicitation"/></process>
                <process field="workExt"><copy to-field="extension"/></process>
            </simple-map-processor>
        </call-map-processor>

        <!-- Create the Quick Calls Phone -->
        <call-map-processor in-map-name="parameters" out-map-name="quickCallsPhoneMap">
            <simple-map-processor name="newTelecomNumber">
                <process field="quickCallsContactNumber">
                    <copy to-field="contactNumber"/>
                </process>
                <process field="quickCallsSol"><copy to-field="allowSolicitation"/></process>
            </simple-map-processor>
        </call-map-processor>
    </simple-method>
    
    <simple-method method-name="UserLoginValidation" short-description="Basic Account Validation" login-required="false">
        <call-class-method class-name="org.ofbiz.product.store.ProductStoreWorker" method-name="getProductStore" ret-field="productStore">
            <field field="request" type="javax.servlet.ServletRequest"/>
        </call-class-method>

        <if-not-empty field="productStore.allowPassword">
            <if-compare operator="not-equals" value="Y" field="productStore.allowPassword">
                <set field="parameters.PASSWORD" from-field="productStore.defaultPassword" default-value="ungssblepswd"/>
                <set field="parameters.CONFIRM_PASSWORD" from-field="productStore.defaultPassword" default-value="ungssblepswd"/>
                <set field="parameters.PASSWORD_HINT" value="No hint set, account not yet enabled"/>
            </if-compare>
        </if-not-empty>

        <property-to-field resource="security" property="username.lowercase" default="false" field="username_lowercase"/>
        <property-to-field resource="security" property="password.lowercase" default="false" field="password_lowercase"/>

        <call-map-processor in-map-name="parameters" out-map-name="emailContext">
            <simple-map-processor name="newEmail">
                <process field="roleTypeId"><copy/></process>
                <process field="CUSTOMER_EMAIL">
                    <copy to-field="emailAddress"/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="EmailAddressMissingError"/></not-empty>
                    <validate-method method="isEmail"><fail-property resource="OSafeUiLabels" property="EmailAddressNotFormattedCorrectlyError"/></validate-method>
                </process>
            <process field="CUSTOMER_EMAIL_CONFIRM">
                <copy to-field="customerEmailConfirm"/>
                <not-empty><fail-property resource="OSafeUiLabels" property="ConfirmEmailAddressMissingError"/></not-empty>
            </process>
                <process field="CUSTOMER_EMAIL_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
            </simple-map-processor>
        </call-map-processor>
        
        <if-not-empty field="parameters.CUSTOMER_EMAIL_CONFIRM">
	        <if-compare-field field="parameters.CUSTOMER_EMAIL" operator="not-equals" to-field="parameters.CUSTOMER_EMAIL_CONFIRM">
	        	<property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="EmailMatchError"/>
	        	<string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_EMAIL_CONFIRM" list="error_list"/>
	      	</if-compare-field>  
      	</if-not-empty>
				        
        <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
        
        <!-- if username and/or password should be lowercased, do that now -->
        <if-compare field="username_lowercase" operator="equals" value="true">
            <call-object-method obj-field="parameters.USERNAME" method-name="toLowerCase" ret-field="parameters.USERNAME"/>
        </if-compare>
        <if-compare field="password_lowercase" operator="equals" value="true">
            <call-object-method obj-field="parameters.PASSWORD" method-name="toLowerCase" ret-field="parameters.PASSWORD"/>
            <call-object-method obj-field="parameters.CONFIRM_PASSWORD" method-name="toLowerCase" ret-field="parameters.CONFIRM_PASSWORD"/>
        </if-compare>
        <!-- ====================================== -->

        <!-- Check Password Strength -->
        <call-class-method class-name="com.osafe.util.Util" method-name="checkPasswordStrength" ret-field="isValidPass">
            <field field="request" type="javax.servlet.ServletRequest"/>
            <field field="parameters.PASSWORD" type="String"/>
        </call-class-method>
        <if-compare field="isValidPass" operator="not-equals" value="success">
             <set field="tempErrorMessage" from-field="isValidPass"/>
             <string-to-list string="${tempErrorMessage}" message-field="PASSWORD" list="error_list"/>
        </if-compare>

        <!-- Create Map for UserLogin Record -->
        <call-map-processor in-map-name="parameters" out-map-name="userLoginContext">
            <simple-map-processor name="newUserLogin">
                <process field="USERNAME"><copy to-field="userLoginId"/><not-empty><fail-property resource="OSafeUiLabels" property="UserLoginMissingError"/></not-empty></process>
                <process field="PASSWORD"><copy to-field="currentPassword"/></process>
                <process field="CONFIRM_PASSWORD">
                    <compare-field operator="equals" field="PASSWORD"><fail-property resource="OSafeUiLabels" property="PasswordMatchError"/></compare-field>
                    <!-- This is checked below in the checkNewPassword method in the bsh block: <not-empty><fail-message message="You must enter your password twice"/></not-empty> -->
                    <copy to-field="currentPasswordVerify"/>
                </process>
                <process field="PASSWORD_HINT"><copy to-field="passwordHint"/></process>
            </simple-map-processor>
        </call-map-processor>
        
        <if-not-empty field="userLoginContext.userLoginId">
            <set field="userLoginExistsMap.userLoginId" from-field="userLoginContext.userLoginId"/>
            <find-by-primary-key entity-name="UserLogin" map="userLoginExistsMap" value-field="existingUserLogin"/>
            <if-not-empty field="existingUserLogin">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="UserNameInUseError"/>
                <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_EMAIL_CONFIRM" list="error_list"/>
            </if-not-empty>
        </if-not-empty>

        <make-value entity-name="UserLogin" value-field="newUserLogin"/>
        <set from-field="userLoginContext.userLoginId" field="newUserLogin.userLoginId"/>
        <set from-field="userLoginContext.currentPassword" field="newUserLogin.currentPassword"/>
        <set from-field="userLoginContext.passwordHint" field="newUserLogin.passwordHint"/>


        <!-- Check the password, etc for validity -->
        <set field="passwordErrorsList" type="List" />
        <call-bsh><![CDATA[
            List passwordErrorsList = javolution.util.FastList.newInstance();
            String password = (String) userLoginContext.get("currentPassword");
            String confirmPassword = (String) userLoginContext.get("currentPasswordVerify");
            String passwordHint = (String) userLoginContext.get("passwordHint");

            org.ofbiz.common.login.LoginServices.checkNewPassword(newUserLogin, null, password, confirmPassword, passwordHint, passwordErrorsList, true, locale);
        ]]></call-bsh>
        
        <!-- Get errors from method call and associate to field -->
        <if-not-empty  field="passwordErrorsList">
            <log level="info" message="checkNewPassword found errors"/>
            <iterate list="passwordErrorsList" entry="error">
                <string-to-list string="${error}" message-field="PASSWORD" list="error_list"/>
            </iterate>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="PersonalInfoValidation" short-description="Personal Information Validation" login-required="false">

        <!-- Validate Information for Creating Person -->
        <call-map-processor in-map-name="parameters" out-map-name="personContext">
            <simple-map-processor name="newPerson">
                <process field="USER_FIRST_NAME">
                    <copy to-field="firstName"/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="FirstNameMissingError"/></not-empty>
                </process>
                <process field="USER_MIDDLE_NAME"><copy to-field="middleName"/></process>
                <process field="USER_LAST_NAME">
                    <copy to-field="lastName"/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="LastNameMissingError"/></not-empty>
                </process>
                <process field="USER_SUFFIX"><copy to-field="suffix"/></process>
                <process field="USER_BIRTHDATE">
                    <convert type="Date" to-field="birthDate"><fail-property resource="OSafeUiLabels" property="BirthDateMissingError"/></convert>
                </process>
                <!--process field="USER_GENDER">
                    <copy to-field="gender"/>
                    <not-empty><fail-property resource="OSafeUiLabels" property="GenderMissingError"/></not-empty>
                </process-->
            </simple-map-processor>
        </call-map-processor>
        <session-to-field field="USER_LOGIN_EMAIL" session-name="USER_LOGIN_EMAIL"/>
        <set field="personContext.emailAddress" from-field="USER_LOGIN_EMAIL"/>
            <!-- validating Title -->
            <if-compare field="parameters.USER_TITLE_MANDATORY" operator="equals" value="Y">
                <if-not-empty field="parameters.USER_TITLE">
                    <else>
                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="TitleMissingError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="USER_TITLE" list="error_list"/>
                    </else>
                </if-not-empty>
            </if-compare>
            <!-- validating Gender -->
            <if-compare field="parameters.USER_GENDER_MANDATORY" operator="equals" value="Y">
                <if-not-empty field="parameters.USER_GENDER">
                    <else>
                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="GenderMissingError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="USER_GENDER" list="error_list"/>
                    </else>
                </if-not-empty>
            </if-compare>
            <!-- Check the Home Phone -->
	            <if-empty field="parameters.PERSONAL_USE_SCREEN">
	            	<if-not-empty field="parameters.BILLING_COUNTRY">
	            		<set field="parameters.USER_COUNTRY" from-field="parameters.BILLING_COUNTRY"/>
	            	</if-not-empty>
	            </if-empty>
                <if>
                    <condition>
                        <or>
                            <if-compare value="CAN" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                            <if-compare value="USA" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                        </or>
                    </condition>
                    <then>
                        <!-- Show general error if Home Phone is required -->
                        <call-simple-method method-name="validatePhoneHome"/>

                    </then>
                    <else>
                        <call-simple-method method-name="validatePhoneHomeOther"/>
                    </else>
                </if>

            <!-- Check the Mobile Phone -->
                <if>
                    <condition>
                        <or>
                            <if-compare value="CAN" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                            <if-compare value="USA" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                        </or>
                    </condition>
                    <then>
                        <call-simple-method method-name="validatePhoneMobile"/>
                    </then>
                    <else>
                        <call-simple-method method-name="validatePhoneMobileOther"/>
                    </else>
                </if>
    
            <!-- Check the work Phone -->
                <if>
                    <condition>
                        <or>
                            <if-compare value="CAN" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                            <if-compare value="USA" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                        </or>
                    </condition>
                    <then>
                        <call-simple-method method-name="validatePhoneWork"/>
                    </then>
                    <else>
                        <call-simple-method method-name="validatePhoneWorkOther"/>
                    </else>
                </if>

            <!--  Switched to simple copy on processor since we do all validation above -->
            <if>
               <condition>
                  <or>
                    <if-compare value="CAN" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                    <if-compare value="USA" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                  </or>
               </condition>
                    <then>
                        <if-not-empty field="contactHomePhoneMap.contactHomePhoneContact">
                            <set field="homePhoneContext.contactNumber" from-field="contactHomePhoneMap.contactHomePhoneContact"/>
                            <call-map-processor in-map-name="parameters" out-map-name="homePhoneContext">
                                <simple-map-processor name="newTelecomNumber">
                                    <process field="roleTypeId"><copy/></process>
                                    <process field="USER_HOME_COUNTRY"><copy to-field="countryCode"/></process>
                                    <process field="PHONE_HOME_AREA">
                                        <copy to-field="areaCode"/>
                                    </process>
                                    <process field="PHONE_HOME_EXT"><copy to-field="extension"/></process>
                                    <process field="PHONE_HOME_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                                </simple-map-processor>
                            </call-map-processor>
                        </if-not-empty>
                     </then>
                     <else>
                         <if-not-empty field="contactHomeOtherPhoneMap.contactHomeOtherPhoneContact">
                            <set field="homePhoneContext.contactNumber" from-field="contactHomeOtherPhoneMap.contactHomeOtherPhoneContact"/>
                            <call-map-processor in-map-name="parameters" out-map-name="homePhoneContext">
                                <simple-map-processor name="newTelecomNumber">
                                    <process field="roleTypeId"><copy/></process>
                                    <process field="USER_HOME_COUNTRY"><copy to-field="countryCode"/></process>
                                    <process field="PHONE_HOME_AREA_OTHER">
                                        <copy to-field="areaCode"/>
                                    </process>
                                    <process field="PHONE_HOME_EXT"><copy to-field="extension"/></process>
                                    <process field="PHONE_HOME_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                                </simple-map-processor>
                            </call-map-processor>
                        </if-not-empty>
                     </else>
                    </if>

            <!-- Create the Mobile Phone -->
            <if>
               <condition>
                  <or>
                    <if-compare value="CAN" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                    <if-compare value="USA" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                  </or>
               </condition>
                    <then>
                        <if-not-empty field="contactMobilePhoneMap.contactMobilePhoneContact">
                            <set field="mobilePhoneContext.contactNumber" from-field="contactMobilePhoneMap.contactMobilePhoneContact"/>
                            <call-map-processor in-map-name="parameters" out-map-name="mobilePhoneContext">
                                <simple-map-processor name="newTelecomNumber">
                                    <process field="roleTypeId"><copy/></process>
                                    <process field="USER_MOBILE_COUNTRY"><copy to-field="countryCode"/></process>
                                    <process field="PHONE_MOBILE_AREA">
                                        <copy to-field="areaCode"/>
                                    </process>
                                    <process field="PHONE_MOBILE_EXT"><copy to-field="extension"/></process>
                                    <process field="PHONE_MOBILE_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                                </simple-map-processor>
                            </call-map-processor>
                        </if-not-empty>
                    </then>
                <else>
                    <if-not-empty field="contactMobileOtherPhoneMap.contactMobileOtherPhoneContact">
                            <set field="mobilePhoneContext.contactNumber" from-field="contactMobileOtherPhoneMap.contactMobileOtherPhoneContact"/>
                            <call-map-processor in-map-name="parameters" out-map-name="mobilePhoneContext">
                                <simple-map-processor name="newTelecomNumber">
                                    <process field="roleTypeId"><copy/></process>
                                    <process field="PHONE_MOBILE_COUNTRY"><copy to-field="countryCode"/></process>
                                    <process field="PHONE_MOBILE_AREA_OTHER">
                                        <copy to-field="areaCode"/>
                                    </process>
                                    <process field="PHONE_MOBILE_EXT"><copy to-field="extension"/></process>
                                    <process field="PHONE_MOBILE_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                                </simple-map-processor>
                            </call-map-processor>
                        </if-not-empty>
                   </else>
            </if>

            <!-- Create the Work Phone -->
            <if>
               <condition>
                  <or>
                    <if-compare value="CAN" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                    <if-compare value="USA" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
                  </or>
               </condition>
                    <then>
                        <if-not-empty field="contactWorkPhoneMap.contactWorkPhoneContact">
                            <set field="workPhoneContext.contactNumber" from-field="contactWorkPhoneMap.contactWorkPhoneContact"/>
                            <call-map-processor in-map-name="parameters" out-map-name="workPhoneContext">
                                <simple-map-processor name="newTelecomNumber">
                                    <process field="roleTypeId"><copy/></process>
                                    <process field="USER_WORK_COUNTRY"><copy to-field="countryCode"/></process>
                                    <process field="PHONE_WORK_AREA">
                                        <copy to-field="areaCode"/>
                                    </process>
                                    <process field="PHONE_WORK_EXT"><copy to-field="extension"/></process>
                                    <process field="PHONE_WORK_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                                </simple-map-processor>
                            </call-map-processor>
                        </if-not-empty>
                    </then>
                <else>
                    <if-not-empty field="contactWorkOtherPhoneMap.contactWorkOtherPhoneContact">
                            <set field="workPhoneContext.contactNumber" from-field="contactWorkOtherPhoneMap.contactWorkOtherPhoneContact"/>
                            <set field="workPhoneContext.extension" from-field="contactWorkOtherPhoneMap.contactWorkOtherPhoneContactExt"/>
                            <call-map-processor in-map-name="parameters" out-map-name="workPhoneContext">
                                <simple-map-processor name="newTelecomNumber">
                                    <process field="roleTypeId"><copy/></process>
                                    <process field="USER_WORK_COUNTRY"><copy to-field="countryCode"/></process>
                                    <process field="PHONE_WORK_AREA_OTHER">
                                        <copy to-field="areaCode"/>
                                    </process>
                                    <process field="PHONE_WORK_EXT_OTHER"><copy to-field="extension"/></process>
                                    <process field="PHONE_WORK_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                                </simple-map-processor>
                            </call-map-processor>
                        </if-not-empty>
                   </else>
            </if>
            
            <if-compare field="parameters.CUSTOMER_EMAIL_ALLOW_SOL_MANDATORY" operator="equals" value="Y">
	            <if-empty field="parameters.CUSTOMER_EMAIL_ALLOW_SOL">
	                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="EmailSolicitationMissingError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_EMAIL_ALLOW_SOL" list="error_list"/>
	            </if-empty>
            </if-compare>
            
            <if-compare field="parameters.PARTY_EMAIL_PREFERENCE_MANDATORY" operator="equals" value="Y">
	            <if-empty field="parameters.PARTY_EMAIL_PREFERENCE">
	                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="EmailPreferenceMissingError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="PARTY_EMAIL_PREFERENCE" list="error_list"/>
	            </if-empty>
            </if-compare>
            
            <if-compare field="parameters.PARTY_TEXT_PREFERENCE_MANDATORY" operator="equals" value="Y">
	            <if-empty field="parameters.PARTY_TEXT_PREFERENCE">
	                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="TextPreferenceMissingError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="PARTY_TEXT_PREFERENCE" list="error_list"/>
	            </if-empty>
            </if-compare>
            
            <!-- Check the Mobile Phone For Part Text Preference -->
            <if-compare field="parameters.PARTY_TEXT_PREFERENCE" operator="equals" value="Y">
		        <if>
		            <condition>
		                <or>
		                    <if-compare value="CAN" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
		                    <if-compare value="USA" operator="equals" field="parameters.USER_COUNTRY"></if-compare>
		                </or>
		            </condition>
		            <then>
	                        <call-simple-method method-name="validatePhoneMobile"/>
		            </then>
		            <else>
		                <set field="contactMobileOtherPhoneMap.contactMobileOtherPhoneContact" from-field="parameters.PHONE_MOBILE_CONTACT_OTHER"/>
		                <call-class-method class-name="com.osafe.util.Util"  method-name="checkTelecomNumber" ret-field="checkTelecomNumberResult">
		                    <string value=""/>
		                    <field field="contactMobileOtherPhoneMap.contactMobileOtherPhoneContact"/>
		                    <string value="false"/>
		                </call-class-method>
	                    <if-empty field="contactMobileOtherPhoneMap.contactMobileOtherPhoneContact">
	                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="MobilePhoneMissingError"/>
	                        <string-to-list string="${tempErrorMessage}" message-field="PHONE_MOBILE_CONTACT" list="error_list"/>
	                    </if-empty>
		            </else>
		        </if>
            </if-compare>
            
            <!-- DOB Short(MMDD) validation -->
            <call-class-method class-name="com.osafe.util.Util"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
                <field field="parameters.dobShortDayUs"/>
                <field field="parameters.dobShortMonthUs"/>
                <string value="1972"/>
                <string value="MMDD"/>
                <field field="parameters.DOB_MMDD_MANDATORY"/>
            </call-class-method>
            
            <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
                <if-compare field="checkDateOfBirthResult" operator="equals" value="missing">
	                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="MissingDobDateError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="DOB_MMDD" list="error_list"/>
                    <string-to-list string="" message-field="dobShortDayUs" list="error_list"/>
                    <string-to-list string="" message-field="dobShortMonthUs" list="error_list"/>
	            </if-compare>
                <if-compare field="checkDateOfBirthResult" operator="equals" value="invalid">
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ValidDobDateError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="DOB_MMDD" list="error_list"/>
                    <string-to-list string="" message-field="dobShortDayUs" list="error_list"/>
                    <string-to-list string="" message-field="dobShortMonthUs" list="error_list"/>
                </if-compare>
            <else>
                <if-not-empty field="parameters.dobShortMonthUs">
	                <string-append string="${parameters.dobShortMonthUs}" field="DOB_MMDD"/>
                    <string-append string="/" field="DOB_MMDD"/>
                    <string-append string="${parameters.dobShortDayUs}" field="DOB_MMDD"/>
		        </if-not-empty>
            </else>
            </if-compare>
            
            <!-- DOB Short(MMDDYYYY) validation -->
            <call-class-method class-name="com.osafe.util.Util"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
                <field field="parameters.dobLongDayUs"/>
                <field field="parameters.dobLongMonthUs"/>
                <field field="parameters.dobLongYearUs"/>
                <string value="MMDDYYYY"/>
                <field field="parameters.DOB_MMDDYYYY_MANDATORY"/>
            </call-class-method>
            
            <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
                <if-compare field="checkDateOfBirthResult" operator="equals" value="missing">
	                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="MissingDobDateError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="DOB_MMDDYYYY" list="error_list"/>
                    <string-to-list string="" message-field="dobLongDayUs" list="error_list"/>
                    <string-to-list string="" message-field="dobLongMonthUs" list="error_list"/>
                    <string-to-list string="" message-field="dobLongYearUs" list="error_list"/>
	            </if-compare>
                <if-compare field="checkDateOfBirthResult" operator="equals" value="invalid">
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ValidDobDateError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="DOB_MMDDYYYY" list="error_list"/>
                    <string-to-list string="" message-field="dobLongDayUs" list="error_list"/>
                    <string-to-list string="" message-field="dobLongMonthUs" list="error_list"/>
                    <string-to-list string="" message-field="dobLongYearUs" list="error_list"/>
                </if-compare>
            <else>
                <if-not-empty field="parameters.dobLongMonthUs">
		            <string-append string="${parameters.dobLongMonthUs}" field="DOB_MMDDYYYY"/>
                    <string-append string="/" field="DOB_MMDDYYYY"/>
                    <string-append string="${parameters.dobLongDayUs}" field="DOB_MMDDYYYY"/>
                    <string-append string="/" field="DOB_MMDDYYYY"/>
                    <string-append string="${parameters.dobLongYearUs}" field="DOB_MMDDYYYY"/>
		        </if-not-empty>
            </else>
            </if-compare>
            
            <!-- DOB Short(DDMM) validation -->
            <call-class-method class-name="com.osafe.util.Util"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
                <field field="parameters.dobShortDayUk"/>
                <field field="parameters.dobShortMonthUk"/>
                <string value="1972"/>
                <string value="DDMM"/>
                <field field="parameters.DOB_DDMM_MANDATORY"/>
            </call-class-method>
            
            <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
                <if-compare field="checkDateOfBirthResult" operator="equals" value="missing">
	                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="MissingDobDateError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="DOB_DDMM" list="error_list"/>
                    <string-to-list string="" message-field="dobShortDayUk" list="error_list"/>
                    <string-to-list string="" message-field="dobShortMonthUk" list="error_list"/>
	            </if-compare>
                <if-compare field="checkDateOfBirthResult" operator="equals" value="invalid">
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ValidDobDateError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="DOB_DDMM" list="error_list"/>
                    <string-to-list string="" message-field="dobShortDayUk" list="error_list"/>
                    <string-to-list string="" message-field="dobShortMonthUk" list="error_list"/>
                </if-compare>
            <else>
                <if-not-empty field="parameters.dobShortMonthUk">
                    <string-append string="${parameters.dobShortDayUk}" field="DOB_DDMM"/>
                    <string-append string="/" field="DOB_DDMM"/>
                    <string-append string="${parameters.dobShortMonthUk}" field="DOB_DDMM"/>
		        </if-not-empty>
            </else>
            </if-compare>
            
            <!-- DOB Long(DDMMYYYY) validation -->
            <call-class-method class-name="com.osafe.util.Util"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
                <field field="parameters.dobLongDayUk"/>
                <field field="parameters.dobLongMonthUk"/>
                <field field="parameters.dobLongYearUk"/>
                <string value="DDMMYYYY"/>
                <field field="parameters.DOB_DDMMYYYY_MANDATORY"/>
            </call-class-method>
            
            <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
                <if-compare field="checkDateOfBirthResult" operator="equals" value="missing">
	                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="MissingDobDateError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="DOB_DDMMYYYY" list="error_list"/>
                    <string-to-list string="" message-field="dobLongDayUk" list="error_list"/>
                    <string-to-list string="" message-field="dobLongMonthUk" list="error_list"/>
                    <string-to-list string="" message-field="dobLongYearUk" list="error_list"/>
	            </if-compare>
                <if-compare field="checkDateOfBirthResult" operator="equals" value="invalid">
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ValidDobDateError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="DOB_DDMMYYYY" list="error_list"/>
                    <string-to-list string="" message-field="dobLongDayUk" list="error_list"/>
                    <string-to-list string="" message-field="dobLongMonthUk" list="error_list"/>
                    <string-to-list string="" message-field="dobLongYearUk" list="error_list"/>
                </if-compare>
            <else>
                <if-not-empty field="parameters.dobLongMonthUk">
                    <string-append string="${parameters.dobLongDayUk}" field="DOB_DDMMYYYY"/>
                    <string-append string="/" field="DOB_DDMMYYYY"/>
		            <string-append string="${parameters.dobLongMonthUk}" field="DOB_DDMMYYYY"/>
                    <string-append string="/" field="DOB_DDMMYYYY"/>
                    <string-append string="${parameters.dobLongYearUk}" field="DOB_DDMMYYYY"/>
		        </if-not-empty>
            </else>
            </if-compare>
            
            <!-- Custom Attributes -->
            <if-compare operator="equals" value="Y" field="parameters.USER_CUSTOM_ATTRIBUTE_ACTIVE">
                <set field="getPartyCustomAttributeListCtx" type="NewMap"/>
                <set field="getPartyCustomAttributeListCtx.useCache" value="true" type="String"/>
                <call-service service-name="getPartyCustomAttributeList" in-map-name="getPartyCustomAttributeListCtx">
                    <result-to-field result-name="customPartyAttributeList" field="customPartyAttributeList"/>
                </call-service>
	            
	            <set field="attrNo" value="0" type="Integer"/>
	            
	            <iterate entry="customPartyAttributeMap" list="customPartyAttributeList">
	                <set field="errorOnField" value="false"/>
	                <set field="requiredMessage" from-field="customPartyAttributeMap.ReqMessage"/>
	                <property-to-field field="dateCompletionErrorMessage" resource="OSafeUiLabels" property="DateCompletionError"/>
	                <clear-field field="dateString"/>
                    <if>
	                <condition>
	                    <or> 
	                        <if-compare operator="equals" value="Y" field="customPartyAttributeMap.Mandatory"/>
	                        <if-compare operator="equals" value="Yes" field="customPartyAttributeMap.Mandatory"/>
	                        <if-compare operator="equals" value="DATE_MMDD" field="customPartyAttributeMap.Type"/>
	                        <if-compare operator="equals" value="DATE_MMDDYYYY" field="customPartyAttributeMap.Type"/>
	                        <if-compare operator="equals" value="DATE_DDMM" field="customPartyAttributeMap.Type"/>
	                        <if-compare operator="equals" value="DATE_DDMMYYYY" field="customPartyAttributeMap.Type"/>
	                    </or>
	                </condition>
	                <then>
	                    <if>
		                <condition> 
		                    <if-compare operator="equals" value="DATE_MMDD" field="customPartyAttributeMap.Type"/>
		                </condition>
		                <then>
		                    <!-- DOB Short(MMDD) validation -->
				            <call-class-method class-name="com.osafe.util.Util"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
				                <field field="parameters.${customPartyAttributeMap.AttrName}_DD"/>
				                <field field="parameters.${customPartyAttributeMap.AttrName}_MM"/>
				                <string value="1972"/>
				                <string value="MMDD"/>
				                <field field="customPartyAttributeMap.Mandatory"/>
				            </call-class-method>
				            <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
				                <set field="errorOnField" value="true"/>
				                <if-compare operator="not-equals" value="Y" field="customPartyAttributeMap.Mandatory">
				                    <set field="requiredMessage" from-field="dateCompletionErrorMessage"/>
				                </if-compare>
				            </if-compare>   
		                </then>
		                <else-if>
		                    <condition>
		                        <if-compare operator="equals" value="DATE_MMDDYYYY" field="customPartyAttributeMap.Type"/>
		                    </condition>
		                <then>
		                    <!-- DOB Short(MMDDYYYY) validation -->
				            <call-class-method class-name="com.osafe.util.Util"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
				                <field field="parameters.${customPartyAttributeMap.AttrName}_DD"/>
				                <field field="parameters.${customPartyAttributeMap.AttrName}_MM"/>
				                <field field="parameters.${customPartyAttributeMap.AttrName}_YYYY"/>
				                <string value="MMDDYYYY"/>
				                <field field="customPartyAttributeMap.Mandatory"/>
				            </call-class-method>
				            <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
				                <set field="errorOnField" value="true"/>
				                <if-compare operator="not-equals" value="Y" field="customPartyAttributeMap.Mandatory">
				                    <set field="requiredMessage" from-field="dateCompletionErrorMessage"/>
				                </if-compare>
				            </if-compare>
		                </then>
		                </else-if>
		                <else-if>
		                    <condition>
		                        <if-compare operator="equals" value="DATE_DDMM" field="customPartyAttributeMap.Type"/>
		                    </condition>
		                <then>
		                    <!-- DOB Short(DDMM) validation -->
				            <call-class-method class-name="com.osafe.util.Util"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
				                <field field="parameters.${customPartyAttributeMap.AttrName}_DD"/>
				                <field field="parameters.${customPartyAttributeMap.AttrName}_MM"/>
				                <string value="1972"/>
				                <string value="DDMM"/>
				                <field field="customPartyAttributeMap.Mandatory"/>
				            </call-class-method>
				            <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
				                <set field="errorOnField" value="true"/>
				                <if-compare operator="not-equals" value="Y" field="customPartyAttributeMap.Mandatory">
				                    <set field="requiredMessage" from-field="dateCompletionErrorMessage"/>
				                </if-compare>
				            </if-compare>
		                </then>
		                </else-if>
		                <else-if>
		                    <condition>
		                        <if-compare operator="equals" value="DATE_DDMMYYYY" field="customPartyAttributeMap.Type"/>
		                    </condition>
		                <then>
		                    <!-- DOB Short(DDMMYYYY) validation -->
				            <call-class-method class-name="com.osafe.util.Util"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
				                <field field="parameters.${customPartyAttributeMap.AttrName}_DD"/>
				                <field field="parameters.${customPartyAttributeMap.AttrName}_MM"/>
				                <field field="parameters.${customPartyAttributeMap.AttrName}_YYYY"/>
				                <string value="DDMMYYYY"/>
				                <field field="customPartyAttributeMap.Mandatory"/>
				            </call-class-method>
				            <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
				                <set field="errorOnField" value="true"/>
				                <if-compare operator="not-equals" value="Y" field="customPartyAttributeMap.Mandatory">
				                    <set field="requiredMessage" from-field="dateCompletionErrorMessage"/>
				                </if-compare>
				            </if-compare>
		                </then>
		                </else-if>
		                <else>
		                    <if-empty field="parameters.${customPartyAttributeMap.AttrName}">
		                        <set field="errorOnField" value="true"/>
		                    </if-empty>
		                </else>
		                </if>
		                <if-compare operator="equals" value="true" field="errorOnField">
		                    <if>
		                        <condition> 
		                            <if-compare operator="equals" value="0" field="attrNo"/>
		                        </condition>
		                        <then>
		                            <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_0" list="error_list"/>
		                        </then>
		                        <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="1" field="attrNo"/>
				                    </condition>
			                    <then>
			                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_1" list="error_list"/>
			                    </then>
				                </else-if>
		                        <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="2" field="attrNo"/>
				                    </condition>
			                    <then>
			                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_2" list="error_list"/>
			                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="3" field="attrNo"/>
				                    </condition>
				                <then>
				                    <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_3" list="error_list"/>
				                </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="4" field="attrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_4" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="5" field="attrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_5" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="6" field="attrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_6" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="7" field="attrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_7" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="8" field="attrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_8" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="9" field="attrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_9" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="10" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_10" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="11" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_11" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="12" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_12" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="13" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_13" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="14" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_14" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="15" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_15" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="16" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_16" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="17" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_17" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="18" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_18" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="19" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_19" list="error_list"/>
				                    </then>
				                </else-if>
		                    </if>
		                </if-compare>
		             </then>
		            </if>            
	                
	                <calculate field="attrNo">
                        <calcop operator="add" >
                            <calcop operator="get" field="attrNo"/>
                            <number value="1"/>
                        </calcop>
                    </calculate>
	            </iterate>
            </if-compare>
    </simple-method>

    <simple-method method-name="validateBillingAddress" short-description="validate Customer/Billing Address" login-required="false">
        
        <if-not-empty field="parameters.BILLING_FULL_NAME">
    		<set field="parameters.billingFullName" from-field="parameters.BILLING_FULL_NAME"/>
    	 <else>
	         <if-not-empty field="parameters.BILLING_FIRST_NAME">
	    	     <set field="parameters.billingFullName" value="${parameters.BILLING_FIRST_NAME}"/>
	    	 </if-not-empty>
	         <if-not-empty field="parameters.BILLING_LAST_NAME">
		         <if-not-empty field="parameters.BILLING_FIRST_NAME">
	    		     <set field="parameters.billingFullName" value="${parameters.billingFullName} ${parameters.BILLING_LAST_NAME}"/>
	    		 <else>
	    		     <set field="parameters.billingFullName" value="${parameters.BILLING_LAST_NAME}"/>
	    		 </else>
		         </if-not-empty>
	    	 </if-not-empty>
 		 </else>
    	 </if-not-empty>
    	 
        <call-map-processor in-map-name="parameters" out-map-name="billingAddressContext">
            <simple-map-processor name="newPerson">
                <process field="roleTypeId"><copy/></process>
                <process field="billingFullName"><copy to-field="toName"/></process>
                <process field="BILLING_ATTN_NAME"><copy to-field="attnName"/></process>
                <process field="BILLING_ADDRESS1">
                    <copy to-field="address1"/>
                </process>
                <process field="BILLING_ADDRESS2"><copy to-field="address2"/></process>
                <process field="BILLING_ADDRESS3"><copy to-field="address3"/></process>
                <process field="BILLING_CITY">
                    <copy to-field="city"/>
                </process>
                <process field="BILLING_STATE"><copy to-field="stateProvinceGeoId"/></process>
                <process field="BILLING_POSTAL_CODE">
                    <copy to-field="postalCode"/>
                </process>
                <process field="BILLING_COUNTRY">
                    <copy to-field="countryGeoId"/>
                </process>
                <process field="BILLING_ADDRESS_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
            </simple-map-processor>
        </call-map-processor>
        
        <if-compare field="parameters.BILLING_ATTN_NAME_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.BILLING_ATTN_NAME">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressNickNameMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="BILLING_ATTN_NAME" list="billing_error_list"/>
	        </if-empty>
        </if-compare>
        
        <if-compare field="parameters.BILLING_FULL_NAME_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.BILLING_FULL_NAME">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="FullNameMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="BILLING_FULL_NAME" list="billing_error_list"/>
	        </if-empty>
        </if-compare>
        
        <if-compare field="parameters.BILLING_FIRST_NAME_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.BILLING_FIRST_NAME">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="FirstNameMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="BILLING_FIRST_NAME" list="billing_error_list"/>
	        </if-empty>
        </if-compare>
        
        <if-compare field="parameters.BILLING_LAST_NAME_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.BILLING_LAST_NAME">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="LastNameMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="BILLING_LAST_NAME" list="billing_error_list"/>
	        </if-empty>
        </if-compare>
        
        <if-compare field="parameters.BILLING_ADDRESS1_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.BILLING_ADDRESS1">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressLine1MissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="BILLING_ADDRESS1" list="billing_error_list"/>
	        </if-empty>
        </if-compare>
        <if-compare field="parameters.BILLING_ADDRESS2_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.BILLING_ADDRESS2">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressLine2MissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="BILLING_ADDRESS2" list="billing_error_list"/>
	        </if-empty>
        </if-compare>
        <if-compare field="parameters.BILLING_ADDRESS3_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.BILLING_ADDRESS3">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressLine3MissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="BILLING_ADDRESS3" list="billing_error_list"/>
	        </if-empty>
        </if-compare>
        <if-compare field="parameters.BILLING_COUNTRY_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.BILLING_COUNTRY">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CountryMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="BILLING_COUNTRY" list="billing_error_list"/>
	        </if-empty>
        </if-compare>
        <if-compare field="parameters.BILLING_POSTAL_CODE_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.BILLING_POSTAL_CODE">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ZipCodeMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="BILLING_POSTAL_CODE" list="billing_error_list"/>
	        </if-empty>
        </if-compare>
        
        <!-- Check for a valid Postal Code For USA only -->
        <if-not-empty field="parameters.BILLING_POSTAL_CODE">
            <if-compare value="USA" operator="equals" field="parameters.BILLING_COUNTRY">
                <call-class-method class-name="com.osafe.util.Util"  method-name="isZipCode" ret-field="isZipCode">
                    <field field="parameters.BILLING_POSTAL_CODE"/>
                </call-class-method>
            </if-compare>
            <if-compare field="isZipCode" operator="equals"  value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="InvalidZipCodeError"/>
                <string-to-list string="${tempErrorMessage}" message-field="BILLING_POSTAL_CODE" list="billing_error_list"/>
            </if-compare>
        </if-not-empty>
        
        <if-compare field="parameters.BILLING_CITY_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.BILLING_CITY">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CityMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="BILLING_CITY" list="billing_error_list"/>
	        </if-empty>
        </if-compare>
        
        <call-class-method class-name="org.ofbiz.common.CommonWorkers"  method-name="getAssociatedStateList" ret-field="statesList">
             <field field="delegator" type="org.ofbiz.entity.Delegator"/>
             <field field="parameters.SHIPPING_COUNTRY"/>
        </call-class-method>
        <if-not-empty field="statesList">
	        <if-compare field="parameters.BILLING_STATE_MANDATORY" operator="equals" value="Y">
		        <if-empty field="parameters.BILLING_STATE">
		            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="StateMissingError"/>
		            <string-to-list string="${tempErrorMessage}" message-field="BILLING_STATE" list="billing_error_list"/>
		        </if-empty>
	        </if-compare>
        </if-not-empty>
        <!-- Check for a address3 -->
        <if-compare field="parameters.BILLING_STATE" operator="equals" value="_NA_">
            <set field="billingAddressContext.address3" from-field="parameters.BILLING_ADDRESS3"/>
        </if-compare>

         <!-- if no error in validation then perform verification -->
         <if-empty field="billing_error_list">
             <if-empty field="parameters.BILLING_SKIP_VERIFICATION">
                  <!-- Check if there are any extended address validation to perform -->
                 <set-service-fields service-name="extendedAddressValidation" to-map="extendedAddressValidationCtx" map="billingAddressContext"/>
                 <call-class-method class-name="org.ofbiz.product.store.ProductStoreWorker" method-name="getProductStoreId" ret-field="productStoreId">
                     <field field="request" type="javax.servlet.ServletRequest"/>
                 </call-class-method>
                 <set field="extendedAddressValidationCtx.productStoreId" from-field="productStoreId"/>
                 <call-service service-name="extendedAddressValidation" in-map-name="extendedAddressValidationCtx">
                    <result-to-field result-name="address1" field="billingAddressContext.address1"/>
                    <result-to-field result-name="address2" field="billingAddressContext.address2"/>
                    <result-to-field result-name="address3" field="billingAddressContext.address3"/>
                    <result-to-field result-name="city" field="billingAddressContext.city"/>
                    <result-to-field result-name="postalCode" field="billingAddressContext.postalCode"/>
                    <result-to-field result-name="postalCodeExt" field="billingAddressContext.postalCodeExt"/>
                    <result-to-field result-name="stateProvinceGeoId" field="billingAddressContext.stateCode"/>
                    <result-to-field result-name="countyGeoId" field="billingAddressContext.countyGeoId"/>
                    <result-to-field result-name="countryGeoId" field="billingAddressContext.countryCode"/>
                    <result-to-field result-name="responseCode" field="responseCode"/>
                    <result-to-field result-name="suggestionList" field="billingAddressSuggestionList"/>
                </call-service>
                <if-empty field="responseCode">
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressVerificationError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="BILLING_ADDRESS_ERROR" list="error_list"/>
	    	        <set field="BILLING_SHOW_SKIP_VERIFICATION" value="Y"/>
                    <field-to-request field="BILLING_SHOW_SKIP_VERIFICATION"/>
                <else>
	                <if-compare operator="less-equals" value="0" field="responseCode">
	                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressVerificationError"/>
	                    <string-to-list string="${tempErrorMessage}" message-field="BILLING_ADDRESS_ERROR" list="error_list"/>
		    	        <set field="BILLING_SHOW_SKIP_VERIFICATION" value="Y"/>
	                    <field-to-request field="BILLING_SHOW_SKIP_VERIFICATION"/>
	                </if-compare>
                </else>
                </if-empty>
            </if-empty>
        </if-empty>
        <list-to-list list="billing_error_list" to-list="error_list"/>
        <return response-code="success"/>
    </simple-method>

    <simple-method method-name="validateShippingAddress" short-description="validate Shipping Address" login-required="false">
    	<if-not-empty field="parameters.SHIPPING_FULL_NAME">
    		<set field="parameters.shippingFullName" from-field="parameters.SHIPPING_FULL_NAME"/>
    	 <else>
	         <if-not-empty field="parameters.SHIPPING_FIRST_NAME">
	    	     <set field="parameters.shippingFullName" value="${parameters.SHIPPING_FIRST_NAME}"/>
	    	 </if-not-empty>
	         <if-not-empty field="parameters.SHIPPING_LAST_NAME">
		         <if-not-empty field="parameters.SHIPPING_FIRST_NAME">
	    		     <set field="parameters.shippingFullName" value="${parameters.shippingFullName} ${parameters.SHIPPING_LAST_NAME}"/>
	    		 <else>
	    		     <set field="parameters.shippingFullName" value="${parameters.SHIPPING_LAST_NAME}"/>
	    		 </else>
		         </if-not-empty>
	    	 </if-not-empty>
 		 </else>
    	 </if-not-empty>
    	
        <call-map-processor in-map-name="parameters" out-map-name="shippingAddressContext">
            <simple-map-processor name="newPerson">
                <process field="shippingFullName"><copy to-field="toName"/></process>
                <process field="roleTypeId"><copy/></process>
                <process field="SHIPPING_ATTN_NAME">
                    <copy to-field="attnName"/>
                </process>
                <process field="SHIPPING_ADDRESS1">
                    <copy to-field="address1"/>
                </process>
                <process field="SHIPPING_ADDRESS2"><copy to-field="address2"/></process>
                <process field="SHIPPING_ADDRESS3"><copy to-field="address3"/></process>
                <process field="SHIPPING_CITY"><copy to-field="city"/></process>
                <process field="SHIPPING_STATE"><copy to-field="stateProvinceGeoId"/></process>
                <process field="SHIPPING_POSTAL_CODE"><copy to-field="postalCode"/></process>
                <process field="SHIPPING_COUNTRY">
                    <copy to-field="countryGeoId"/>
                </process>
                <process field="SHIPPING_ADDRESS_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
            </simple-map-processor>
        </call-map-processor>
        
        <if-compare field="parameters.SHIPPING_FULL_NAME_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.SHIPPING_FULL_NAME">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="FullNameMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="SHIPPING_FULL_NAME" list="shipping_error_list"/>
	        </if-empty>
        </if-compare>
        
        <if-compare field="parameters.SHIPPING_FIRST_NAME_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.SHIPPING_FIRST_NAME">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="FirstNameMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="SHIPPING_FIRST_NAME" list="shipping_error_list"/>
	        </if-empty>
        </if-compare>
        
        <if-compare field="parameters.SHIPPING_LAST_NAME_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.SHIPPING_LAST_NAME">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="LastNameMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="SHIPPING_LAST_NAME" list="shipping_error_list"/>
	        </if-empty>
        </if-compare>
        
        <if-compare field="parameters.SHIPPING_ADDRESS1_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.SHIPPING_ADDRESS1">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressLine1MissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="SHIPPING_ADDRESS1" list="shipping_error_list"/>
	        </if-empty>
        </if-compare>
        <if-compare field="parameters.SHIPPING_ADDRESS2_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.SHIPPING_ADDRESS2">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressLine2MissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="SHIPPING_ADDRESS2" list="shipping_error_list"/>
	        </if-empty>
        </if-compare>
        <if-compare field="parameters.SHIPPING_ADDRESS3_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.SHIPPING_ADDRESS3">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressLine3MissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="SHIPPING_ADDRESS3" list="shipping_error_list"/>
	        </if-empty>
        </if-compare>
        
        <if-compare field="parameters.SHIPPING_COUNTRY_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.SHIPPING_COUNTRY">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CountryMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="SHIPPING_COUNTRY" list="shipping_error_list"/>
	        </if-empty>
        </if-compare>

        <if-compare field="parameters.SHIPPING_ATTN_NAME_MANDATORY" operator="equals" value="Y">
            <if-empty field="parameters.SHIPPING_ATTN_NAME ">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressNickNameMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="SHIPPING_ATTN_NAME" list="shipping_error_list"/>
            </if-empty>
        </if-compare>

        <if-compare field="parameters.SHIPPING_POSTAL_CODE_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.SHIPPING_POSTAL_CODE ">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ZipCodeMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="SHIPPING_POSTAL_CODE" list="shipping_error_list"/>
	        </if-empty>
        </if-compare>
        <!-- Check for a valid Postal Code For USA only -->
        <if-not-empty field="parameters.SHIPPING_POSTAL_CODE">
            <if-compare value="USA" operator="equals" field="parameters.SHIPPING_COUNTRY">
                <call-class-method class-name="com.osafe.util.Util"  method-name="isZipCode" ret-field="isZipCode">
                    <field field="parameters.SHIPPING_POSTAL_CODE"/>
                </call-class-method>
            </if-compare>
            <if-compare field="isZipCode" operator="equals"  value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="InvalidZipCodeError"/>
                <string-to-list string="${tempErrorMessage}" message-field="SHIPPING_POSTAL_CODE" list="shipping_error_list"/>
            </if-compare>
        </if-not-empty>
        
        <if-compare field="parameters.SHIPPING_CITY_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.SHIPPING_CITY">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CityMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="SHIPPING_CITY" list="shipping_error_list"/>
	        </if-empty>
        </if-compare>
        
        <!-- if a country has States than state is mandatory. -->
         <call-class-method class-name="org.ofbiz.common.CommonWorkers"  method-name="getAssociatedStateList" ret-field="statesList">
             <field field="delegator" type="org.ofbiz.entity.Delegator"/>
             <field field="parameters.SHIPPING_COUNTRY"/>
         </call-class-method>
        
        <if-not-empty field="statesList"> 
	        <if-compare field="parameters.SHIPPING_STATE_MANDATORY" operator="equals" value="Y">
		        <if-empty field="parameters.SHIPPING_STATE">
		            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="StateMissingError"/>
		            <string-to-list string="${tempErrorMessage}" message-field="SHIPPING_STATE" list="shipping_error_list"/>
		        </if-empty>
	        </if-compare>
        </if-not-empty>

        <!-- Check for a address3 -->
        <if-compare field="parameters.SHIPPING_STATE" operator="equals" value="_NA_">
            <set field="shippingAddressContext.address3" from-field="parameters.SHIPPING_ADDRESS3"/>
        </if-compare>



         <!-- if no error in validation then perform verification -->
         <if-empty field="shipping_error_list">
             <if-empty field="parameters.SHIPPING_SKIP_VERIFICATION">
                  <!-- Check if there are any extended address validation to perform -->
                 <set-service-fields service-name="extendedAddressValidation" to-map="extendedAddressValidationCtx" map="shippingAddressContext"/>
                 <call-class-method class-name="org.ofbiz.product.store.ProductStoreWorker" method-name="getProductStoreId" ret-field="productStoreId">
                     <field field="request" type="javax.servlet.ServletRequest"/>
                 </call-class-method>
                 <set field="extendedAddressValidationCtx.productStoreId" from-field="productStoreId"/>
                 <call-service service-name="extendedAddressValidation" in-map-name="extendedAddressValidationCtx">
                    <result-to-field result-name="address1" field="shippingAddressContext.address1"/>
                    <result-to-field result-name="address2" field="shippingAddressContext.address2"/>
                    <result-to-field result-name="address3" field="shippingAddressContext.address3"/>
                    <result-to-field result-name="city" field="shippingAddressContext.city"/>
                    <result-to-field result-name="postalCode" field="shippingAddressContext.postalCode"/>
                    <result-to-field result-name="postalCodeExt" field="shippingAddressContext.postalCodeExt"/>
                    <result-to-field result-name="stateProvinceGeoId" field="shippingAddressContext.stateCode"/>
                    <result-to-field result-name="countyGeoId" field="shippingAddressContext.countyGeoId"/>
                    <result-to-field result-name="countryGeoId" field="shippingAddressContext.countryCode"/>
                    <result-to-field result-name="responseCode" field="responseCode"/>
                    <result-to-field result-name="suggestionList" field="shippingAddressSuggestionList"/>
                </call-service>
                <if-empty field="responseCode">
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressVerificationError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="SHIPPING_ADDRESS_ERROR" list="error_list"/>
	    	        <set field="SHIPPING_SHOW_SKIP_VERIFICATION" value="Y"/>
                    <field-to-request field="SHIPPING_SHOW_SKIP_VERIFICATION"/>
                <else>
                    <if-compare operator="less-equals" value="0" field="responseCode">
                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressVerificationError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="SHIPPING_ADDRESS_ERROR" list="error_list"/>
		    	        <set field="SHIPPING_SHOW_SKIP_VERIFICATION" value="Y"/>
	                    <field-to-request field="SHIPPING_SHOW_SKIP_VERIFICATION"/>
                    </if-compare>
                </else>
                </if-empty>
            </if-empty>
        </if-empty>
        <list-to-list list="shipping_error_list" to-list="error_list"/>
        <return response-code="success"/>
    </simple-method>
    
    <simple-method method-name="validatePersonalInfoBillingAddress" short-description="validate Customer/Billing Address from Personal Info section" login-required="false">
        
        <if-not-empty field="parameters.PERSONAL_FULL_NAME">
    		<set field="parameters.billingFullName" from-field="parameters.PERSONAL_FULL_NAME"/>
    	 <else>
	         <if-not-empty field="parameters.USER_FIRST_NAME">
	    	     <set field="parameters.billingFullName" value="${parameters.USER_FIRST_NAME}"/>
	    	 </if-not-empty>
	         <if-not-empty field="parameters.USER_LAST_NAME">
		         <if-not-empty field="parameters.USER_FIRST_NAME">
	    		     <set field="parameters.billingFullName" value="${parameters.billingFullName} ${parameters.USER_LAST_NAME}"/>
	    		 <else>
	    		     <set field="parameters.billingFullName" value="${parameters.USER_LAST_NAME}"/>
	    		 </else>
		         </if-not-empty>
	    	 </if-not-empty>
 		 </else>
    	 </if-not-empty>
    	 
        <call-map-processor in-map-name="parameters" out-map-name="billingAddressContext">
            <simple-map-processor name="newPerson">
                <process field="roleTypeId"><copy/></process>
                <process field="billingFullName"><copy to-field="toName"/></process>
                <process field="PERSONAL_ATTN_NAME"><copy to-field="attnName"/></process>
                <process field="PERSONAL_ADDRESS1">
                    <copy to-field="address1"/>
                </process>
                <process field="PERSONAL_ADDRESS2"><copy to-field="address2"/></process>
                <process field="PERSONAL_ADDRESS3"><copy to-field="address3"/></process>
                <process field="PERSONAL_CITY">
                    <copy to-field="city"/>
                </process>
                <process field="PERSONAL_STATE"><copy to-field="stateProvinceGeoId"/></process>
                <process field="PERSONAL_POSTAL_CODE">
                    <copy to-field="postalCode"/>
                </process>
                <process field="PERSONAL_COUNTRY">
                    <copy to-field="countryGeoId"/>
                </process>
                <process field="PERSONAL_ADDRESS_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
            </simple-map-processor>
        </call-map-processor>
        
        <if-compare field="parameters.PERSONAL_ATTN_NAME_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.PERSONAL_ATTN_NAME">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressNickNameMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="PERSONAL_ATTN_NAME" list="billing_error_list"/>
	        </if-empty>
        </if-compare>
        
        <if-compare field="parameters.PERSONAL_FULL_NAME_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.PERSONAL_FULL_NAME">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="FullNameMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="PERSONAL_FULL_NAME" list="billing_error_list"/>
	        </if-empty>
        </if-compare>
        
        <if-compare field="parameters.PERSONAL_FIRST_NAME_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.PERSONAL_FIRST_NAME">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="FirstNameMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="PERSONAL_FIRST_NAME" list="billing_error_list"/>
	        </if-empty>
        </if-compare>
        
        <if-compare field="parameters.PERSONAL_LAST_NAME_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.PERSONAL_LAST_NAME">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="LastNameMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="PERSONAL_LAST_NAME" list="billing_error_list"/>
	        </if-empty>
        </if-compare>
        
        <if-compare field="parameters.PERSONAL_ADDRESS1_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.PERSONAL_ADDRESS1">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressLine1MissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="PERSONAL_ADDRESS1" list="billing_error_list"/>
	        </if-empty>
        </if-compare>
        <if-compare field="parameters.PERSONAL_ADDRESS2_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.PERSONAL_ADDRESS2">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressLine2MissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="PERSONAL_ADDRESS2" list="billing_error_list"/>
	        </if-empty>
        </if-compare>
        <if-compare field="parameters.PERSONAL_ADDRESS3_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.PERSONAL_ADDRESS3">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressLine3MissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="PERSONAL_ADDRESS3" list="billing_error_list"/>
	        </if-empty>
        </if-compare>
        <if-compare field="parameters.PERSONAL_COUNTRY_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.PERSONAL_COUNTRY">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CountryMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="PERSONAL_COUNTRY" list="billing_error_list"/>
	        </if-empty>
        </if-compare>
        <if-compare field="parameters.PERSONAL_POSTAL_CODE_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.PERSONAL_POSTAL_CODE">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ZipCodeMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="PERSONAL_POSTAL_CODE" list="billing_error_list"/>
	        </if-empty>
        </if-compare>
        
        <!-- Check for a valid Postal Code For USA only -->
        <if-not-empty field="parameters.PERSONAL_POSTAL_CODE">
            <if-compare value="USA" operator="equals" field="parameters.PERSONAL_COUNTRY">
                <call-class-method class-name="com.osafe.util.Util"  method-name="isZipCode" ret-field="isZipCode">
                    <field field="parameters.PERSONAL_POSTAL_CODE"/>
                </call-class-method>
            </if-compare>
            <if-compare field="isZipCode" operator="equals"  value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="InvalidZipCodeError"/>
                <string-to-list string="${tempErrorMessage}" message-field="PERSONAL_POSTAL_CODE" list="billing_error_list"/>
            </if-compare>
        </if-not-empty>
        
        <if-compare field="parameters.PERSONAL_CITY_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.PERSONAL_CITY">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CityMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="PERSONAL_CITY" list="billing_error_list"/>
	        </if-empty>
        </if-compare>
        
        <call-class-method class-name="org.ofbiz.common.CommonWorkers"  method-name="getAssociatedStateList" ret-field="statesList">
             <field field="delegator" type="org.ofbiz.entity.Delegator"/>
             <field field="parameters.PERSONAL_COUNTRY"/>
        </call-class-method>
        <if-not-empty field="statesList">
	        <if-compare field="parameters.PERSONAL_STATE_MANDATORY" operator="equals" value="Y">
		        <if-empty field="parameters.PERSONAL_STATE">
		            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="StateMissingError"/>
		            <string-to-list string="${tempErrorMessage}" message-field="PERSONAL_STATE" list="billing_error_list"/>
		        </if-empty>
	        </if-compare>
        </if-not-empty>
        <!-- Check for a address3 -->
        <if-compare field="parameters.PERSONAL_STATE" operator="equals" value="_NA_">
            <set field="billingAddressContext.address3" from-field="parameters.PERSONAL_ADDRESS3"/>
        </if-compare>

         <!-- if no error in validation then perform verification -->
         <if-empty field="billing_error_list">
             <if-empty field="parameters.PERSONAL_SKIP_VERIFICATION">
                  <!-- Check if there are any extended address validation to perform -->
                 <set-service-fields service-name="extendedAddressValidation" to-map="extendedAddressValidationCtx" map="billingAddressContext"/>
                 <call-class-method class-name="org.ofbiz.product.store.ProductStoreWorker" method-name="getProductStoreId" ret-field="productStoreId">
                     <field field="request" type="javax.servlet.ServletRequest"/>
                 </call-class-method>
                 <set field="extendedAddressValidationCtx.productStoreId" from-field="productStoreId"/>
                 <call-service service-name="extendedAddressValidation" in-map-name="extendedAddressValidationCtx">
                    <result-to-field result-name="address1" field="billingAddressContext.address1"/>
                    <result-to-field result-name="address2" field="billingAddressContext.address2"/>
                    <result-to-field result-name="address3" field="billingAddressContext.address3"/>
                    <result-to-field result-name="city" field="billingAddressContext.city"/>
                    <result-to-field result-name="postalCode" field="billingAddressContext.postalCode"/>
                    <result-to-field result-name="postalCodeExt" field="billingAddressContext.postalCodeExt"/>
                    <result-to-field result-name="stateProvinceGeoId" field="billingAddressContext.stateCode"/>
                    <result-to-field result-name="countyGeoId" field="billingAddressContext.countyGeoId"/>
                    <result-to-field result-name="countryGeoId" field="billingAddressContext.countryCode"/>
                    <result-to-field result-name="responseCode" field="responseCode"/>
                    <result-to-field result-name="suggestionList" field="billingAddressSuggestionList"/>
                </call-service>
                <if-empty field="responseCode">
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressVerificationError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="BILLING_ADDRESS_ERROR" list="error_list"/>
                <else>
	                <if-compare operator="less-equals" value="0" field="responseCode">
	                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressVerificationError"/>
	                    <string-to-list string="${tempErrorMessage}" message-field="BILLING_ADDRESS_ERROR" list="error_list"/>
	                </if-compare>
                </else>
                </if-empty>
            </if-empty>
        </if-empty>
        <list-to-list list="billing_error_list" to-list="error_list"/>
        <return response-code="success"/>
    </simple-method>

    <simple-method method-name="validateRequestCatalog" short-description="validate Request catalog" login-required="false">
        <clear-field field="tempErrorMessage"/>
        <!-- Check Contact Us form -->

        <call-map-processor in-map-name="parameters" out-map-name="custRequestContext">
            <simple-map-processor name="custRequest">
                <process field="REQ_CATALOG_FIRST_NAME"><copy to-field="firstName"/></process>
                <process field="REQ_CATALOG_LAST_NAME"><copy to-field="lastName"/></process>
                <process field="REQ_CATALOG_FULL_NAME"><copy to-field="fullName"/></process>
                <process field="REQ_CATALOG_ADDRESS1"><copy to-field="address1"/></process>
                <process field="REQ_CATALOG_ADDRESS2"><copy to-field="address2"/></process>
                <process field="REQ_CATALOG_ADDRESS3"><copy to-field="address3"/></process>
                <process field="REQ_CATALOG_CITY"><copy to-field="city"/></process>
                <process field="REQ_CATALOG_STATE"><copy to-field="stateCode"/></process>
                <process field="REQ_CATALOG_POSTAL_CODE"><copy to-field="postalCode"/></process>
                <process field="REQ_CATALOG_COUNTRY"><copy to-field="countryCode"/></process>
                <process field="contactPhoneArea"><copy/></process>
                <process field="contactPhoneContact3"><copy/></process>
                <process field="contactPhoneContact4"><copy/></process>
                <process field="contactPhoneNumber"><copy to-field="phoneNumber"/></process>
                <process field="REQ_CATALOG_EMAIL_ADDR"><copy to-field="emailAddress"/></process>
                <process field="content"><copy to-field="content"/></process>
            </simple-map-processor>
        </call-map-processor>

        <if-compare field="parameters.REQ_CATALOG_FULL_NAME_MANDATORY" operator="equals" value="Y">
          	<if-empty field="parameters.REQ_CATALOG_FULL_NAME">
          		<property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="FullNameMissingError"/>
          		<string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_FULL_NAME" list="error_list"/>
          	</if-empty>
        </if-compare>
        <if-compare field="parameters.REQ_CATALOG_FIRST_NAME_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.REQ_CATALOG_FIRST_NAME">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="FirstNameMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_FIRST_NAME" list="error_list"/>
	        </if-empty>
	    </if-compare>
        <if-compare field="parameters.REQ_CATALOG_LAST_NAME_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.REQ_CATALOG_LAST_NAME">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="LastNameMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_LAST_NAME" list="error_list"/>
	        </if-empty>
	    </if-compare>
        <if-compare field="parameters.REQ_CATALOG_ADDRESS1_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.REQ_CATALOG_ADDRESS1">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressLine1MissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_ADDRESS1" list="error_list"/>
	        </if-empty>
        </if-compare>
        <if-compare field="parameters.REQ_CATALOG_ADDRESS2_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.REQ_CATALOG_ADDRESS2">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressLine2MissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_ADDRESS2" list="error_list"/>
	        </if-empty>
        </if-compare>
        <if-compare field="parameters.REQ_CATALOG_ADDRESS3_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.REQ_CATALOG_ADDRESS3">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressLine3MissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_ADDRESS3" list="error_list"/>
	        </if-empty>
        </if-compare>
        
        <if-compare field="parameters.REQ_CATALOG_POSTAL_CODE_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.REQ_CATALOG_POSTAL_CODE">
	                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ZipCodeMissingError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_POSTAL_CODE" list="error_list"/>
	        </if-empty>
	    </if-compare>    
        <!-- Check for a valid Postal Code -->
        <if-not-empty field="parameters.REQ_CATALOG_POSTAL_CODE">
            <if-compare value="USA" operator="equals" field="parameters.REQ_CATALOG_COUNTRY">
                <call-class-method class-name="com.osafe.util.Util"  method-name="isZipCode" ret-field="isZipCode">
                    <field field="parameters.REQ_CATALOG_POSTAL_CODE"/>
                </call-class-method>
            </if-compare>
            <if-compare field="isZipCode" operator="equals"  value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="InvalidZipCodeError"/>
                <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_POSTAL_CODE" list="error_list"/>
            </if-compare>
        </if-not-empty>
	    
        <if-compare field="parameters.REQ_CATALOG_COUNTRY_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.REQ_CATALOG_COUNTRY">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CountryMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_COUNTRY" list="error_list"/>
	        </if-empty>
        </if-compare>
        
        <if-compare field="parameters.REQ_CATALOG_CITY_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.REQ_CATALOG_CITY">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CityMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_CITY" list="error_list"/>
	        </if-empty>
        </if-compare>
        
        <!-- if a country has States than state is mandatory. -->
        <call-class-method class-name="org.ofbiz.common.CommonWorkers"  method-name="getAssociatedStateList" ret-field="statesList">
            <field field="delegator" type="org.ofbiz.entity.Delegator"/>
            <field field="parameters.REQ_CATALOG_COUNTRY"/>
        </call-class-method>
        <if-not-empty field="statesList">
             <if-compare field="parameters.REQ_CATALOG_STATE_MANDATORY" operator="equals" value="Y">
	             <if-empty field="parameters.REQ_CATALOG_STATE">
	                 <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="StateMissingError"/>
	                 <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_STATE" list="error_list"/>
	             </if-empty>
             </if-compare>
        </if-not-empty>
                    
        <if-compare field="parameters.REQ_CATALOG_EMAIL_ADDR_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.REQ_CATALOG_EMAIL_ADDR">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="EmailAddressMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_EMAIL_ADDR" list="error_list"/>
	        </if-empty>
        </if-compare>
        <if-not-empty field="parameters.REQ_CATALOG_EMAIL_ADDR">
            <call-map-processor in-map-name="parameters" out-map-name="emailContext">
                <simple-map-processor name="newEmail">
                    <process field="REQ_CATALOG_EMAIL_ADDR">
                        <copy to-field="REQ_CATALOG_EMAIL_ADDR"/>
                        <validate-method method="isEmail"><fail-property resource="OSafeUiLabels" property="EmailInvalidError"/></validate-method>
                    </process>
                </simple-map-processor>
            </call-map-processor>
        </if-not-empty>
        <if-compare field="parameters.content_MANDATORY" operator="equals" value="Y">
         <if-empty field="parameters.content">
             <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CommentMissingError"/>
             <string-to-list string="${tempErrorMessage}" message-field="content" list="error_list"/>
         </if-empty>
        </if-compare>
        <!-- Check the Home Phone -->
        <if>
            <condition>
                <or>
                    <if-compare value="CAN" operator="equals" field="parameters.REQ_CATALOG_COUNTRY"></if-compare>
                    <if-compare value="USA" operator="equals" field="parameters.REQ_CATALOG_COUNTRY"></if-compare>
                </or>
            </condition>
            <then>
                <!-- Show general error if Phone is required -->
                <call-simple-method method-name="validatePhoneGeneral"/>
            </then>
            <else>
                <call-simple-method method-name="validatePhoneGeneralOther"/>
            </else>
        </if>

         <!-- if no error in validation then perform verification -->
         <if-empty field="error_list">
	         <if-empty field="parameters.REQ_CATALOG_SKIP_VERIFICATION">
		          <!-- Check if there are any extended address validation to perform -->
		         <set-service-fields service-name="extendedAddressValidation" to-map="extendedAddressValidationCtx" map="custRequestContext"/>
	             <set field="extendedAddressValidationCtx.stateProvinceGeoId" from-field="custRequestContext.stateCode"/>
		         <set field="extendedAddressValidationCtx.countryGeoId" from-field="custRequestContext.countryCode"/>
		         <call-class-method class-name="org.ofbiz.product.store.ProductStoreWorker" method-name="getProductStoreId" ret-field="productStoreId">
		             <field field="request" type="javax.servlet.ServletRequest"/>
		         </call-class-method>
		         <set field="extendedAddressValidationCtx.productStoreId" from-field="productStoreId"/>
		         <call-service service-name="extendedAddressValidation" in-map-name="extendedAddressValidationCtx">
		            <result-to-field result-name="address1" field="custRequestContext.address1"/>
                    <result-to-field result-name="address2" field="custRequestContext.address2"/>
                    <result-to-field result-name="address3" field="custRequestContext.address3"/>
                    <result-to-field result-name="city" field="custRequestContext.city"/>
                    <result-to-field result-name="postalCode" field="custRequestContext.postalCode"/>
                    <result-to-field result-name="postalCodeExt" field="custRequestContext.postalCodeExt"/>
                    <result-to-field result-name="stateProvinceGeoId" field="custRequestContext.stateCode"/>
                    <result-to-field result-name="countyGeoId" field="custRequestContext.countyGeoId"/>
                    <result-to-field result-name="countryGeoId" field="custRequestContext.countryCode"/>
                    <result-to-field result-name="responseCode" field="responseCode"/>
                    <result-to-field result-name="suggestionList" field="addressSuggestionList"/>
		        </call-service>
                <if-empty field="responseCode">
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressVerificationError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_ADDRESS_ERROR" list="error_list"/>
                <else>
                    <if-compare operator="less-equals" value="0" field="responseCode">
                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressVerificationError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="REQ_CATALOG_ADDRESS_ERROR" list="error_list"/>
	                <else>
	                    <if-not-empty field="custRequestContext.postalCodeExt">
	                        <set field="custRequestContext.postalCode" value="${custRequestContext.postalCode}-${custRequestContext.postalCodeExt}"/>
	                    </if-not-empty>
	                </else>
                    </if-compare>
                </else>
                </if-empty>
	        </if-empty>
        </if-empty>

        <check-errors/>
    </simple-method>
    
    <simple-method method-name="validateAddress" short-description="Validate Address" login-required="false">
        <!-- Check address fields on the Postal Address -->
         
         <if-not-empty field="parameters.CUSTOMER_FULL_NAME">
    		<set field="parameters.fullName" from-field="parameters.CUSTOMER_FULL_NAME"/>
    	 <else>
	         <if-not-empty field="parameters.CUSTOMER_FIRST_NAME">
	    	     <set field="parameters.fullName" value="${parameters.CUSTOMER_FIRST_NAME}"/>
	    	 </if-not-empty>
	         <if-not-empty field="parameters.CUSTOMER_LAST_NAME">
		         <if-not-empty field="parameters.CUSTOMER_FIRST_NAME">
	    		     <set field="parameters.fullName" value="${parameters.fullName} ${parameters.CUSTOMER_LAST_NAME}"/>
	    		 <else>
	    		     <set field="parameters.fullName" value="${parameters.CUSTOMER_LAST_NAME}"/>
	    		 </else>
		         </if-not-empty>
	    	 </if-not-empty>
 		 </else>
    	 </if-not-empty>
    	 
         <call-map-processor in-map-name="parameters" out-map-name="addressContext">
             <simple-map-processor name="address">
                <process field="CUSTOMER_FIRST_NAME">
                    <copy to-field="firstName"/>
                </process>
                <process field="CUSTOMER_LAST_NAME">
                    <copy to-field="lastName"/>
                </process>

                 <process field="fullName"><copy to-field="toName"/></process>
                 <process field="CUSTOMER_ATTN_NAME">
                     <copy to-field="attnName"/>
                 </process>
                 <process field="CUSTOMER_ADDRESS1">
                     <copy to-field="address1"/>
                 </process>
                 <process field="CUSTOMER_ADDRESS2"><copy to-field="address2"/></process>
                 <process field="CUSTOMER_ADDRESS3"><copy to-field="address3"/></process>
                 <process field="CUSTOMER_CITY">
                     <copy to-field="city"/>
                 </process>
                 <process field="CUSTOMER_STATE"><copy to-field="stateProvinceGeoId"/></process>
                 <process field="CUSTOMER_POSTAL_CODE">
                     <copy to-field="postalCode"/>
                 </process>
                 <process field="CUSTOMER_COUNTRY">
                     <copy to-field="countryGeoId"/>
                 </process>
             </simple-map-processor>
         </call-map-processor>
         
        <if-compare field="parameters.CUSTOMER_FULL_NAME_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.CUSTOMER_FULL_NAME">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="FullNameMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_FULL_NAME" list="error_list"/>
	        </if-empty>
        </if-compare>
        
        <if-compare field="parameters.CUSTOMER_FIRST_NAME_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.CUSTOMER_FIRST_NAME">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="FirstNameMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_FIRST_NAME" list="error_list"/>
	        </if-empty>
        </if-compare>
        
        <if-compare field="parameters.CUSTOMER_LAST_NAME_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.CUSTOMER_LAST_NAME">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="LastNameMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_LAST_NAME" list="error_list"/>
	        </if-empty>
        </if-compare>
         
        <if-compare field="parameters.CUSTOMER_ADDRESS1_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.CUSTOMER_ADDRESS1">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressLine1MissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_ADDRESS1" list="error_list"/>
	        </if-empty>
        </if-compare>
        <if-compare field="parameters.CUSTOMER_ADDRESS2_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.CUSTOMER_ADDRESS2">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressLine2MissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_ADDRESS2" list="error_list"/>
	        </if-empty>
        </if-compare>
        <if-compare field="parameters.CUSTOMER_ADDRESS3_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.CUSTOMER_ADDRESS3">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressLine3MissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_ADDRESS3" list="error_list"/>
	        </if-empty>
        </if-compare>
        
        <if-compare field="parameters.CUSTOMER_COUNTRY_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.CUSTOMER_COUNTRY">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CountryMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_COUNTRY" list="error_list"/>
	        </if-empty>
        </if-compare>

        <if-compare field="parameters.CUSTOMER_ATTN_NAME_MANDATORY" operator="equals" value="Y">
            <if-empty field="parameters.CUSTOMER_ATTN_NAME">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressNickNameMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_ATTN_NAME" list="error_list"/>
            </if-empty>
        </if-compare>
        
        <if-not-empty field="parameters.CUSTOMER_ATTN_NAME">
        	<session-to-field field="userLogin"/>
            <set from-field="userLogin.partyId" field="customerPostalAddressMap.partyId"/>
            <!-- <set from-field="parameters.CUSTOMER_ATTN_NAME" field="customerPostalAddressMap.attnName"/> -->
            <find-by-and list="customerPostalAddressList" map="customerPostalAddressMap" entity-name="PartyAndPostalAddress"/>
            <call-class-method class-name="org.ofbiz.entity.util.EntityUtil" method-name="filterByDate" ret-field="customerPostalAddressList">
                <field field="customerPostalAddressList" type="List"/>
            </call-class-method>
            <!-- Check if ATTN_NAME already exists for this party -->
            <if-not-empty field="customerPostalAddressList">
           		<!-- Iterate all customers addresses, if we find a match, check if it is the same address we are updating before throwing error -->
           		<iterate entry="customerPostalAddress" list="customerPostalAddressList">
           			<if-not-empty field="customerPostalAddress.attnName">
           				<set field="customerPostalAddressAttnName" from-field="customerPostalAddress.attnName"/>
	           			<call-object-method method-name="toUpperCase" obj-field="customerPostalAddressAttnName" ret-field="customerPostalAddressAttnName"/>
	           			<call-object-method method-name="toUpperCase" obj-field="parameters.CUSTOMER_ATTN_NAME" ret-field="parameterCustomerAttnName"/>
	           			<if-compare-field operator="equals" field="customerPostalAddressAttnName" to-field="parameterCustomerAttnName">
	           				<!-- if we are updating, then we will already have a contactMechId, else if we are adding we will not have a contactMechId -->
	           				<if-not-empty field="parameters.contactMechId">
	            				<if-compare-field operator="not-equals" field="customerPostalAddress.contactMechId" to-field="parameters.contactMechId">
	            					<set from-field="parameters.CUSTOMER_ATTN_NAME" field="nickName"/>
				            		<property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressNickNameUniqueError"/>
				            		<string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_ATTN_NAME" list="error_list"/>
	            				</if-compare-field>
	            				<else>
	            					<!-- We are adding a new Address, error if ATTN_NAME exists -->
				            		<set from-field="parameters.CUSTOMER_ATTN_NAME" field="nickName"/>
				            		<property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressNickNameUniqueError"/>
				            		<string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_ATTN_NAME" list="error_list"/>
	            				</else>
	           				</if-not-empty>
	           			</if-compare-field>
           			</if-not-empty>
           		</iterate>
            </if-not-empty>
        </if-not-empty>
        
        <if-compare field="parameters.CUSTOMER_POSTAL_CODE_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.CUSTOMER_POSTAL_CODE ">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ZipCodeMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_POSTAL_CODE" list="error_list"/>
	        </if-empty>
        </if-compare>
        
        <!-- Check for a valid Postal Code For USA only -->
        <if-not-empty field="parameters.CUSTOMER_POSTAL_CODE">
            <if-compare value="USA" operator="equals" field="parameters.CUSTOMER_COUNTRY">
                <call-class-method class-name="com.osafe.util.Util"  method-name="isZipCode" ret-field="isZipCode">
                    <field field="parameters.CUSTOMER_POSTAL_CODE"/>
                </call-class-method>
            </if-compare>
            <if-compare field="isZipCode" operator="equals"  value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="InvalidZipCodeError"/>
                <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_POSTAL_CODE" list="error_list"/>
            </if-compare>
        </if-not-empty>
                
        <if-compare field="parameters.CUSTOMER_CITY_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.CUSTOMER_CITY ">
	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CityMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_CITY" list="error_list"/>
	        </if-empty>
        </if-compare>
        
        <!-- if a country has States than state is mandatory. -->
         <call-class-method class-name="org.ofbiz.common.CommonWorkers"  method-name="getAssociatedStateList" ret-field="statesList">
             <field field="delegator" type="org.ofbiz.entity.Delegator"/>
             <field field="parameters.CUSTOMER_COUNTRY"/>
         </call-class-method>
         
        <if-compare field="parameters.CUSTOMER_STATE_MANDATORY" operator="equals" value="Y">
	         <if-not-empty field="statesList">
	             <if-empty field="parameters.CUSTOMER_STATE">
	                 <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="StateMissingError"/>
	                 <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_STATE" list="error_list"/>
	             </if-empty>
             </if-not-empty>
        </if-compare>

        
         <!-- if no error in validation then perform verification -->
         <if-empty field="error_list">
             <if-empty field="parameters.CUSTOMER_SKIP_VERIFICATION">
                  <!-- Check if there are any extended address validation to perform -->
                 <set-service-fields service-name="extendedAddressValidation" to-map="extendedAddressValidationCtx" map="addressContext"/>
                 <call-class-method class-name="org.ofbiz.product.store.ProductStoreWorker" method-name="getProductStoreId" ret-field="productStoreId">
                     <field field="request" type="javax.servlet.ServletRequest"/>
                 </call-class-method>
                 <set field="extendedAddressValidationCtx.productStoreId" from-field="productStoreId"/>
                 <call-service service-name="extendedAddressValidation" in-map-name="extendedAddressValidationCtx">
                    <result-to-field result-name="address1" field="addressContext.address1"/>
                    <result-to-field result-name="address2" field="addressContext.address2"/>
                    <result-to-field result-name="address3" field="addressContext.address3"/>
                    <result-to-field result-name="city" field="addressContext.city"/>
                    <result-to-field result-name="postalCode" field="addressContext.postalCode"/>
                    <result-to-field result-name="postalCodeExt" field="addressContext.postalCodeExt"/>
                    <result-to-field result-name="stateProvinceGeoId" field="addressContext.stateCode"/>
                    <result-to-field result-name="countyGeoId" field="addressContext.countyGeoId"/>
                    <result-to-field result-name="countryGeoId" field="addressContext.countryCode"/>
                    <result-to-field result-name="responseCode" field="responseCode"/>
                    <result-to-field result-name="suggestionList" field="addressSuggestionList"/>
                </call-service>
                <if-empty field="responseCode">
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressVerificationError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_ADDRESS_ERROR" list="error_list"/>
		    	    <set field="CUSTOMER_SHOW_SKIP_VERIFICATION" value="Y"/>
	                <field-to-request field="CUSTOMER_SHOW_SKIP_VERIFICATION"/>
                <else>
                    <if-compare operator="less-equals" value="0" field="responseCode">
                        <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AddressVerificationError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="CUSTOMER_ADDRESS_ERROR" list="error_list"/>
		    	        <set field="CUSTOMER_SHOW_SKIP_VERIFICATION" value="Y"/>
	                    <field-to-request field="CUSTOMER_SHOW_SKIP_VERIFICATION"/>
                    </if-compare>
                </else>
                </if-empty>
            </if-empty>
        </if-empty>
        <!-- now that everything is validated & setup, check to see if there are errors, then call the services -->
        <check-errors/>

    </simple-method>
    
    <simple-method method-name="checkUserSessionAndValidateAddress" short-description="Check User Session and Validate Address" login-required="false">
    	<call-simple-method method-name="checkUserSession" xml-resource="component://osafe/script/Event/CheckoutEvents.xml"/>
    	<if-not-empty field="userLogin">
    		<call-simple-method method-name="validateAddress"/>
    	</if-not-empty>
    </simple-method>

    <simple-method method-name="checkUserLoginSessionAndValidateAddress" short-description="Check User Session and Validate Address" login-required="false">
    	<call-simple-method method-name="checkUserLoginSession" xml-resource="component://osafe/script/Event/CheckoutEvents.xml"/>
    	<if-not-empty field="userLogin">
    		<call-simple-method method-name="validateAddress"/>
    	</if-not-empty>
    </simple-method>

    <simple-method method-name="validateCreditCard" short-description="Validate Credit Card fields" login-required="false">
        <log level="info" message="${parameters.fieldLevelErrors}"></log>
        <if-compare field="parameters.fieldLevelErrors" operator="equals" value="Y">
            <set field="fieldLevelErrors" value="${parameters.fieldLevelErrors}"/>
            <field-to-request field="fieldLevelErrors" />
        </if-compare>

        <if-compare field="parameters.paymentOption" operator="equals" value="PAYOPT_CC_EXIST" type="String">
            <if-compare-field field="parameters.savedVerificationNo" operator="not-equals" to-field="nullValue">
                <if-empty field="parameters.savedVerificationNo">
                    <set field="invalidVerificationNo" value="true"/>
                    <else>
                        <call-class-method method-name="isInteger" class-name="org.ofbiz.base.util.UtilValidate" ret-field="isInteger">
                             <field field="parameters.savedVerificationNo" type="String"/>
                        </call-class-method>
                        <if-compare operator="equals" value="false" field="isInteger">
                            <set field="invalidVerificationNo" value="true"/>
                        <else>
                            <call-object-method method-name="length" obj-field="parameters.savedVerificationNo" ret-field="verficationNoSize"/>
		                    <if>
		                        <condition>
		                            <and>
		                                <if-compare operator="greater-equals" value="3" field="verficationNoSize" type="Long"/>
		                                <if-compare operator="less-equals" value="4" field="verficationNoSize" type="Long"/>
		                            </and>
		                        </condition>
		                        <then>
		                        </then>
		                        <else>
		                            <set field="invalidVerificationNo" value="true"/>
		                        </else>
		                    </if>   
                        </else>
                        </if-compare>
                    </else>
                </if-empty>
            </if-compare-field>
            <if-compare operator="equals" value="true" field="invalidVerificationNo">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="VerificationNumberMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="savedVerificationNo" list="error_list"/>
            </if-compare>
            <if-empty field="parameters.savedCard">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="SavedCardMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="savedCard" list="error_list"/>
                <else>
                    <entity-one value-field="savedCreditCard" entity-name="CreditCard">
                        <field-map field-name="paymentMethodId" from-field="parameters.savedCard"/>
                    </entity-one>
                    <set field="creditCardContext.cardType" from-field="savedCreditCard.cardType"/>
                    <set field="creditCardContext.cardNumber" from-field="savedCreditCard.cardNumber"/>
                    <set field="creditCardContext.expireDate" from-field="savedCreditCard.expireDate"/>
                    <set field="creditCardContext.companyNameOnCard" from-field="savedCreditCard.companyNameOnCard"/>
                    <set field="creditCardContext.titleOnCard" from-field="savedCreditCard.titleOnCard"/>
                    <set field="creditCardContext.firstNameOnCard" from-field="savedCreditCard.firstNameOnCard"/>
                    <set field="creditCardContext.middleNameOnCard" from-field="savedCreditCard.middleNameOnCard"/>
                    <set field="creditCardContext.lastNameOnCard" from-field="savedCreditCard.lastNameOnCard"/>
                    <set field="creditCardContext.suffixOnCard" from-field="savedCreditCard.suffixOnCard"/>
                    <set field="creditCardContext.cardNumber" from-field="savedCreditCard.cardNumber"/>
                    <set field="creditCardContext.contactMechId" from-field="parameters.contactMechId"/>
                </else>
            </if-empty>
        <else>
            <!-- Check credit card fields -->
            <if-compare-field field="parameters.verificationNo" operator="not-equals" to-field="nullValue">
                <if-empty field="parameters.verificationNo">
                        <set field="invalidVerificationNo" value="true"/>
                    <else>
                        <call-class-method method-name="isInteger" class-name="org.ofbiz.base.util.UtilValidate" ret-field="isInteger">
                             <field field="parameters.verificationNo" type="String"/>
                        </call-class-method>
                        <if-compare operator="equals" value="false" field="isInteger">
                            <set field="invalidVerificationNo" value="true"/>
                        <else>
                            <call-object-method method-name="length" obj-field="parameters.verificationNo" ret-field="verficationNoSize"/>
                            <if>
                                <condition>
                                    <and>
                                        <if-compare operator="greater-equals" value="3" field="verficationNoSize" type="Long"/>
                                        <if-compare operator="less-equals" value="4" field="verficationNoSize" type="Long"/>
                                    </and>
                                </condition>
                                <then>
                                </then>
                                <else>
                                    <set field="invalidVerificationNo" value="true"/>
                                </else>
                            </if>   
                        </else>
                        </if-compare>
                    </else>
                </if-empty>
            </if-compare-field>
            <if-compare operator="equals" value="true" field="invalidVerificationNo">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="VerificationNumberMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="verificationNo" list="error_list"/>
            </if-compare>
             <call-map-processor in-map-name="parameters" out-map-name="creditCardContext">
                  <simple-map-processor name="createCreditCard">
                    <make-in-string field="expireDate">
                      <in-field field="expMonth"/>
                      <constant>/</constant>
                      <in-field field="expYear"/>
                    </make-in-string>
                    <process field="partyId"><copy/></process>
                    <process field="companyNameOnCard"><copy/></process>
                    <process field="titleOnCard"><copy/></process>
                    <process field="firstNameOnCard"><copy/><not-empty><fail-property resource="OSafeUiLabels" property="FirstNameOnCardMissingError"/></not-empty></process>
                    <process field="middleNameOnCard"><copy/></process>
                    <process field="lastNameOnCard"><copy/><not-empty><fail-property resource="OSafeUiLabels" property="LastNameOnCardMissingError"/></not-empty></process>
                    <process field="suffixOnCard"><copy/></process>
                    <process field="cardType"><copy/><not-empty><fail-property resource="OSafeUiLabels" property="CardTypeMissingError"/></not-empty></process>
                    <process field="cardNumber"><copy/><not-empty><fail-property resource="OSafeUiLabels" property="CardNumberMissingError"/></not-empty></process>
                    <process field="contactMechId"><copy/></process>
                    <process field="description"><copy/></process>
                    <process field="expMonth"><copy/><not-empty><fail-property resource="OSafeUiLabels" property="ExpirationMonthMissingError"/></not-empty></process>
                    <process field="expYear"><copy/><not-empty><fail-property resource="OSafeUiLabels" property="ExpirationYearMissingError"/></not-empty></process>
                    <process field="expireDate"><copy/></process>
                  </simple-map-processor>
    
             </call-map-processor>
             <if-not-empty field="parameters.expMonth">
               <if-validate-method field="creditCardContext.expireDate" method="isDateBeforeToday" >
                   <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ExpirationDateIsBeforeTodayError"/>
                   <string-to-list string="${tempErrorMessage}" message-field="expMonth" list="error_list"/>
               </if-validate-method>
            </if-not-empty>

            <!-- credit card number validation -->
            <if-not-empty field="creditCardContext.cardNumber">
                <call-class-method method-name="isInteger" class-name="org.ofbiz.base.util.UtilValidate" ret-field="isInteger">
                     <field field="creditCardContext.cardNumber" type="String"/>
                </call-class-method>
                <if-compare operator="equals" value="false" field="isInteger">
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CreditCardNumberInvalidError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="cardNumber" list="error_list"/>
                <else>
                    <if-empty field="creditCardContext.cardType">
                        <call-class-method method-name="isCreditCard" class-name="org.ofbiz.base.util.UtilValidate" ret-field="isCreditCard">
                             <field field="creditCardContext.cardNumber" type="String"/>
                        </call-class-method>
                        <if-compare field="isCreditCard" operator="equals" value="false">
                            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CreditCardNumberInvalidError"/>
                            <string-to-list string="${tempErrorMessage}" message-field="cardNumber" list="error_list"/>
                        </if-compare>
                    <else>
                        <call-class-method method-name="isCardMatch" class-name="org.ofbiz.base.util.UtilValidate" ret-field="isCardMatch">
                            <field field="creditCardContext.cardType" type="String"/>
                             <field field="creditCardContext.cardNumber" type="String"/>
                        </call-class-method>
                        <if-compare field="isCardMatch" operator="equals" value="false">
                            <call-class-method method-name="getCardType" class-name="org.ofbiz.base.util.UtilValidate" ret-field="suggestCardType">
                                 <field field="creditCardContext.cardNumber" type="String"/>
                            </call-class-method>
                            <if-compare field="suggestCardType" operator="equals" value="Unknown">
                                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CreditCardNumberInvalidError"/>
                                <string-to-list string="${tempErrorMessage}" message-field="cardNumber" list="error_list"/>
                            <else>
                                <set field="argListNames[]" from-field="creditCardContext.cardNumber"/>
                                <set field="argListNames[]" from-field=".cardType"/>
                                <set field="argListNames[]" from-field="suggestCardType"/>
                                <property-to-field resource="OSafeUiLabels" property="CreditCardNumberInvalidSuggestError" field="tempErrorMessage" arg-list-name="argListNames"/>
                                <string-to-list string="${tempErrorMessage}" message-field="cardNumber" list="error_list"/>
                            </else>
                            </if-compare>
                        </if-compare>
                    </else>
                    </if-empty>
                </else>
                </if-compare>
            </if-not-empty>

        </else>
        </if-compare>
    </simple-method>

    <simple-method method-name="validateContactUs" short-description="validate Conatact Us" login-required="false">
        <!-- Check Contact Us form -->
        <call-map-processor in-map-name="parameters" out-map-name="custRequestContext">
            <simple-map-processor name="custRequest">
                <process field="contactReason"><copy/></process>
                <process field="emailAddress"><copy/></process>
                <process field="firstName"><copy/></process>
                <process field="lastName"><copy/></process>
                <process field="content"><copy/></process>
                <process field="contactPhoneArea"><copy/></process>
                <process field="contactPhoneContact3"><copy/></process>
                <process field="contactPhoneContact4"><copy/></process>
                <process field="contactPhoneNumber"><copy to-field="phoneNumber"/></process>
                <process field="orderIdNumber"><copy/></process>
            </simple-map-processor>
        </call-map-processor>
        <if-compare field="parameters.firstName_MANDATORY" operator="equals" value="Y">
         <if-empty field="parameters.firstName">
             <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="FirstNameMissingError"/>
             <string-to-list string="${tempErrorMessage}" message-field="firstName" list="error_list"/>
         </if-empty>
        </if-compare>
        <if-compare field="parameters.lastName_MANDATORY" operator="equals" value="Y">
         <if-empty field="parameters.lastName">
             <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="LastNameMissingError"/>
             <string-to-list string="${tempErrorMessage}" message-field="lastName" list="error_list"/>
         </if-empty>
        </if-compare>
        <if-compare field="parameters.contactReason_MANDATORY" operator="equals" value="Y">
         <if-empty field="parameters.contactReason">
             <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ContactReasonMissingError"/>
             <string-to-list string="${tempErrorMessage}" message-field="contactReason" list="error_list"/>
         </if-empty>
        </if-compare>
        <if-compare field="parameters.emailAddress_MANDATORY" operator="equals" value="Y">
         <if-empty field="parameters.emailAddress">
             <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="EmailAddressMissingError"/>
             <string-to-list string="${tempErrorMessage}" message-field="emailAddress" list="error_list"/>
         </if-empty>
        </if-compare>
        <if-not-empty field="parameters.emailAddress">
            <call-map-processor in-map-name="parameters" out-map-name="emailContext">
                <simple-map-processor name="newEmail">
                    <process field="emailAddress">
                        <copy to-field="emailAddress"/>
                        <validate-method method="isEmail"><fail-property resource="OSafeUiLabels" property="EmailInvalidError"/></validate-method>
                    </process>
                </simple-map-processor>
            </call-map-processor>
        </if-not-empty>
        <if-compare field="parameters.content_MANDATORY" operator="equals" value="Y">
         <if-empty field="parameters.content">
             <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CommentMissingError"/>
             <string-to-list string="${tempErrorMessage}" message-field="content" list="error_list"/>
         </if-empty>
        </if-compare>
        <if-compare field="parameters.orderIdNumber_MANDATORY" operator="equals" value="Y">
         <if-empty field="parameters.orderIdNumber">
             <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="OrderNumberMissingError"/>
             <string-to-list string="${tempErrorMessage}" message-field="orderIdNumber" list="error_list"/>
         </if-empty>
        </if-compare>
        <if>
            <condition>
                <or>
                    <if-compare value="CAN" operator="equals" field="parameters.CONTACT_US_COUNTRY"></if-compare>
                    <if-compare value="USA" operator="equals" field="parameters.CONTACT_US_COUNTRY"></if-compare>
                </or>
            </condition>
            <then>
                <!-- Show general error if Phone is required -->
                <call-simple-method method-name="validatePhoneGeneral"/>
            </then>
            <else>
                <call-simple-method method-name="validatePhoneGeneralOther"/>
            </else>
        </if>
        <check-errors/>
    </simple-method>

    <simple-method method-name="validateEmailAFriend" short-description="validate Email A Friend Information" login-required="false">
        <if-compare field="parameters.fromEmailAddress_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.fromEmailAddress">
	             <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="FromEmailInvalidError"/>
	             <string-to-list string="${tempErrorMessage}" message-field="fromEmailAddress" list="error_list"/>
	        </if-empty>
        </if-compare>
        <if-not-empty field="parameters.fromEmailAddress">
             <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isEmail" ret-field="emailValid">
                <field field="parameters.fromEmailAddress"/>
             </call-class-method>
             <if-compare field="emailValid" operator="equals"  value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="FromEmailInvalidError"/>
                <string-to-list string="${tempErrorMessage}" message-field="fromEmailAddress" list="error_list"/>
             </if-compare>
        </if-not-empty>
        <if-compare field="parameters.fromFirstName_MANDATORY" operator="equals" value="Y">
	        <if-empty field="parameters.fromFirstName">
	             <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="FirstNameMissingError"/>
	             <string-to-list string="${tempErrorMessage}" message-field="fromFirstName" list="error_list"/>
	        </if-empty>
        </if-compare>
        <if-compare field="parameters.fromLastName_MANDATORY" operator="equals" value="Y">
            <if-empty field="parameters.fromLastName">
                 <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="LastNameMissingError"/>
                 <string-to-list string="${tempErrorMessage}" message-field="fromLastName" list="error_list"/>
            </if-empty>
        </if-compare>
        <if-compare field="parameters.toEmailAddress_MANDATORY" operator="equals" value="Y">
            <if-empty field="parameters.toEmailAddress">
                 <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ToEmailInvalidError"/>
                 <string-to-list string="${tempErrorMessage}" message-field="toEmailAddress" list="error_list"/>
            </if-empty>
        </if-compare>
        <if-not-empty field="parameters.toEmailAddress">
             <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isEmail" ret-field="emailValid">
                <field field="parameters.toEmailAddress"/>
             </call-class-method>
             <if-compare field="emailValid" operator="equals"  value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ToEmailInvalidError"/>
                <string-to-list string="${tempErrorMessage}" message-field="toEmailAddress" list="error_list"/>
             </if-compare>
        </if-not-empty>
        <if-compare field="parameters.toFirstName_MANDATORY" operator="equals" value="Y">
            <if-empty field="parameters.toFirstName">
                 <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ToFirstNameMissingError"/>
                 <string-to-list string="${tempErrorMessage}" message-field="toFirstName" list="error_list"/>
            </if-empty>
        </if-compare>
        <if-compare field="parameters.toLastName_MANDATORY" operator="equals" value="Y">
            <if-empty field="parameters.toLastName">
                 <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="ToLastNameMissingError"/>
                 <string-to-list string="${tempErrorMessage}" message-field="toLastName" list="error_list"/>
            </if-empty>
        </if-compare>
        <if-compare field="parameters.subject_MANDATORY" operator="equals" value="Y">
            <if-empty field="parameters.subject">
                 <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="SubjectMissingError"/>
                 <string-to-list string="${tempErrorMessage}" message-field="subject" list="error_list"/>
            </if-empty>
        </if-compare>
        <if-compare field="parameters.comment_MANDATORY" operator="equals" value="Y">
            <if-empty field="parameters.comment">
                 <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CommentMissingError"/>
                 <string-to-list string="${tempErrorMessage}" message-field="comment" list="error_list"/>
            </if-empty>
        </if-compare>
        <check-errors/>
    </simple-method>
    
    <simple-method method-name="PersonalBillingAttributeInfoValidation" short-description="validate Intelligent Attribute Sharing" login-required="false">
         
		<!-- If Personal First/Last Name is empty, then first try to pull from the DB -->
		<if-empty field="parameters.PERSONAL_USE_SCREEN">
 			<if-not-empty field="parameters.partyId">
				<entity-one entity-name="Person" value-field="person" auto-field-map="false">
      				<field-map field-name="partyId" from-field="parameters.partyId"/>
  				</entity-one>
				<if-not-empty field="person">
					<set field="parameters.USER_FIRST_NAME" from-field="person.firstName"/>
					<set field="parameters.USER_LAST_NAME" from-field="person.lastName"/>
				</if-not-empty>
			</if-not-empty>
		</if-empty>
         
         
         <!-- DETERMINE FIRST NAME -->
         <!-- try personal -->
         <if-not-empty field="parameters.USER_FIRST_NAME">
            <if-empty field="parameters.BILLING_FIRST_NAME">
            	<if-empty field="parameters.BILLING_FULL_NAME">
            		<if-compare field="parameters.BILLING_FIRST_NAME_MANDATORY" operator="not-equals" value="Y">
            			<if-compare field="parameters.BILLING_FULL_NAME_MANDATORY" operator="not-equals" value="Y">
            				<set field="parameters.BILLING_FIRST_NAME" from-field="parameters.USER_FIRST_NAME"/>
            			</if-compare>
            		</if-compare>
            	</if-empty>
            </if-empty>
         <else>
         	<!-- try billing -->
           <if-not-empty field="parameters.BILLING_FIRST_NAME">
           		<if-compare field="parameters.USER_FIRST_NAME_MANDATORY" operator="not-equals" value="Y">
           			<set field="parameters.USER_FIRST_NAME" from-field="parameters.BILLING_FIRST_NAME"/>
           		</if-compare>
           		<else>
           			<!-- try shipping -->
           			<if-not-empty field="parameters.SHIPPING_FIRST_NAME">
           				<if-compare field="parameters.USER_FIRST_NAME_MANDATORY" operator="not-equals" value="Y">
           					<set field="parameters.USER_FIRST_NAME" from-field="parameters.SHIPPING_FIRST_NAME"/>
           				</if-compare>
           				<if-compare field="parameters.BILLING_FIRST_NAME_MANDATORY" operator="not-equals" value="Y">
           					<if-compare field="parameters.BILLING_FULL_NAME_MANDATORY" operator="not-equals" value="Y">
           						<set field="parameters.BILLING_FIRST_NAME" from-field="parameters.SHIPPING_FIRST_NAME"/>
           					</if-compare>
           				</if-compare>
           			</if-not-empty>
           		</else>
           </if-not-empty>
         </else>
         </if-not-empty>
         
         <!-- DETERMINE LAST NAME -->
         <!-- try personal -->
          <if-not-empty field="parameters.USER_LAST_NAME">
            <if-empty field="parameters.BILLING_LAST_NAME">
            	<if-empty field="parameters.BILLING_FULL_NAME">
            		<if-compare field="parameters.BILLING_LAST_NAME_MANDATORY" operator="not-equals" value="Y">
            			<if-compare field="parameters.BILLING_FULL_NAME_MANDATORY" operator="not-equals" value="Y">
            				<set field="parameters.BILLING_LAST_NAME" from-field="parameters.USER_LAST_NAME"/>
            			</if-compare>
            		</if-compare>
            	</if-empty>
            </if-empty>
         <else>
         	<!-- try billing -->
            <if-not-empty field="parameters.BILLING_LAST_NAME">
           		<if-compare field="parameters.USER_LAST_NAME_MANDATORY" operator="not-equals" value="Y">
           			<set field="parameters.USER_LAST_NAME" from-field="parameters.BILLING_LAST_NAME"/>
           		</if-compare>
           		<else>
           			<!-- try shipping -->
           			<if-not-empty field="parameters.SHIPPING_LAST_NAME">
           				<if-compare field="parameters.USER_LAST_NAME_MANDATORY" operator="not-equals" value="Y">
           					<set field="parameters.USER_LAST_NAME" from-field="parameters.SHIPPING_LAST_NAME"/>
           				</if-compare>
           				<if-compare field="parameters.BILLING_LAST_NAME_MANDATORY" operator="not-equals" value="Y">
           					<if-compare field="parameters.BILLING_FULL_NAME_MANDATORY" operator="not-equals" value="Y">
           						<set field="parameters.BILLING_LAST_NAME" from-field="parameters.SHIPPING_LAST_NAME"/>
           					</if-compare>
           				</if-compare>
           			</if-not-empty>
           		</else>
            </if-not-empty>
         </else>
         </if-not-empty>
         
         <!-- If First/Last Name is still empty for Personal Info then try to use BILLING or SHIPPING FULL NAME -->
         <if-empty field="parameters.USER_FIRST_NAME">
         	<if-empty field="parameters.USER_LAST_NAME">
         		<if-not-empty field="parameters.BILLING_FULL_NAME">
         			<call-class-method class-name="org.ofbiz.base.util.StringUtil" method-name="split" ret-field="billingNamesList">
         				<field field="parameters.BILLING_FULL_NAME" type="String"/>
                		<string value=" "/>
         			</call-class-method>
         			<call-object-method method-name="size" obj-field="billingNamesList" ret-field="billingNamesListSize"/>
         			<set field="nameCount" value="1" type="Integer"/>
         			<iterate list="billingNamesList" entry="billingName">
         				<if-compare field="nameCount" operator="equals" value="1" type="Integer">
         					<if-compare field="parameters.USER_FIRST_NAME_MANDATORY" operator="not-equals" value="Y">
         						<set field="parameters.USER_FIRST_NAME" from-field="billingName"/>
         					</if-compare>
         				</if-compare>
         				<if-compare-field field="nameCount" operator="equals" to-field="billingNamesListSize" type="Integer">
         					<if-compare field="parameters.USER_LAST_NAME_MANDATORY" operator="not-equals" value="Y">
         						<set field="parameters.USER_LAST_NAME" from-field="billingName"/>
         					</if-compare>
         				</if-compare-field>
         				<calculate field="nameCount">
	                        <calcop operator="add" >
	                            <calcop operator="get" field="nameCount"/>
	                            <number value="1"/>
	                        </calcop>
	                    </calculate>
         			</iterate>
         			<else>
	         			<if-not-empty field="parameters.SHIPPING_FULL_NAME">
	         				<call-class-method class-name="org.ofbiz.base.util.StringUtil" method-name="split" ret-field="shippingNamesList">
		         				<field field="parameters.SHIPPING_FULL_NAME" type="String"/>
		                		<string value=" "/>
		         			</call-class-method>
		         			<call-object-method method-name="size" obj-field="shippingNamesList" ret-field="shippingNamesListSize"/>
		         			<set field="nameCount" value="1" type="Integer"/>
		         			<iterate list="shippingNamesList" entry="shippingName">
		         				<if-compare field="nameCount" operator="equals" value="1" type="Integer">
		         					<if-compare field="parameters.USER_FIRST_NAME_MANDATORY" operator="not-equals" value="Y">
		         						<set field="parameters.USER_FIRST_NAME" from-field="shippingName"/>
		         					</if-compare>
		         					<if-compare field="parameters.BILLING_FIRST_NAME_MANDATORY" operator="not-equals" value="Y">
		         						<if-compare field="parameters.BILLING_FULL_NAME_MANDATORY" operator="not-equals" value="Y">
		         							<set field="parameters.BILLING_FIRST_NAME" from-field="shippingName"/>
		         						</if-compare>
		         					</if-compare>
		         				</if-compare>
		         				<if-compare-field field="nameCount" operator="equals" to-field="shippingNamesListSize" type="Integer">
		         					<if-compare field="parameters.USER_LAST_NAME_MANDATORY" operator="not-equals" value="Y">
		         						<set field="parameters.USER_LAST_NAME" from-field="shippingName"/>
		         					</if-compare>
		         					<if-compare field="parameters.BILLING_LAST_NAME_MANDATORY" operator="not-equals" value="Y">
		         						<if-compare field="parameters.BILLING_FULL_NAME_MANDATORY" operator="not-equals" value="Y">
		         							<set field="parameters.BILLING_LAST_NAME" from-field="shippingName"/>
		         						</if-compare>
		         					</if-compare>
		         				</if-compare-field>
		         				<calculate field="nameCount">
			                        <calcop operator="add" >
			                            <calcop operator="get" field="nameCount"/>
			                            <number value="1"/>
			                        </calcop>
			                    </calculate>
		         			</iterate>	
	         			</if-not-empty>
         			</else>
         		</if-not-empty>
         	</if-empty>
         </if-empty>
         
         <!-- Set CC Names using Billing Names -->
         <if-not-empty field="parameters.BILLING_FIRST_NAME">
         	<set field="parameters.firstNameOnCard" from-field="parameters.BILLING_FIRST_NAME"/>
         </if-not-empty>
         
         <if-not-empty field="parameters.BILLING_LAST_NAME">
         	<set field="parameters.lastNameOnCard" from-field="parameters.BILLING_LAST_NAME"/>
         </if-not-empty>
         
         <if>
          <condition>
            <and>
                  <if-empty field="parameters.firstNameOnCard"/>
                  <if-empty field="parameters.lastNameOnCard"/>
            </and>
          </condition>
          <then>
           <if-not-empty field="parameters.BILLING_FULL_NAME">
	     	   <call-class-method class-name="org.ofbiz.base.util.StringUtil" method-name="split" ret-field="billingNamesList">
	     		 <field field="parameters.BILLING_FULL_NAME" type="String"/>
	             <string value=" "/>
	     	   </call-class-method>
	     	   <call-object-method method-name="size" obj-field="billingNamesList" ret-field="billingNamesListSize"/>
	           <set field="nameCount" value="1" type="Integer"/>
	            <iterate list="billingNamesList" entry="billingName">
	   				<if-compare field="nameCount" operator="equals" value="1" type="Integer">
	           	       <set field="parameters.firstNameOnCard" from-field="billingName"/>
	   				</if-compare>
	   				<if-compare field="nameCount" operator="greater" value="1" type="Integer">
	           	       <set field="parameters.lastNameOnCard" from-field="billingName"/>
	   				</if-compare>
       				<calculate field="nameCount">
                       <calcop operator="add" >
                           <calcop operator="get" field="nameCount"/>
                           <number value="1"/>
                       </calcop>
                    </calculate>
	     		</iterate>
	       <else>
	         <if-not-empty field="parameters.USER_FIRST_NAME">
	         	<set field="parameters.firstNameOnCard" from-field="parameters.USER_FIRST_NAME"/>
	         </if-not-empty>
	         
	         <if-not-empty field="parameters.USER_LAST_NAME">
	         	<set field="parameters.lastNameOnCard" from-field="parameters.USER_LAST_NAME"/>
	         </if-not-empty>
	     	</else>
           </if-not-empty>
          </then>
         </if>
    </simple-method>
    
    
    <simple-method method-name="validateEftAccount" short-description="Validate Eft Account Fields" login-required="false">
        <log level="info" message="${parameters.fieldLevelErrors}"></log>
        <if-compare field="parameters.fieldLevelErrors" operator="equals" value="Y">
            <set field="fieldLevelErrors" value="${parameters.fieldLevelErrors}"/>
            <field-to-request field="fieldLevelErrors" />
        </if-compare>

        <if-compare field="parameters.paymentOption" operator="equals" value="PAYOPT_EFT_EXIST" type="String">

            <if-empty field="parameters.savedEftAccount">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="SavedEftAccountMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="savedEftAccount" list="error_list"/>
            <else>
                <entity-one value-field="savedEftAccountGv" entity-name="EftAccount">
                    <field-map field-name="paymentMethodId" from-field="parameters.savedEftAccount"/>
                </entity-one>
                <set field="eftAccountContext.nameOnAccount" from-field="savedEftAccountGv.nameOnAccount"/>
                <set field="eftAccountContext.bankName" from-field="savedEftAccountGv.bankName"/>
                <set field="eftAccountContext.routingNumber" from-field="savedEftAccountGv.routingNumber"/>
                <set field="eftAccountContext.accountNumber" from-field="savedEftAccountGv.accountNumber"/>
                <set field="eftAccountContext.accountType" from-field="savedEftAccountGv.accountType"/>
                <set field="eftAccountContext.contactMechId" from-field="savedEftAccountGv.contactMechId"/>
            </else>
            </if-empty>
        <else>
            <if-empty field="parameters.nameOnAccount">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="NameOnAccountMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="nameOnAccount" list="error_list"/>
            </if-empty>
            
            <if-empty field="parameters.bankName">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="BankNameMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="bankName" list="error_list"/>
            </if-empty>
            
            <if-not-empty field="parameters.routingNumber">
                <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isInteger" ret-field="routingNumberVaild">
                    <string value="${parameters.routingNumber}"></string>
                </call-class-method>
                <if-compare operator="equals" value="true" field="routingNumberVaild" type="Boolean">
                    <call-object-method method-name="length" obj-field="parameters.routingNumber" ret-field="routingNumberLength"/>
    	            <if-compare operator="not-equals" value="9" field="routingNumberLength" type="Integer">
    		        	<property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="RoutingNumberInvalidError"/>
    	           		<string-to-list string="${tempErrorMessage}" message-field="routingNumber" list="error_list"/>
    	            </if-compare>
    	        <else>
    	            <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="RoutingNumberInvalidError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="routingNumber" list="error_list"/>
    	        </else>
                </if-compare>
            <else>
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="RoutingNumberInvalidError"/>
                <string-to-list string="${tempErrorMessage}" message-field="routingNumber" list="error_list"/>
            </else>
            </if-not-empty>
            
            <if-empty field="parameters.accountType">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AccountTypeMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="accountType" list="error_list"/>
            </if-empty>
            
            <if-not-empty field="parameters.accountNumber">
                <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isInteger" ret-field="accountNumberVaild">
                    <string value="${parameters.accountNumber}"></string>
                </call-class-method>
                <if-compare operator="equals" value="false" field="accountNumberVaild" type="Boolean">
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AccountNumberInvalidError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="accountNumber" list="error_list"/>
                </if-compare>
            <else>
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="AccountNumberInvalidError"/>
                <string-to-list string="${tempErrorMessage}" message-field="accountNumber" list="error_list"/>
            </else>
            </if-not-empty>

            <set field="eftAccountContext.nameOnAccount" from-field="parameters.nameOnAccount"/>
            <set field="eftAccountContext.bankName" from-field="parameters.bankName"/>
            <set field="eftAccountContext.routingNumber" from-field="parameters.routingNumber"/>
            <set field="eftAccountContext.accountNumber" from-field="parameters.accountNumber"/>
            <set field="eftAccountContext.accountType" from-field="parameters.accountType"/>
            <set field="eftAccountContext.contactMechId" from-field="parameters.contactMechId"/>
        </else>
        </if-compare>
    </simple-method>

    <simple-method method-name="validateRequestQuote" short-description="validate Request Quote" login-required="false">
        <!-- Check Contact Us form -->
        <call-map-processor in-map-name="parameters" out-map-name="custRequestContext">
            <simple-map-processor name="custRequest">
                <process field="emailAddress"><copy/></process>
                <process field="firstName"><copy/></process>
                <process field="lastName"><copy/></process>
                <process field="content"><copy/></process>
                <process field="contactPhoneArea"><copy/></process>
                <process field="contactPhoneContact3"><copy/></process>
                <process field="contactPhoneContact4"><copy/></process>
                <process field="contactPhoneNumber"><copy to-field="phoneNumber"/></process>
                <process field="partNumber"><copy/></process>
            </simple-map-processor>
        </call-map-processor>
        <if-compare field="parameters.firstName_MANDATORY" operator="equals" value="Y">
         <if-empty field="parameters.firstName">
             <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="FirstNameMissingError"/>
             <string-to-list string="${tempErrorMessage}" message-field="firstName" list="error_list"/>
         </if-empty>
        </if-compare>
        <if-compare field="parameters.lastName_MANDATORY" operator="equals" value="Y">
         <if-empty field="parameters.lastName">
             <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="LastNameMissingError"/>
             <string-to-list string="${tempErrorMessage}" message-field="lastName" list="error_list"/>
         </if-empty>
        </if-compare>
        <if-compare field="parameters.emailAddress_MANDATORY" operator="equals" value="Y">
         <if-empty field="parameters.emailAddress">
             <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="RequestQuoteEmailAddressMissingError"/>
             <string-to-list string="${tempErrorMessage}" message-field="emailAddress" list="error_list"/>
         </if-empty>
        </if-compare>
        <if-not-empty field="parameters.emailAddress">
            <call-map-processor in-map-name="parameters" out-map-name="emailContext">
                <simple-map-processor name="newEmail">
                    <process field="emailAddress">
                        <copy to-field="emailAddress"/>
                        <validate-method method="isEmail"><fail-property resource="OSafeUiLabels" property="EmailInvalidError"/></validate-method>
                    </process>
                </simple-map-processor>
            </call-map-processor>
        </if-not-empty>
        <if-compare field="parameters.content_MANDATORY" operator="equals" value="Y">
         <if-empty field="parameters.content">
             <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CommentMissingError"/>
             <string-to-list string="${tempErrorMessage}" message-field="content" list="error_list"/>
         </if-empty>
        </if-compare>
        <if-compare field="parameters.partNumber_MANDATORY" operator="equals" value="Y">
         <if-empty field="parameters.partNumber">
             <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="PartNumberMissingError"/>
             <string-to-list string="${tempErrorMessage}" message-field="partNumber" list="error_list"/>
         </if-empty>
        </if-compare>
        <if>
            <condition>
                <or>
                    <if-compare value="CAN" operator="equals" field="parameters.CONTACT_US_COUNTRY"></if-compare>
                    <if-compare value="USA" operator="equals" field="parameters.CONTACT_US_COUNTRY"></if-compare>
                </or>
            </condition>
            <then>
                <!-- Show general error if Phone is required -->
                <call-simple-method method-name="validatePhoneGeneral"/>
            </then>
            <else>
                <call-simple-method method-name="validatePhoneGeneralOther"/>
            </else>
        </if>
        <check-errors/>
    </simple-method>
    
    <simple-method method-name="validatePhoneHome" short-description="validate Phone Home" login-required="false">
        <call-map-processor in-map-name="parameters" out-map-name="contactHomePhoneMap">
            <simple-map-processor name="newTelecomNumber">
                    <make-in-string field="contactNumber">
                        <in-field field="PHONE_HOME_CONTACT3"/>
                        <in-field field="PHONE_HOME_CONTACT4"/>
                    </make-in-string>
                    <process field="contactNumber"><copy to-field="contactHomePhoneContact"/></process>
            </simple-map-processor>
        </call-map-processor>
        <if>
            <condition>
              <or>
                <not><if-empty field="parameters.PHONE_HOME_AREA"></if-empty></not>
                <not><if-empty field="contactHomePhoneMap.contactHomePhoneContact"></if-empty></not>
              </or>
            </condition>
            <then>
                              <set field="parameters.PHONE_HOME_MANDATORY" value="Y"/>
            </then>
        </if>
        <call-class-method class-name="com.osafe.util.Util"  method-name="checkTelecomNumber" ret-field="checkTelecomNumberResult">
            <field field="parameters.PHONE_HOME_AREA"/>
            <field field="contactHomePhoneMap.contactHomePhoneContact"/>
            <field field="parameters.PHONE_HOME_MANDATORY"/>
        </call-class-method>
        <if-compare field="checkTelecomNumberResult" operator="not-equals" value="success">
            <if-compare field="checkTelecomNumberResult" operator="equals" value="missing">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="HomePhoneMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="PHONE_HOME_AREA" list="error_list"/>
                <string-to-list string="" message-field="PHONE_HOME_CONTACT3" list="error_list"/>
                <string-to-list string="" message-field="PHONE_HOME_CONTACT4" list="error_list"/>
            </if-compare>
            <if-compare field="checkTelecomNumberResult" operator="equals" value="invalid">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CommonPhoneInvalidError"/>
                <string-to-list string="${tempErrorMessage}" message-field="PHONE_HOME_AREA" list="error_list"/>
                <string-to-list string="" message-field="PHONE_HOME_CONTACT3" list="error_list"/>
                <string-to-list string="" message-field="PHONE_HOME_CONTACT4" list="error_list"/>
            </if-compare>
        </if-compare>    
    </simple-method>
    <simple-method method-name="validatePhoneHomeOther" short-description="validate Phone Home Other" login-required="false">
        <call-map-processor in-map-name="parameters" out-map-name="contactHomeOtherPhoneMap">
            <simple-map-processor name="newTelecomNumber">
                    <!--make-in-string field="contactNumber">
                        <in-field field="PHONE_HOME_CONTACT_OTHER3"/>
                        <in-field field="PHONE_HOME_CONTACT_OTHER4"/>
                    </make-in-string-->
                    <process field="PHONE_HOME_CONTACT_OTHER"><copy to-field="contactHomeOtherPhoneContact"/></process>
            </simple-map-processor>
        </call-map-processor>
        <call-class-method class-name="com.osafe.util.Util"  method-name="checkTelecomNumber" ret-field="checkTelecomNumberResult">
            <string value=""/>
            <field field="contactHomeOtherPhoneMap.contactHomeOtherPhoneContact"/>
            <string value="false"/>
        </call-class-method>
        <if-compare field="checkTelecomNumberResult" operator="not-equals" value="success">
            <if-compare field="checkTelecomNumberResult" operator="equals" value="invalid">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CommonPhoneInvalidError"/>
                <string-to-list string="${tempErrorMessage}" message-field="PHONE_HOME_CONTACT_OTHER" list="error_list"/>
            </if-compare>
        </if-compare>
        <if-compare field="parameters.PHONE_HOME_MANDATORY" operator="equals" value="Y">
            <if-empty field="contactHomeOtherPhoneMap.contactHomeOtherPhoneContact">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="HomePhoneMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="PHONE_HOME_CONTACT_OTHER" list="error_list"/>
            </if-empty>
        </if-compare>
    </simple-method>
    <simple-method method-name="validatePhoneMobile" short-description="validate Phone Mobile" login-required="false">
       <call-map-processor in-map-name="parameters" out-map-name="contactMobilePhoneMap">
           <simple-map-processor name="newTelecomNumber">
                   <make-in-string field="contactNumber">
                       <in-field field="PHONE_MOBILE_CONTACT3"/>
                       <in-field field="PHONE_MOBILE_CONTACT4"/>
                   </make-in-string>
                   <process field="contactNumber"><copy to-field="contactMobilePhoneContact"/></process>
           </simple-map-processor>
       </call-map-processor>
      <if>
          <condition>
            <or>
              <not><if-empty field="parameters.PHONE_MOBILE_AREA"></if-empty></not>
              <not><if-empty field="contactMobilePhoneMap.contactMobilePhoneContact"></if-empty></not>
            </or>
          </condition>
          <then>
               <set field="parameters.PHONE_MOBILE_MANDATORY" value="Y"/>
          </then>
      </if>
      <call-class-method class-name="com.osafe.util.Util"  method-name="checkTelecomNumber" ret-field="checkTelecomNumberResult">
          <field field="parameters.PHONE_MOBILE_AREA"/>
          <field field="contactMobilePhoneMap.contactMobilePhoneContact"/>
          <field field="parameters.PHONE_MOBILE_MANDATORY"/>
      </call-class-method>
      <if-compare field="checkTelecomNumberResult" operator="not-equals" value="success">
          <if-compare field="checkTelecomNumberResult" operator="equals" value="missing">
           <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="MobilePhoneMissingError"/>
              <string-to-list string="${tempErrorMessage}" message-field="PHONE_MOBILE_AREA" list="error_list"/>
              <string-to-list string="" message-field="PHONE_MOBILE_CONTACT3" list="error_list"/>
              <string-to-list string="" message-field="PHONE_MOBILE_CONTACT4" list="error_list"/>
          </if-compare>
          <if-compare field="checkTelecomNumberResult" operator="equals" value="invalid">
              <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CommonPhoneInvalidError"/>
              <string-to-list string="${tempErrorMessage}" message-field="PHONE_MOBILE_AREA" list="error_list"/>
              <string-to-list string="" message-field="PHONE_MOBILE_CONTACT3" list="error_list"/>
              <string-to-list string="" message-field="PHONE_MOBILE_CONTACT4" list="error_list"/>
          </if-compare>
      </if-compare>
    </simple-method>
    <simple-method method-name="validatePhoneMobileOther" short-description="validate Phone Mobile Other" login-required="false">
       <set field="contactMobileOtherPhoneMap.contactMobileOtherPhoneContact" from-field="parameters.PHONE_MOBILE_CONTACT_OTHER"/>
       <call-class-method class-name="com.osafe.util.Util"  method-name="checkTelecomNumber" ret-field="checkTelecomNumberResult">
           <string value=""/>
           <field field="contactMobileOtherPhoneMap.contactMobileOtherPhoneContact"/>
           <string value="false"/>
       </call-class-method>
       <if-compare field="checkTelecomNumberResult" operator="not-equals" value="success">
           <if-compare field="checkTelecomNumberResult" operator="equals" value="invalid">
               <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CommonPhoneInvalidError"/>
               <string-to-list string="${tempErrorMessage}" message-field="PHONE_MOBILE_CONTACT_OTHER" list="error_list"/>
           </if-compare>
       </if-compare>
       <if-compare field="parameters.PHONE_MOBILE_MANDATORY" operator="equals" value="Y">
           <if-empty field="contactMobileOtherPhoneMap.contactMobileOtherPhoneContact">
               <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="MobilePhoneMissingError"/>
               <string-to-list string="${tempErrorMessage}" message-field="PHONE_MOBILE_CONTACT_OTHER" list="error_list"/>
           </if-empty>
       </if-compare>
    </simple-method>
    
    <simple-method method-name="validatePhoneWork" short-description="validate Phone Work" login-required="false">
       <call-map-processor in-map-name="parameters" out-map-name="contactWorkPhoneMap">
           <simple-map-processor name="newTelecomNumber">
                   <make-in-string field="contactNumber">
                       <in-field field="PHONE_WORK_CONTACT3"/>
                       <in-field field="PHONE_WORK_CONTACT4"/>
                   </make-in-string>
                   <process field="contactNumber"><copy to-field="contactWorkPhoneContact"/></process>
           </simple-map-processor>
       </call-map-processor>
        <if>
            <condition>
              <or>
                <not><if-empty field="parameters.PHONE_WORK_AREA"></if-empty></not>
                <not><if-empty field="parameters.PHONE_WORK_EXT"></if-empty></not>
                <not><if-empty field="contactWorkPhoneMap.contactWorkPhoneContact"></if-empty></not>
              </or>
            </condition>
            <then>
                              <set field="parameters.PHONE_WORK_MANDATORY" value="Y"/>
            </then>
        </if>
        <call-class-method class-name="com.osafe.util.Util"  method-name="checkTelecomNumber" ret-field="checkTelecomNumberResult">
            <field field="parameters.PHONE_WORK_AREA"/>
            <field field="contactWorkPhoneMap.contactWorkPhoneContact"/>
            <field field="parameters.PHONE_WORK_EXT"/>
            <field field="parameters.PHONE_WORK_MANDATORY"/>
        </call-class-method>
        <if-compare field="checkTelecomNumberResult" operator="not-equals" value="success">
            <if-compare field="checkTelecomNumberResult" operator="equals" value="missing">
             <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="WorkPhoneMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="PHONE_WORK_AREA" list="error_list"/>
                <string-to-list string="" message-field="PHONE_WORK_CONTACT3" list="error_list"/>
                <string-to-list string="" message-field="PHONE_WORK_CONTACT4" list="error_list"/>
                <string-to-list string="" message-field="PHONE_WORK_EXT" list="error_list"/>
         </if-compare>
            <if-compare field="checkTelecomNumberResult" operator="equals" value="invalid">
                <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CommonPhoneInvalidError"/>
                <string-to-list string="${tempErrorMessage}" message-field="PHONE_WORK_AREA" list="error_list"/>
                <string-to-list string="" message-field="PHONE_WORK_CONTACT3" list="error_list"/>
                <string-to-list string="" message-field="PHONE_WORK_CONTACT4" list="error_list"/>
                <string-to-list string="" message-field="PHONE_WORK_EXT" list="error_list"/>
            </if-compare>
        </if-compare>
    </simple-method>
    <simple-method method-name="validatePhoneWorkOther" short-description="validate Phone Work Other" login-required="false">
        <if-not-empty field="parameters.PHONE_WORK_CONTACT_OTHER">
            <set field="contactWorkOtherPhoneMap.contactWorkOtherPhoneContact" from-field="parameters.PHONE_WORK_CONTACT_OTHER"/>
            <set field="contactWorkOtherPhoneMap.contactWorkOtherPhoneContactExt" from-field="parameters.PHONE_WORK_EXT_OTHER"/>
	        <if>
	            <condition>
	              <or>
	                <not><if-empty field="parameters.PHONE_WORK_CONTACT_OTHER"></if-empty></not>
	                <not><if-empty field="parameters.PHONE_WORK_EXT_OTHER"></if-empty></not>
	              </or>
	            </condition>
	            <then>
	                 <set field="parameters.PHONE_WORK_MANDATORY" value="Y"/>
	            </then>
	        </if>
            <call-class-method class-name="com.osafe.util.Util"  method-name="checkTelecomNumber" ret-field="checkTelecomNumberResult">
                <string value=""/>
                <field field="contactWorkOtherPhoneMap.contactWorkOtherPhoneContact"/>
                <field field="parameters.PHONE_WORK_EXT_OTHER"/>
                <string value="false"/>
            </call-class-method>
            <if-compare field="checkTelecomNumberResult" operator="not-equals" value="success">
                <if-compare field="checkTelecomNumberResult" operator="equals" value="invalid">
                    <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CommonPhoneInvalidError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="PHONE_WORK_CONTACT_OTHER" list="error_list"/>
                    <string-to-list string="" message-field="PHONE_WORK_EXT_OTHER" list="error_list"/>
                </if-compare>
            </if-compare>
            <if-compare field="parameters.PHONE_WORK_MANDATORY" operator="equals" value="Y">
             <if-empty field="contactWorkOtherPhoneMap.contactWorkOtherPhoneContact">
                 <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="WorkPhoneMissingError"/>
                 <string-to-list string="${tempErrorMessage}" message-field="PHONE_WORK_CONTACT_OTHER" list="error_list"/>
                    <string-to-list string="" message-field="PHONE_WORK_EXT_OTHER" list="error_list"/>
             </if-empty>
            </if-compare>
       </if-not-empty>
    </simple-method>

    <simple-method method-name="validatePhoneGeneral" short-description="validate Phone General Other" login-required="false">
         <call-map-processor in-map-name="parameters" out-map-name="contactHomePhoneMap">
             <simple-map-processor name="newTelecomNumber">
                     <make-in-string field="contactNumber">
                         <in-field field="contactPhoneContact3"/>
                         <in-field field="contactPhoneContact4"/>
                     </make-in-string>
                     <process field="contactNumber"><copy to-field="contactHomePhoneContact"/></process>
             </simple-map-processor>
         </call-map-processor>
	       <if>
	           <condition>
	             <or>
	               <not><if-empty field="parameters.contactPhoneArea"></if-empty></not>
	               <not><if-empty field="contactHomePhoneMap.contactHomePhoneContact"></if-empty></not>
	             </or>
	           </condition>
	           <then>
	                             <set field="parameters.contactPhoneNumber_MANDATORY" value="Y"/>
	           </then>
	       </if>
           <call-class-method class-name="com.osafe.util.Util"  method-name="checkTelecomNumber" ret-field="checkTelecomNumberResult">
               <field field="parameters.contactPhoneArea"/>
               <field field="contactHomePhoneMap.contactHomePhoneContact"/>
               <field field="parameters.contactPhoneNumber_MANDATORY"/>
           </call-class-method>
           <if-compare field="checkTelecomNumberResult" operator="not-equals" value="success">
               <if-compare field="checkTelecomNumberResult" operator="equals" value="missing">
                   <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CommonPhoneInvalidError"/>
                   <string-to-list string="${tempErrorMessage}" message-field="contactPhoneContact" list="error_list"/>
               </if-compare>
               <if-compare field="checkTelecomNumberResult" operator="equals" value="invalid">
                   <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CommonPhoneInvalidError"/>
                   <string-to-list string="${tempErrorMessage}" message-field="contactPhoneContact" list="error_list"/>
               </if-compare>
           </if-compare>
    </simple-method>

    <simple-method method-name="validatePhoneGeneralOther" short-description="validate Phone General Other" login-required="false">
           <call-map-processor in-map-name="parameters" out-map-name="contactHomeOtherPhoneMap">
               <simple-map-processor name="newTelecomNumber">
                       <process field="contactPhoneNumber"><copy to-field="contactHomeOtherPhoneContact"/></process>
               </simple-map-processor>
           </call-map-processor>
           <call-class-method class-name="com.osafe.util.Util"  method-name="checkTelecomNumber" ret-field="checkTelecomNumberResult">
               <string value=""/>
               <field field="contactHomeOtherPhoneMap.contactHomeOtherPhoneContact"/>
               <string value="false"/>
           </call-class-method>
           <if-compare field="checkTelecomNumberResult" operator="not-equals" value="success">
               <if-compare field="checkTelecomNumberResult" operator="equals" value="invalid">
                   <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CommonPhoneInvalidError"/>
                   <string-to-list string="${tempErrorMessage}" message-field="contactPhoneContact" list="error_list"/>
               </if-compare>
           </if-compare>
          <if-compare field="parameters.contactPhoneNumber_MANDATORY" operator="equals" value="Y">
              <if-empty field="contactHomeOtherPhoneMap.contactHomeOtherPhoneContact">
                  <property-to-field field="tempErrorMessage" resource="OSafeUiLabels" property="CommonPhoneInvalidError"/>
                  <string-to-list string="${tempErrorMessage}" message-field="contactPhoneContact" list="error_list"/>
              </if-empty>
         </if-compare>
    </simple-method>
    
</simple-methods>