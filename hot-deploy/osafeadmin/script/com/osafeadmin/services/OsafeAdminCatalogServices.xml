<?xml version="1.0" encoding="UTF-8"?>

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:noNamespaceSchemaLocation="http://www.ofbiz.org/dtds/simple-methods.xsd">

    <simple-method method-name="updateProductCategoryAndRollup" short-description="Update ProductCategory and ProductCategoryRollup">
        <if-empty field="parameters.primaryParentCategoryId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidNavbarCategoryError"/>
            <string-to-list string="${tempErrorMessage}" message-field="primaryParentCategoryId" list="error_list"/>
        </if-empty>
        <if-empty field="parameters.categoryName">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidTextCategoryError"/>
            <string-to-list string="${tempErrorMessage}" message-field="categoryName" list="error_list"/>
        </if-empty>
        <if-empty field="parameters.fromDate">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankActiveFromDateError"/>
            <string-to-list string="${tempErrorMessage}" message-field="fromDate" list="error_list"/>
        </if-empty>
        
        <if-not-empty field="parameters.fromDate">
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isDateTime" ret-field="checkDateValidResult">
                <field field="parameters.fromDate"/>
                <field field="parameters.entryDateTimeFormat"/>
            </call-class-method>
            <if-compare field="checkDateValidResult" operator="equals" value="false" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidActiveFromDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="fromDate" list="error_list"/>
                <else>
                    <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="toTimestamp" ret-field="parameters.fromDate">
                        <field field="parameters.fromDate"/>
                        <field field="parameters.entryDateTimeFormat"/>
                    </call-class-method>
                </else>
            </if-compare>
        </if-not-empty>
        <if-not-empty field="parameters.thruDate">
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isDateTime" ret-field="checkDateValidResult">
                <field field="parameters.thruDate"/>
                <field field="parameters.entryDateTimeFormat"/>
            </call-class-method>
            <if-compare field="checkDateValidResult" operator="equals" value="false" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidActiveThruDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="thruDate" list="error_list"/>
                <else>
                    <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="toTimestamp" ret-field="parameters.thruDate">
                        <field field="parameters.thruDate"/>
                        <field field="parameters.entryDateTimeFormat"/>
                    </call-class-method>
                </else>
            </if-compare>
        </if-not-empty>
        
        <if-not-empty field="parameters.fromDate">
        	<if-not-empty field="parameters.thruDate">
        		<if-compare-field field="parameters.fromDate" operator="greater" to-field="parameters.thruDate" type="Date">
		            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="CataologFromThruCompareError"/>
		            <string-to-list string="${tempErrorMessage}" message-field="fromDate" list="error_list"/>
		        </if-compare-field>
        	</if-not-empty>
        </if-not-empty>
        
        <if-empty field="parameters.sequenceNum">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidCategorySeqNumError"/>
            <string-to-list string="${tempErrorMessage}" message-field="sequenceNum" list="error_list"/>
        <else>
            <call-class-method method-name="trimTrailSpaces" class-name="com.osafe.util.OsafeAdminUtil" ret-field="sequenceNum">
                <field field="parameters.sequenceNum"/>
            </call-class-method>
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isInteger" ret-field="sequenceNumVaild">
                    <string value="${sequenceNum}"></string>
                </call-class-method>
                <if-compare operator="equals" value="false" field="sequenceNumVaild" type="Boolean">
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidCategorySeqNumError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="sequenceNum" list="error_list"/>
                <else>
                    <if>
                        <condition>
                            <and>
                                <if-compare operator="greater-equals" value="0" field="sequenceNum" type="Long"/>
                                <if-compare operator="less-equals" value="9999" field="sequenceNum" type="Long"/>
                            </and>
                        </condition>
                        <then>
                        </then>
                        <else>
                            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidCategorySeqNumError"/>
                            <string-to-list string="${tempErrorMessage}" message-field="sequenceNum" list="error_list"/>
                        </else>
                    </if>
                </else>
                </if-compare>
        </else>
        </if-empty>
        
        <if-not-empty field="parameters.description">
            <call-object-method method-name="length" obj-field="parameters.description" ret-field="categoryDescriptionLength"/>
	        <if-compare operator="greater" value="255" field="categoryDescriptionLength" type="Integer">
	        	<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="LongCategoryDescriptionError"/>
           		<string-to-list string="${tempErrorMessage}" message-field="description" list="error_list"/>
            </if-compare>
        </if-not-empty>
        
        <check-errors/>
        <if-not-empty field="parameters.formattedFromDate">
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isDateTime" ret-field="checkDateValidResult">
                <field field="parameters.formattedFromDate"/>
                <field field="parameters.entryDateTimeFormat"/>
            </call-class-method>
            <if-compare field="checkDateValidResult" operator="equals" value="false" type="Boolean">
                <else>
                    <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="toTimestamp" ret-field="parameters.formattedFromDate">
                        <field field="parameters.formattedFromDate"/>
                        <field field="parameters.entryDateTimeFormat"/>
                    </call-class-method>
                </else>
            </if-compare>
        </if-not-empty>
        <set-service-fields service-name="updateProductCategory" map="parameters" to-map="updateProductCategoryCtx"/>
        <call-service service-name="updateProductCategory" in-map-name="updateProductCategoryCtx"/>
        
        <entity-one entity-name="ProductCategoryRollup" value-field="productCategoryRollup">
            <field-map field-name="productCategoryId" from-field="parameters.productCategoryId"/>
            <field-map field-name="parentProductCategoryId" from-field="parameters.primaryParentCategoryId"/>
            <field-map field-name="fromDate" from-field="parameters.fromDate"/>
        </entity-one>
        <now-timestamp field="nowStamp"/>
        <if-empty field="productCategoryRollup">
            <set-service-fields service-name="updateProductCategoryToCategory" map="parameters" to-map="currentRollupCtx"/>
            <set field="currentRollupCtx.thruDate" from-field="nowStamp"/>
            <set field="currentRollupCtx.fromDate" from-field="parameters.currentFromDate" type="Timestamp"/>
            <set field="currentRollupCtx.parentProductCategoryId" from-field="parameters.currentPrimaryParentCategoryId"/>
            <call-service service-name="updateProductCategoryToCategory" in-map-name="currentRollupCtx"/>
            
            <set-service-fields service-name="addProductCategoryToCategory" map="parameters" to-map="createRollupCtx"/>
            <set field="createRollupCtx.parentProductCategoryId" from-field="parameters.primaryParentCategoryId"/>
            <set field="createRollupCtx.thruDate" from-field="parameters.thruDate" type="Timestamp" set-if-empty="true"/>
            <call-service service-name="addProductCategoryToCategory" in-map-name="createRollupCtx"/>
        <else>
            <if>
           <condition>
              <or>
                <if-compare-field operator="not-equals" field="parameters.fromDate" to-field="parameters.formattedDate"></if-compare-field>
                <if-compare-field operator="not-equals" field="parameters.primaryParentCategoryId" to-field="parameters.currentPrimaryParentCategoryId"></if-compare-field>
              </or>
           </condition>
                <then>
                    <set-service-fields service-name="updateProductCategoryToCategory" map="parameters" to-map="prevExistedRollupCtx"/>
                    <set field="prevExistedRollupCtx.thruDate" from-field="nowStamp"/>
                    <set field="prevExistedRollupCtx.fromDate" from-field="parameters.currentFromDate" type="Timestamp"/>
                    <set field="prevExistedRollupCtx.parentProductCategoryId" from-field="parameters.currentPrimaryParentCategoryId"/>
                    <call-service service-name="updateProductCategoryToCategory" in-map-name="prevExistedRollupCtx"/>
                </then>
            </if>
            
            <set-service-fields service-name="updateProductCategoryToCategory" map="parameters" to-map="updateCurrentRollupCtx"/>
            <set field="updateCurrentRollupCtx.thruDate" from-field="parameters.thruDate" type="Timestamp" set-if-empty="true"/>
            <set field="updateCurrentRollupCtx.parentProductCategoryId" from-field="parameters.primaryParentCategoryId"/>
            <call-service service-name="updateProductCategoryToCategory" in-map-name="updateCurrentRollupCtx"/>
        </else>
        </if-empty>
    </simple-method>
    
    <simple-method method-name="updateProductAndPrice" short-description="update Product record and also update ProductPrice">
        <if-empty field="parameters.productId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidProductIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="productId" list="error_list"/>
        </if-empty>
        <if-compare field="parameters.isVariant" operator="not-equals" value="Y">
            <call-object-method method-name="trim" obj-field="parameters.productDetailName" ret-field="parameters.productDetailName"/>
            <call-object-method method-name="toUpperCase" obj-field="parameters.productDetailName" ret-field="productDetailNameUpCase"/>
	        <if-empty field="parameters.productDetailName">
	            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankProductNameError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="productDetailName" list="error_list"/>
	        <else>
            	<call-object-method method-name="length" obj-field="parameters.productDetailName" ret-field="productDetailNameLength"/>
		        <if-compare operator="greater" value="100" field="productDetailNameLength" type="Integer">
		        	<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="LongProductNameError"/>
            		<string-to-list string="${tempErrorMessage}" message-field="productDetailName" list="error_list"/>
                <else>
		            <set field="productNameUnique" value="true"/>
		            <entity-condition list="productList" entity-name="Product">
			            <condition-list combine="and">
			                <condition-expr field-name="productName" from-field="productDetailNameUpCase" ignore-case="true"/>
			                <condition-expr field-name="isVariant" value="N"/>
			            </condition-list>
			        </entity-condition>
		            <if-not-empty field="productList">
		                <iterate entry="product" list="productList">
		                    <if-compare-field operator="not-equals" field="product.productId" to-field="parameters.productId">
		                        <set field="productNameUnique" value="false"/>
		                    </if-compare-field>
		                </iterate>
		            </if-not-empty>
		            <if-compare operator="equals" value="true" field="productNameUnique">
		            	<set value="PRODUCT_NAME" field="productContentAndTextMap.productContentTypeId"/>
            			<find-by-and list="productContentAndTextList" map="productContentAndTextMap" entity-name="ProductContentAndText"/>
			            <if-not-empty field="productContentAndTextList">
			                <iterate entry="productContentAndText" list="productContentAndTextList">
			                	<set field="productTextDataName" from-field="productContentAndText.textData" type="String"/>
			                	<call-object-method obj-field="productTextDataName" method-name="toUpperCase" ret-field="productTextDataName"/>
			                	<if-compare-field operator="equals" field="productTextDataName" to-field="productDetailNameUpCase">
				                    <if-compare-field operator="not-equals" field="productContentAndText.productId" to-field="parameters.productId">
				                        <set field="findProductCtx.productId" from-field="productContentAndText.productId"/>
				                        <find-by-primary-key value-field="productByContent" map="findProductCtx" entity-name="Product"/>
				                        <if-compare operator="equals" field="productByContent.isVariant" value="N">
				                            <set field="productNameUnique" value="false"/>
				                        </if-compare>
				                    </if-compare-field>
			                    </if-compare-field>
			                </iterate>
			            </if-not-empty>
		            </if-compare>
		            <if-compare operator="equals" value="false" field="productNameUnique" type="String">
		                <set field="argListNames[]" from-field="parameters.productDetailName"/>
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="UniqueProductNameAdminError" arg-list-name="argListNames"/>
            		    <string-to-list string="${tempErrorMessage}" message-field="productDetailName" list="error_list"/>
            		    <clear-field field="argListNames"/>
		            </if-compare>
                </else>
		        </if-compare>
	        </else>
	        </if-empty>
	        <if-empty field="parameters.longDescription">
	            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankDetailFieldError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="longDescription" list="error_list"/>
	        </if-empty>
	        <if-empty field="parameters.listPrice">
	            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidProductListPriceError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="listPrice" list="error_list"/>
	            <else>
	                <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="checkFloatResult">
	                    <field field="parameters.listPrice"/>
	                </call-class-method>
	                <if-compare field="checkFloatResult" operator="equals" value="false" type="Boolean">
	                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductListPriceError"/>
	                    <string-to-list string="${tempErrorMessage}" message-field="listPrice" list="error_list"/>
	                </if-compare>
	            </else>
	        </if-empty>
	        <if-empty field="parameters.defaultPrice">
	            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidProductDefaultPriceError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="defaultPrice" list="error_list"/>
	            <else>
	                <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="checkFloatResult">
	                    <field field="parameters.defaultPrice"/>
	                </call-class-method>
	                <if-compare field="checkFloatResult" operator="equals" value="false" type="Boolean">
	                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductDefaultPriceError"/>
	                    <string-to-list string="${tempErrorMessage}" message-field="defaultPrice" list="error_list"/>
	                </if-compare>
	            </else>
	        </if-empty>
	        <if-not-empty field="parameters.recurringPrice">
	                <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="checkFloatResult">
	                    <field field="parameters.recurringPrice"/>
	                </call-class-method>
	                <if-compare field="checkFloatResult" operator="equals" value="false" type="Boolean">
	                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductRecurringPriceError"/>
	                    <string-to-list string="${tempErrorMessage}" message-field="recurringPrice" list="error_list"/>
	                </if-compare>
	        </if-not-empty>
	        
	        <if-not-empty field="parameters.productFeatureGroupIds">
		        <iterate-map key="productFeatureGroupIdKey" value="productFeatureGroupIdValue" map="parameters.productFeatureGroupIds">
		            <iterate-map key="productFeatureApplTypeIdKey" value="productFeatureApplTypeIdValue" map="parameters.productFeatureApplTypeIds">
		                <if-compare-field field="productFeatureGroupIdKey" to-field="productFeatureApplTypeIdKey" operator="equals">
		                    <!-- check if feature group is distinguish then feature id should be select -->
		                    <if-compare field="productFeatureApplTypeIdValue" operator="equals" value="DISTINGUISHING_FEAT">
		                    
		                            
		                        <iterate-map key="productFeatureIdKey" value="productFeatureIdValue" map="parameters.productFeatureIds">
		                            <if-compare-field field="productFeatureGroupIdKey" to-field="productFeatureIdKey" operator="equals">
		                                <iterate-map key="productFeatureKey" value="productFeatureValue" map="parameters.distinguishProductFeatureMulti">
		                                    <if-compare-field field="productFeatureKey" to-field="productFeatureGroupIdValue" operator="equals">
		                                        <if-empty field="productFeatureValue">
		                                            <if-empty field="productFeatureIdValue">
					                                    <entity-one entity-name="ProductFeatureGroup" value-field="productFeatureGroup">
					                                        <field-map field-name="productFeatureGroupId" from-field="productFeatureGroupIdValue"/>
					                                    </entity-one>
		                                                <clear-field field="argListNames"/>
					                                    <set field="argListNames[]" from-field="productFeatureGroup.description" default-value="productFeatureKey"/>
					                                    <property-to-field resource="OSafeAdminUiLabels" property="ProductFeatureRequiredError" field="tempErrorMessage" arg-list-name="argListNames"/>
					                                    <string-to-list string="${tempErrorMessage}" message-field="productFeatureGroupIds" list="error_list"/>
		                                			</if-empty>
		                                        </if-empty>
		                                    </if-compare-field>
		                                </iterate-map>
		                                
		                            </if-compare-field>
		                        </iterate-map>
		                    </if-compare>
		                </if-compare-field>
		            </iterate-map>
		        </iterate-map>
            </if-not-empty>
            
        </if-compare>
        <if-compare field="parameters.isVariant" operator="equals" value="Y">
	        <if-not-empty field="parameters.productDetailName">
            	<call-object-method method-name="length" obj-field="parameters.productDetailName" ret-field="productDetailNameLength"/>
		        <if-compare operator="greater" value="100" field="productDetailNameLength" type="Integer">
		        	<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="LongProductNameError"/>
            		<string-to-list string="${tempErrorMessage}" message-field="productDetailName" list="error_list"/>
		        </if-compare>
	        </if-not-empty>
            <if-not-empty field="parameters.variantListPrice">
	            <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="checkFloatResult">
	                <field field="parameters.variantListPrice"/>
	            </call-class-method>
	            <if-compare field="checkFloatResult" operator="equals" value="false" type="Boolean">
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductVariantListPriceError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="variantListPrice" list="error_list"/>
	            </if-compare>
	        </if-not-empty>
	        <if-not-empty field="parameters.variantSalePrice">
	            <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="checkFloatResult">
	                <field field="parameters.variantSalePrice"/>
	            </call-class-method>
	            <if-compare field="checkFloatResult" operator="equals" value="false" type="Boolean">
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductVariantSalePriceError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="variantSalePrice" list="error_list"/>
	            </if-compare>
	        </if-not-empty>
	        
	        
	        
	        <if-not-empty field="parameters.selectableProductFeature">
                <set field="blankInputFeatureFound" value="false" type="Boolean"/>
	            <iterate-map key="productFeatureKey" value="productFeatureValue" map="parameters.selectableProductFeature">
	                <if-empty field="productFeatureValue">
	                    <entity-one entity-name="ProductFeatureGroup" value-field="productFeatureGroup">
	                        <field-map field-name="productFeatureGroupId" from-field="productFeatureKey"/>
	                    </entity-one>
	                    <clear-field field="argListNames"/>
	                    <set field="argListNames[]" from-field="productFeatureGroup.description" default-value="productFeatureKey"/>
	                    <property-to-field resource="OSafeAdminUiLabels" property="ProductFeatureRequiredError" field="tempErrorMessage" arg-list-name="argListNames"/>
	                    <string-to-list string="${tempErrorMessage}" message-field="selectableProductFeature" list="error_list"/>
	                    <set field="blankInputFeatureFound" value="true"/>
	                </if-empty>
	            </iterate-map>
	            
                <set field="findProductCtx.productId" from-field="parameters.productId"/>
                <find-by-primary-key value-field="product" entity-name="Product" map="findProductCtx"/>
	            <call-class-method class-name="org.ofbiz.product.product.ProductWorker" method-name="getVariantVirtualId" ret-field="virtualProductId">
                    <field field="product" type="GenericValue"/>
                </call-class-method>
	           <!--  check existing varint with same selectable feature      -->
	           <if-compare field="blankInputFeatureFound" operator="equals" value="false" type="Boolean">
	                <set field="sameFeatureVariantFound" value="false" type="Boolean"/>
	                <set field="sameFeatureVariantFoundError" value=""/>
	                <set field="selectableFeatureCount" value="1" type="Integer"/>
	                <iterate-map key="productFeatureKey" value="productFeatureValue" map="parameters.selectableProductFeature">
	                     <!-- productFeature request parameter value contains "@" symbol
	                         between "productFeatureId" and "productFeatureApplTypeId".-->
	                    <call-bsh><![CDATA[
	                        if (productFeatureValue != null) {
	                           parameters.put("productFeatureId", productFeatureValue.substring(0, productFeatureValue.indexOf("@")));
	                           parameters.put("productFeatureApplTypeId", productFeatureValue.substring(productFeatureValue.indexOf("@")+1));
	                        }
	                    ]]></call-bsh>
	                    <!--   make virtual SELECTABLE_FEATURE ids list  -->
	                    <if-compare field="parameters.productFeatureApplTypeId" operator="equals" value="SELECTABLE_FEATURE" type="String">
	                        <set field="selectableFeatureIds[]" from-field="parameters.productFeatureId"/>
	                    </if-compare>
	                    <entity-one entity-name="ProductFeatureGroup" value-field="productFeatureGroup">
	                        <field-map field-name="productFeatureGroupId" from-field="productFeatureKey"/>
	                    </entity-one>
	                    <entity-one entity-name="ProductFeature" value-field="productFeature">
	                        <field-map field-name="productFeatureId" from-field="parameters.productFeatureId"/>
	                    </entity-one>
	                    <call-object-method method-name="size" obj-field="parameters.selectableProductFeature" ret-field="passedSelectableFeatureSize"/>
	                    <if-compare-field field="selectableFeatureCount" operator="less" to-field="passedSelectableFeatureSize" type="Integer">
	                        <string-append field="sameFeatureVariantFoundError" string="${productFeatureGroup.description} = ${productFeature.description} and " />
	                    <else>
	                        <string-append field="sameFeatureVariantFoundError" string="${productFeatureGroup.description} = ${productFeature.description}" />
	                    </else>
	                    </if-compare-field>
	                    <calculate field="selectableFeatureCount">
	                        <calcop operator="add" >
	                            <calcop operator="get" field="selectableFeatureCount"/>
	                            <number value="1"/>
	                        </calcop>
	                    </calculate>
	                </iterate-map>
	                <entity-and entity-name="ProductAssoc" list="productAssocList" filter-by-date="true">
	                    <field-map field-name="productId" from-field="virtualProductId"/>
	                    <field-map field-name="productAssocTypeId" value="PRODUCT_VARIANT"/>
	                </entity-and>
	                <if-validate-method field="productAssocList" method="isNotEmpty">
	                    <if-validate-method field="selectableFeatureIds" method="isNotEmpty">
	                        <iterate list="productAssocList" entry="productAssocVariant">
	                            <if-compare-field operator="not-equals" field="productAssocVariant.productIdTo" to-field="parameters.productId">
		                            <if-compare field="sameFeatureVariantFound" operator="equals" value="false" >
		                                <clear-field field="tempSelectableFeatureIds"/>
		                                <list-to-list to-list="tempSelectableFeatureIds" list="selectableFeatureIds"/>
		                                <entity-and entity-name="ProductFeatureAppl" list="productFeatureApplList">
		                                    <field-map field-name="productId" from-field="productAssocVariant.productIdTo"/>
		                                    <field-map field-name="productFeatureApplTypeId" value="STANDARD_FEATURE"/>
		                                </entity-and>
		                                <if-validate-method field="productFeatureApplList" method="isNotEmpty">
		                                    <iterate list="productFeatureApplList" entry="productFeatureApplVariant">
		                                        <call-bsh><![CDATA[
		                                            if (tempSelectableFeatureIds.contains(productFeatureApplVariant.getString("productFeatureId"))) {
		                                               tempSelectableFeatureIds.remove(productFeatureApplVariant.getString("productFeatureId"));
		                                            }
		                                        ]]></call-bsh>
		                                    </iterate>
		                                </if-validate-method>
		                                <call-object-method method-name="size" obj-field="tempSelectableFeatureIds" ret-field="reaminFeatureSize"/>
		                                <if-compare field="reaminFeatureSize" operator="equals" value="0" type="Integer">
		                                    <set field="sameFeatureVariantFound" value="true"/>
		                                </if-compare>
		                            </if-compare>
	                            </if-compare-field>
	                        </iterate>
	                    </if-validate-method>
	                </if-validate-method>
	                <if-compare field="sameFeatureVariantFound" operator="equals" value="true" type="Boolean">
	                    <clear-field field="argListNames"/>
	                    <set field="argListNames[]" from-field="sameFeatureVariantFoundError" set-if-null="true"/>
	                    <property-to-field resource="OSafeAdminUiLabels" property="SameVariantExistError" field="tempErrorMessage" arg-list-name="argListNames"/>
	                    <string-to-list string="${tempErrorMessage}"  message-field="productId" list="error_list"/>
	                </if-compare>
	           </if-compare>
            <else>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankProductFeturesError"/>
                <string-to-list string="${tempErrorMessage}" message-field="productId" list="error_list"/>
            </else>
            </if-not-empty>
        </if-compare>
        
        <if-not-empty field="parameters.internalName">
            <call-object-method method-name="length" obj-field="parameters.internalName" ret-field="internalNameLength"/>
		    <if-compare operator="greater" value="255" field="internalNameLength" type="Integer">
		       <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InternalNameExceedsLengthError"/>
               <string-to-list string="${tempErrorMessage}" message-field="internalName" list="error_list"/>
		    </if-compare>
        </if-not-empty>
        
        <if-not-empty field="parameters.introductionDate">
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isDateTime" ret-field="checkDateValidResult">
                <field field="parameters.introductionDate"/>
                <field field="parameters.entryDateTimeFormat"/>
            </call-class-method>
            <if-compare field="checkDateValidResult" operator="equals" value="false" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidProductIntroDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="introductionDate" list="error_list"/>
                <else>
                    <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="toTimestamp" ret-field="parameters.introductionDate">
                        <field field="parameters.introductionDate"/>
                        <field field="parameters.entryDateTimeFormat"/>
                    </call-class-method>
                </else>
            </if-compare>
        </if-not-empty>
        
        <if-not-empty field="parameters.salesDiscontinuationDate">
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isDateTime" ret-field="checkDateValidResult">
                <field field="parameters.salesDiscontinuationDate"/>
                <field field="parameters.entryDateTimeFormat"/>
            </call-class-method>
            <if-compare field="checkDateValidResult" operator="equals" value="false" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidProductDiscontDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="salesDiscontinuationDate" list="error_list"/>
                <else>
                    <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="toTimestamp" ret-field="parameters.salesDiscontinuationDate">
                        <field field="parameters.salesDiscontinuationDate"/>
                        <field field="parameters.entryDateTimeFormat"/>
                    </call-class-method>
                </else>
            </if-compare>
        </if-not-empty>
        
        <if-not-empty field="parameters.introductionDate">
        	<if-not-empty field="parameters.salesDiscontinuationDate">
        		<if-compare-field field="parameters.introductionDate" operator="greater" to-field="parameters.salesDiscontinuationDate" type="Timestamp">
		            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductIntroDiscCompareError"/>
		            <string-to-list string="${tempErrorMessage}" message-field="introductionDate" list="error_list"/>
		        </if-compare-field>
        	</if-not-empty>
        </if-not-empty>
        
        <set field="bfTotalInventory" from-field="parameters.bfTotalInventory" default-value="0"/>
        <set field="bfWHInventory" from-field="parameters.bfWHInventory" default-value="0"/>
        
        <if-not-empty field="bfTotalInventory"> 
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isSignedInteger" ret-field="bfTotalInventoryVaild">
               <string value="${bfTotalInventory}"></string>
            </call-class-method>
            <if-compare operator="equals" value="false" field="bfTotalInventoryVaild" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidBFTotalInventoryError"/>
                <string-to-list string="${tempErrorMessage}" message-field="bfTotalInventory" list="error_list"/>
            <else>
                <if>
                    <condition>
                    <and>
                        <if-compare operator="greater-equals" value="-9999" field="bfTotalInventory" type="Long"/>
                        <if-compare operator="less-equals" value="99999" field="bfTotalInventory" type="Long"/>
                    </and>
                    </condition>
                <then>
                </then>
                <else>
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidBFTotalInventoryError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="bfTotalInventory" list="error_list"/>
                </else>
                </if>
            </else>
            </if-compare>
        </if-not-empty>
        
        <if-not-empty field="bfWHInventory"> 
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isSignedInteger" ret-field="bfWHInventoryVaild">
               <string value="${bfWHInventory}"></string>
            </call-class-method>
            <if-compare operator="equals" value="false" field="bfWHInventoryVaild" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidBFWHInventoryError"/>
                <string-to-list string="${tempErrorMessage}" message-field="bfWHInventory" list="error_list"/>
            <else>
                <if>
                    <condition>
                    <and>
                        <if-compare operator="greater-equals" value="-9999" field="bfWHInventory" type="Long"/>
                        <if-compare operator="less-equals" value="99999" field="bfWHInventory" type="Long"/>
                    </and>
                    </condition>
                <then>
                </then>
                <else>
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidBFWHInventoryError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="bfWHInventory" list="error_list"/>
                </else>
                </if>
            </else>
            </if-compare>
        </if-not-empty>
        
        <set field="productHeight" from-field="parameters.productHeight" />
        <if-not-empty field="productHeight">
             <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isFloat" ret-field="heightVaild">
                <field field="productHeight"/>
             </call-class-method>
             <if-compare operator="equals" value="false" field="heightVaild" type="Boolean">
               <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidHeightError"/>
               <string-to-list string="${tempErrorMessage}" message-field="productHeight" list="error_list"/>
             </if-compare>
        </if-not-empty>
        <set field="productWidth" from-field="parameters.productWidth" />
        <if-not-empty field="productWidth">
             <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isFloat" ret-field="widthVaild">
                <field field="productWidth"/>
             </call-class-method>
             <if-compare operator="equals" value="false" field="widthVaild" type="Boolean">
               <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidWidthError"/>
               <string-to-list string="${tempErrorMessage}" message-field="productWidth" list="error_list"/>
             </if-compare>
        </if-not-empty>
        <set field="productDepth" from-field="parameters.productDepth" />
        <if-not-empty field="productDepth">
             <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isFloat" ret-field="depthVaild">
                <field field="productDepth"/>
             </call-class-method>
             <if-compare operator="equals" value="false" field="depthVaild" type="Boolean">
               <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidDepthError"/>
               <string-to-list string="${tempErrorMessage}" message-field="productDepth" list="error_list"/>
             </if-compare>
        </if-not-empty>
        <set field="weight" from-field="parameters.weight" />
        <if-not-empty field="weight">
             <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isFloat" ret-field="weightVaild">
                <field field="weight"/>
             </call-class-method>
             <if-compare operator="equals" value="false" field="weightVaild" type="Boolean">
               <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidWeightError"/>
               <string-to-list string="${tempErrorMessage}" message-field="weight" list="error_list"/>
             </if-compare>
        </if-not-empty>
        
        <set field="pdpQuantityMinMaxSetCount" value="0" type="Integer"/>
        <if-not-empty field="parameters.pdpQuantityMin">
        	<call-class-method class-name="com.osafe.util.OsafeAdminUtil" method-name="isNumber" ret-field="isNumber">
	            <field field="parameters.pdpQuantityMin"/>
	        </call-class-method>
	        <if-compare field="isNumber" operator="equals" value="false">
	            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidPdpQtyMinError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="pdpQuantityMin" list="error_list"/>
		        <else>
		        	<if-compare field="parameters.pdpQuantityMin" operator="greater" value="0" type="Long">
		        		<set field="pdpQuantityMinSet" value="Y"/>
		        		<calculate field="pdpQuantityMinMaxSetCount">
		        			<calcop operator="add" >
		        				<calcop operator="get" field="pdpQuantityMinMaxSetCount"/>
               					<number value="1"/>
		        			</calcop>
		        		</calculate>
		        		<else>
		        			<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="PdpQtyMinGreaterThanZeroError"/>
	            			<string-to-list string="${tempErrorMessage}" message-field="pdpQuantityMin" list="error_list"/>
		        		</else>
		        	</if-compare>
		        </else>
	        </if-compare>
        </if-not-empty>
        
        <if-not-empty field="parameters.pdpQuantityMax">
        	<call-class-method class-name="com.osafe.util.OsafeAdminUtil" method-name="isNumber" ret-field="isNumber">
	            <field field="parameters.pdpQuantityMax"/>
	        </call-class-method>
	        <if-compare field="isNumber" operator="equals" value="false">
	            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidPdpQtyMaxError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="pdpQuantityMax" list="error_list"/>
	            <else>
	            	<calculate field="pdpQuantityMinMaxSetCount">
	        			<calcop operator="add" >
	        				<calcop operator="get" field="pdpQuantityMinMaxSetCount"/>
              				<number value="1"/>
	        			</calcop>
	        		</calculate>
	            </else>
	        </if-compare>
        </if-not-empty>
        
        <if-compare field="pdpQuantityMinMaxSetCount" operator="greater" value="0" type="Integer">
        	<if-compare field="pdpQuantityMinMaxSetCount" operator="equals" value="1" type="Integer">
        		<!-- if only one is entered -->
        		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BothSetPdpQtyMinMaxError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="pdpQuantityMax" list="error_list"/>
	            <else>
	            	<if-compare field="pdpQuantityMinMaxSetCount" operator="equals" value="2" type="Integer">
	            		<!-- if both are entered -->
	            		<if-compare-field field="parameters.pdpQuantityMax" operator="greater-equals" to-field="parameters.pdpQuantityMin" type="Integer">
	            			<!-- both min and max are set and they both passed validation pdpQuantityMinMaxSetCount = 3 -->
			            	<calculate field="pdpQuantityMinMaxSetCount">
			        			<calcop operator="add" >
			        				<calcop operator="get" field="pdpQuantityMinMaxSetCount"/>
		              				<number value="1"/>
			        			</calcop>
			        		</calculate>
	            			<else>
	            				<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="PdpQtyMaxNotGreaterThanMinError"/>
	           					 <string-to-list string="${tempErrorMessage}" message-field="pdpQuantityMax" list="error_list"/>
	            			</else>
        				</if-compare-field>
	            	</if-compare>
	            </else>
        	</if-compare>
		</if-compare>
		
		<if-not-empty field="parameters.pdpQuantityDefault">
			<call-class-method class-name="com.osafe.util.OsafeAdminUtil" method-name="isNumber" ret-field="isNumber">
	            <field field="parameters.pdpQuantityDefault"/>
	        </call-class-method>
	        <if-compare field="isNumber" operator="equals"  value="false">
	            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidPdpQtyDefaultError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="pdpQuantityDefault" list="error_list"/>
	            <else>
	            	<if-compare field="pdpQuantityMinMaxSetCount" operator="equals" value="3" type="Integer">
	            		<if-compare-field field="parameters.pdpQuantityDefault" operator="greater"  to-field="parameters.pdpQuantityMax" type="Integer">
	            			<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="PdpQtyDefaultWithinMinMaxError"/>
	           				<string-to-list string="${tempErrorMessage}" message-field="pdpQuantityDefault" list="error_list"/>
	           				<else>
	           					<if-compare-field field="parameters.pdpQuantityDefault" operator="less" to-field="parameters.pdpQuantityMin" type="Integer">
	           						<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="PdpQtyDefaultWithinMinMaxError"/>
	           						<string-to-list string="${tempErrorMessage}" message-field="pdpQuantityDefault" list="error_list"/>
	           					</if-compare-field>
	           				</else>
	            		</if-compare-field>
	            	</if-compare>
	            </else>
	        </if-compare>
		</if-not-empty>

                
        <check-errors/>
        
        <set-service-fields service-name="updateProduct" map="parameters" to-map="updateProductCtx"/>
        <set field="updateProductCtx.productName" from-field="parameters.productDetailName"/>
        <if-compare field="parameters.isVariant" operator="equals" value="Y">
           <if-empty field="parameters.productDetailName">
             <set field="updateProductCtx.productName" from-field="parameters.productDetailName" type="String" set-if-null="true" />
           </if-empty>
        </if-compare>
        <call-service service-name="updateProduct" in-map-name="updateProductCtx"/>
        
        <if-not-empty field="parameters.defaultPrice">
        	<set field="createUpdateProdPriceCtx.productId" from-field="parameters.productId"/>
            <set field="createUpdateProdPriceCtx.newPrice" from-field="parameters.defaultPrice" type="BigDecimal"/>
            <set field="createUpdateProdPriceCtx.productPriceTypeId" value="DEFAULT_PRICE"/>
            <set field="createUpdateProdPriceCtx.isVariant" from-field="parameters.isVariant"/>
            <set field="createUpdateProdPriceCtx.currencyUomId" from-field="parameters.currencyUomId"/>
            <set field="createUpdateProdPriceCtx.productPricePurposeId" value="PURCHASE"/>
            <set field="createUpdateProdPriceCtx.productStoreGroupId" value="_NA_"/>
            <call-service service-name="createUpdateProdPrice" in-map-name="createUpdateProdPriceCtx"/>
        </if-not-empty>
        <if-not-empty field="parameters.listPrice">
        	<set field="createUpdateProdPriceCtx.productId" from-field="parameters.productId"/>
            <set field="createUpdateProdPriceCtx.newPrice" from-field="parameters.listPrice" type="BigDecimal"/>
            <set field="createUpdateProdPriceCtx.productPriceTypeId" value="LIST_PRICE"/>
            <set field="createUpdateProdPriceCtx.isVariant" from-field="parameters.isVariant"/>
            <set field="createUpdateProdPriceCtx.currencyUomId" from-field="parameters.currencyUomId"/>
            <set field="createUpdateProdPriceCtx.productPricePurposeId" value="PURCHASE"/>
            <set field="createUpdateProdPriceCtx.productStoreGroupId" value="_NA_"/>
            <call-service service-name="createUpdateProdPrice" in-map-name="createUpdateProdPriceCtx"/>
        </if-not-empty>
        
        <if-not-empty field="parameters.recurringPrice">
        	<set field="createUpdateProdPriceCtx.productId" from-field="parameters.productId"/>
            <set field="createUpdateProdPriceCtx.newPrice" from-field="parameters.recurringPrice" type="BigDecimal"/>
            <set field="createUpdateProdPriceCtx.productPriceTypeId" value="DEFAULT_PRICE"/>
            <set field="createUpdateProdPriceCtx.isVariant" from-field="parameters.isVariant"/>
            <set field="createUpdateProdPriceCtx.currencyUomId" from-field="parameters.currencyUomId"/>
            <set field="createUpdateProdPriceCtx.productPricePurposeId" value="RECURRING_CHARGE"/>
            <set field="createUpdateProdPriceCtx.productStoreGroupId" value="_NA_"/>
            <call-service service-name="createUpdateProdPrice" in-map-name="createUpdateProdPriceCtx"/>
        <else>
        		<entity-and entity-name="ProductPrice" list="productPriceList" filter-by-date="true">
	                <field-map field-name="productId" from-field="parameters.productId"/>
	                <field-map field-name="productPriceTypeId" value="DEFAULT_PRICE"/>
	                <field-map field-name="productPricePurposeId" value="RECURRING_CHARGE"/>
		            <field-map field-name="currencyUomId" from-field="parameters.currencyUomId"/>
		            <field-map field-name="productStoreGroupId" value="_NA_"/>
	                <order-by field-name="-fromDate"/>
	            </entity-and>
	            <if-not-empty field="productPriceList">
	            	<first-from-list entry="productPrice" list="productPriceList"/>
            		<set field="deleteProductVariantListPriceCtx.productId" from-field="productPrice.productId"/>
	                <set field="deleteProductVariantListPriceCtx.productPriceTypeId" from-field="productPrice.productPriceTypeId"/>
	                <set field="deleteProductVariantListPriceCtx.productPricePurposeId" from-field="productPrice.productPricePurposeId"/>
	                <set field="deleteProductVariantListPriceCtx.currencyUomId" from-field="productPrice.currencyUomId"/>
	                <set field="deleteProductVariantListPriceCtx.productStoreGroupId" from-field="productPrice.productStoreGroupId"/>
	                <set field="deleteProductVariantListPriceCtx.fromDate" from-field="productPrice.fromDate" type="Timestamp"/>
	                <call-service service-name="deleteProductPrice" in-map-name="deleteProductVariantListPriceCtx"/>
	            </if-not-empty>
        </else>
        </if-not-empty>

        <if-compare field="parameters.isVariant" operator="equals" value="Y">
        	<set field="createUpdateProdPriceCtx.productId" from-field="parameters.productId"/>
            <set field="createUpdateProdPriceCtx.newPrice" from-field="parameters.variantListPrice" type="BigDecimal"/>
            <set field="createUpdateProdPriceCtx.productPriceTypeId" value="LIST_PRICE"/>
            <set field="createUpdateProdPriceCtx.isVariant" from-field="parameters.isVariant"/>
            <set field="createUpdateProdPriceCtx.currencyUomId" from-field="parameters.currencyUomId"/>
            <set field="createUpdateProdPriceCtx.productPricePurposeId" value="PURCHASE"/>
            <set field="createUpdateProdPriceCtx.productStoreGroupId" value="_NA_"/>
            <call-service service-name="createUpdateProdPrice" in-map-name="createUpdateProdPriceCtx"/>
            
            <set field="createUpdateProdPriceCtx.productId" from-field="parameters.productId"/>
            <set field="createUpdateProdPriceCtx.newPrice" from-field="parameters.variantSalePrice" type="BigDecimal"/>
            <set field="createUpdateProdPriceCtx.productPriceTypeId" value="DEFAULT_PRICE"/>
            <set field="createUpdateProdPriceCtx.isVariant" from-field="parameters.isVariant"/>
            <set field="createUpdateProdPriceCtx.currencyUomId" from-field="parameters.currencyUomId"/>
            <set field="createUpdateProdPriceCtx.productPricePurposeId" value="PURCHASE"/>
            <set field="createUpdateProdPriceCtx.productStoreGroupId" value="_NA_"/>
            <call-service service-name="createUpdateProdPrice" in-map-name="createUpdateProdPriceCtx"/>
        </if-compare>
           
        <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
        <set field="manageProductAttributeCtx.attrName" value="BF_INVENTORY_TOT"/>
        <set field="manageProductAttributeCtx.attrValue" from-field="bfTotalInventory"/>
        <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
        <clear-field field="manageProductAttributeCtx"/>
        
        <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
        <set field="manageProductAttributeCtx.attrName" value="BF_INVENTORY_WHS"/>
        <set field="manageProductAttributeCtx.attrValue" from-field="bfWHInventory"/>
        <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
        <clear-field field="manageProductAttributeCtx"/>
        
        <if-not-empty field="parameters.pdpInStoreOnly">
            <set field="pdpInStoreOnly" from-field="parameters.pdpInStoreOnly"/>
        <else>
            <set field="pdpInStoreOnly" value="N"/>
        </else>
        </if-not-empty>
        <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
        <set field="manageProductAttributeCtx.attrName" value="PDP_IN_STORE_ONLY"/>
        <set field="manageProductAttributeCtx.attrValue" from-field="pdpInStoreOnly"/>
        <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
        <clear-field field="manageProductAttributeCtx"/>
        
        <if-compare field="parameters.isVirtual" operator="equals" value="Y">
            <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
            <set field="manageProductAttributeCtx.attrName" value="PDP_SELECT_MULTI_VARIANT"/>
            <set field="manageProductAttributeCtx.attrValue" from-field="parameters.multiSelectVariant"/>
            <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
            <clear-field field="manageProductAttributeCtx"/>
        <else>
            <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
            <set field="manageProductAttributeCtx.attrName" value="CHECKOUT_GIFT_MESSAGE"/>
            <set field="manageProductAttributeCtx.attrValue" from-field="parameters.checkoutGiftMessage"/>
            <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
            <clear-field field="manageProductAttributeCtx"/>
            
            <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
            <set field="manageProductAttributeCtx.attrName" value="PDP_QTY_MIN"/>
            <set field="manageProductAttributeCtx.attrValue" from-field="parameters.pdpQuantityMin"/>
            <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
            <clear-field field="manageProductAttributeCtx"/>
            <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
            <set field="manageProductAttributeCtx.attrName" value="PDP_QTY_MAX"/>
            <set field="manageProductAttributeCtx.attrValue" from-field="parameters.pdpQuantityMax"/>
            <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
            <clear-field field="manageProductAttributeCtx"/>
            <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
            <set field="manageProductAttributeCtx.attrName" value="PDP_QTY_DEFAULT"/>
            <set field="manageProductAttributeCtx.attrValue" from-field="parameters.pdpQuantityDefault"/>
            <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
            <clear-field field="manageProductAttributeCtx"/>
        </else>
        </if-compare>
        
        <!--  Update Product Feature -->
        <entity-one value-field="product" entity-name="Product">
            <field-map field-name="productId" from-field="parameters.productId"/>
        </entity-one>
        
        <now-timestamp field="nowStamp"/>
        <get-related relation-name="ProductFeatureAppl" list="productFeatureApplList" value-field="product"/>
        
        <set field="andMap.productFeatureApplTypeId" value="STANDARD_FEATURE"/>
        <filter-list-by-and list="productFeatureApplList" map="andMap" to-list="productStandardFeatureApplList"/>
        <filter-list-by-date list="productStandardFeatureApplList" to-list="productStandardFeatureApplList"/>
        
        <set field="andMap.productFeatureApplTypeId" value="DISTINGUISHING_FEAT"/>
        <filter-list-by-and list="productFeatureApplList" map="andMap" to-list="productDisFeatureApplList"/>
        <filter-list-by-date list="productDisFeatureApplList" to-list="productDisFeatureApplList"/>
        
        <if-compare field="parameters.isVariant" operator="not-equals" value="Y">
            <iterate entry="productDisFeatureAppl" list="productDisFeatureApplList">
                <set field="removeProductFeatureApplCtx.productId" from-field="productDisFeatureAppl.productId"/>
                <set field="removeProductFeatureApplCtx.productFeatureId" from-field="productDisFeatureAppl.productFeatureId"/>
                <set field="removeProductFeatureApplCtx.fromDate" from-field="productDisFeatureAppl.fromDate"/>
                <call-service service-name="removeProductFeatureAppl" in-map-name="removeProductFeatureApplCtx"/>
            </iterate>
            
	        <iterate-map key="productFeatureGroupIdKey" value="productFeatureGroupIdValue" map="parameters.productFeatureGroupIds">
	            <iterate-map key="productFeatureApplTypeIdKey" value="productFeatureApplTypeIdValue" map="parameters.productFeatureApplTypeIds">
	                <if-compare-field field="productFeatureGroupIdKey" to-field="productFeatureApplTypeIdKey" operator="equals">
	                    <!-- check if feature group is distinguish then feature id should be select -->
	                    <if-compare field="productFeatureApplTypeIdValue" operator="equals" value="DISTINGUISHING_FEAT">
	                        <iterate-map key="productFeatureIdKey" value="productFeatureIdValue" map="parameters.productFeatureIds">
	                            <if-compare-field field="productFeatureGroupIdKey" to-field="productFeatureIdKey" operator="equals">
	                                <if-not-empty field="productFeatureIdValue">
					                    <set field="createVirtualProductFeatureApplCtx.productId" from-field="parameters.productId"/>
	                                    <set field="createVirtualProductFeatureApplCtx.productFeatureId" from-field="productFeatureIdValue"/>
	                                    <set field="createVirtualProductFeatureApplCtx.productFeatureApplTypeId" value="DISTINGUISHING_FEAT"/>
	                                    <set field="createVirtualProductFeatureApplCtx.fromDate" from-field="nowStamp" type="Timestamp"/>
					                    <call-service service-name="createProductFeatureAppl" in-map-name="createVirtualProductFeatureApplCtx"/>
	                                </if-not-empty>
	                            </if-compare-field>
	                        </iterate-map>
	                        
	                        <!-- SET MULTIPLE DESCRIPTIVE FEATURE  -->
	                        
	                        <iterate-map key="productFeatureKey" value="productFeatureValue" map="parameters.distinguishProductFeatureMulti">
	                            <if-compare-field field="productFeatureKey" to-field="productFeatureGroupIdValue" operator="equals">
						            <if-not-empty field="productFeatureValue">
						                <call-class-method class-name="org.ofbiz.base.util.StringUtil" method-name="split" ret-field="productFeatureValueList">
					                        <field field="productFeatureValue" type="String"/>
					                        <string value="," />
					                    </call-class-method>
					                    <iterate entry="productFeatureValue" list="productFeatureValueList">
						                 <!-- productFeature request parameter value contains "@" symbol
						                     between "productFeatureId" and "productFeatureApplTypeId".-->
							                <call-bsh><![CDATA[
							                    if (productFeatureValue != null) {
							                       parameters.put("productFeatureId", productFeatureValue.substring(0, productFeatureValue.indexOf("@")));
							                       parameters.put("productFeatureApplTypeId", productFeatureValue.substring(productFeatureValue.indexOf("@")+1));
							                    }
							                ]]></call-bsh>
							                
							                <set field="createVirtualProductFeatureApplCtx.productId" from-field="parameters.productId"/>
		                                    <set field="createVirtualProductFeatureApplCtx.productFeatureId" from-field="parameters.productFeatureId"/>
		                                    <set field="createVirtualProductFeatureApplCtx.productFeatureApplTypeId" value="DISTINGUISHING_FEAT"/>
		                                    <set field="createVirtualProductFeatureApplCtx.fromDate" from-field="nowStamp" type="Timestamp"/>
						                    <call-service service-name="createProductFeatureAppl" in-map-name="createVirtualProductFeatureApplCtx"/>
							                
							            </iterate>
						            </if-not-empty>
						        </if-compare-field>
	                        </iterate-map>
	                    <else>
	                        <if-compare field="parameters.isVirtual" operator="equals" value="Y">
		                        <!-- check if feature group is selectable  -->
			                    <if-compare field="productFeatureApplTypeIdValue" operator="equals" value="SELECTABLE_FEATURE">
			                        <entity-and list="productFeatureGroupApplList" entity-name="ProductFeatureGroupAppl" filter-by-date="true">
			                            <field-map field-name="productFeatureGroupId" from-field="productFeatureGroupIdValue"/>
			                            <order-by field-name="sequenceNum"/>
			                        </entity-and>
			                        <if-not-empty field="productFeatureGroupApplList">
			                            <first-from-list entry="productFeatureGroupAppl" list="productFeatureGroupApplList"/>
			                            <set field="createVirtualProductFeatureApplCtx.productId" from-field="parameters.productId"/>
			                            <set field="createVirtualProductFeatureApplCtx.productFeatureId" from-field="productFeatureGroupAppl.productFeatureId"/>
			                            <set field="createVirtualProductFeatureApplCtx.productFeatureApplTypeId" value="SELECTABLE_FEATURE"/>
			                            <set field="createVirtualProductFeatureApplCtx.fromDate" from-field="nowStamp"/>
			                            <call-service service-name="createProductFeatureAppl" in-map-name="createVirtualProductFeatureApplCtx"/>
			                        </if-not-empty>
			                    </if-compare>
	                        </if-compare>
	                    </else>
	                    </if-compare>
	                </if-compare-field>
	            </iterate-map>
	        </iterate-map>
	    <else>
	        <iterate entry="productStandardFeatureAppl" list="productStandardFeatureApplList">
                <set field="removeProductFeatureApplCtx.productId" from-field="productStandardFeatureAppl.productId"/>
                <set field="removeProductFeatureApplCtx.productFeatureId" from-field="productStandardFeatureAppl.productFeatureId"/>
                <set field="removeProductFeatureApplCtx.fromDate" from-field="productStandardFeatureAppl.fromDate"/>
                <call-service service-name="removeProductFeatureAppl" in-map-name="removeProductFeatureApplCtx"/>
            </iterate>
	        <iterate entry="productDisFeatureAppl" list="productDisFeatureApplList">
                <set field="removeProductFeatureApplCtx.productId" from-field="productDisFeatureAppl.productId"/>
                <set field="removeProductFeatureApplCtx.productFeatureId" from-field="productDisFeatureAppl.productFeatureId"/>
                <set field="removeProductFeatureApplCtx.fromDate" from-field="productDisFeatureAppl.fromDate"/>
                <call-service service-name="removeProductFeatureAppl" in-map-name="removeProductFeatureApplCtx"/>
            </iterate>
            
            <call-class-method class-name="org.ofbiz.product.product.ProductWorker" method-name="getVariantVirtualId" ret-field="virtualProductId">
                <field field="product" type="GenericValue"/>
            </call-class-method>
            
            <!-- create Product Feature Appl-->
	        <iterate-map key="productFeatureKey" value="productFeatureValue" map="parameters.selectableProductFeature">
	            <if-not-empty field="productFeatureValue">
	                 <!-- productFeature request parameter value contains "@" symbol
	                     between "productFeatureId" and "productFeatureApplTypeId".-->
	                <call-bsh><![CDATA[
	                    if (productFeatureValue != null) {
	                       parameters.put("productFeatureId", productFeatureValue.substring(0, productFeatureValue.indexOf("@")));
	                       parameters.put("productFeatureApplTypeId", productFeatureValue.substring(productFeatureValue.indexOf("@")+1));
	                    }
	                ]]></call-bsh>
	                <!--   make virtual product associtation if not exist  -->
	                <entity-and entity-name="ProductFeatureAppl" list="productFeatureApplList" filter-by-date="true">
	                    <field-map field-name="productFeatureId" from-field="parameters.productFeatureId"/>
	                    <field-map field-name="productId" from-field="virtualProductId"/>
	                    <field-map field-name="productFeatureApplTypeId" from-field="parameters.productFeatureApplTypeId"/>
	                </entity-and>
	                <if-empty field="productFeatureApplList">
		                <set-service-fields service-name="createProductFeatureAppl" map="parameters" to-map="createVirtualProductFeatureApplCtx"/>
		                <set field="createVirtualProductFeatureApplCtx.productId" from-field="virtualProductId"/>
		                <set field="createVirtualProductFeatureApplCtx.fromDate" from-field="nowStamp"/>
		                <call-service service-name="createProductFeatureAppl" in-map-name="createVirtualProductFeatureApplCtx"/>
	                </if-empty>
	                <!--   make virtual SELECTABLE_FEATURE to variant STANDARD_FEATURE  -->
	                <if-compare field="parameters.productFeatureApplTypeId" operator="equals" value="SELECTABLE_FEATURE" type="String">
	                    <set field="parameters.productFeatureApplTypeId" value="STANDARD_FEATURE"/>
	                </if-compare>
	                <set-service-fields service-name="createProductFeatureAppl" map="parameters" to-map="createProductFeatureApplCtx"/>
	                <set field="createProductFeatureApplCtx.productId" from-field="parameters.productId"/>
	                <set field="createProductFeatureApplCtx.fromDate" from-field="nowStamp"/>
	                <call-service service-name="createProductFeatureAppl" in-map-name="createProductFeatureApplCtx"/>
	            </if-not-empty>
	        </iterate-map>
	        
	        <iterate-map key="productFeatureKey" value="productFeatureValue" map="parameters.distinguishProductFeature">
	            <if-not-empty field="productFeatureValue">
	                 <!-- productFeature request parameter value contains "@" symbol
	                     between "productFeatureId" and "productFeatureApplTypeId".-->
		                <call-bsh><![CDATA[
		                    if (productFeatureValue != null) {
		                       parameters.put("productFeatureId", productFeatureValue.substring(0, productFeatureValue.indexOf("@")));
		                       parameters.put("productFeatureApplTypeId", productFeatureValue.substring(productFeatureValue.indexOf("@")+1));
		                    }
		                ]]></call-bsh>
		                <!--   make virtual product associtation if not exist  -->
		                <entity-and entity-name="ProductFeatureAppl" list="productFeatureApplList" filter-by-date="true">
		                    <field-map field-name="productFeatureId" from-field="parameters.productFeatureId"/>
		                    <field-map field-name="productId" from-field="virtualProductId"/>
		                    <field-map field-name="productFeatureApplTypeId" from-field="parameters.productFeatureApplTypeId"/>
		                </entity-and>
		                <if-empty field="productFeatureApplList">
		                    <set-service-fields service-name="createProductFeatureAppl" map="parameters" to-map="createVirtualProductFeatureApplCtx"/>
		                    <set field="createVirtualProductFeatureApplCtx.productId" from-field="virtualProductId"/>
		                    <set field="createVirtualProductFeatureApplCtx.fromDate" from-field="nowStamp"/>
		                    <call-service service-name="createProductFeatureAppl" in-map-name="createVirtualProductFeatureApplCtx"/>
		                </if-empty>
		                <set-service-fields service-name="createProductFeatureAppl" map="parameters" to-map="createProductFeatureApplCtx"/>
		                <set field="createProductFeatureApplCtx.productId" from-field="parameters.productId"/>
		                <set field="createProductFeatureApplCtx.fromDate" from-field="nowStamp"/>
		                <call-service service-name="createProductFeatureAppl" in-map-name="createProductFeatureApplCtx"/>
	            </if-not-empty>
	        </iterate-map>
	        
	        <!-- SET MULTIPLE DESCRIPTIVE FEATURE  -->
	        <iterate-map key="productFeatureKey" value="productFeatureValue" map="parameters.distinguishProductFeatureMulti">
	            <if-not-empty field="productFeatureValue">
	                <call-class-method class-name="org.ofbiz.base.util.StringUtil" method-name="split" ret-field="productFeatureValueList">
                        <field field="productFeatureValue" type="String"/>
                        <string value="," />
                    </call-class-method>
                    <iterate entry="productFeatureValue" list="productFeatureValueList">
	                 <!-- productFeature request parameter value contains "@" symbol
	                     between "productFeatureId" and "productFeatureApplTypeId".-->
		                <call-bsh><![CDATA[
		                    if (productFeatureValue != null) {
		                       parameters.put("productFeatureId", productFeatureValue.substring(0, productFeatureValue.indexOf("@")));
		                       parameters.put("productFeatureApplTypeId", productFeatureValue.substring(productFeatureValue.indexOf("@")+1));
		                    }
		                ]]></call-bsh>
		                <!--   make virtual product associtation if not exist  -->
		                <entity-and entity-name="ProductFeatureAppl" list="productFeatureApplList" filter-by-date="true">
		                    <field-map field-name="productFeatureId" from-field="parameters.productFeatureId"/>
		                    <field-map field-name="productId" from-field="virtualProductId"/>
		                    <field-map field-name="productFeatureApplTypeId" from-field="parameters.productFeatureApplTypeId"/>
		                </entity-and>
		                <if-empty field="productFeatureApplList">
		                    <set-service-fields service-name="createProductFeatureAppl" map="parameters" to-map="createVirtualProductFeatureApplCtx"/>
		                    <set field="createVirtualProductFeatureApplCtx.productId" from-field="virtualProductId"/>
		                    <set field="createVirtualProductFeatureApplCtx.fromDate" from-field="nowStamp"/>
		                    <call-service service-name="createProductFeatureAppl" in-map-name="createVirtualProductFeatureApplCtx"/>
		                </if-empty>
		                <set-service-fields service-name="createProductFeatureAppl" map="parameters" to-map="createProductFeatureApplCtx"/>
		                <set field="createProductFeatureApplCtx.productId" from-field="parameters.productId"/>
		                <set field="createProductFeatureApplCtx.fromDate" from-field="nowStamp"/>
		                <call-service service-name="createProductFeatureAppl" in-map-name="createProductFeatureApplCtx"/>
		            </iterate>
	            </if-not-empty>
	        </iterate-map>
	    </else>
	    </if-compare>
	    
	    
	    
	    <set field="argListNames[]" from-field="parameters.productId"/>
	    <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="htmlSpecialChars" ret-field="productDetailNamehtml">
            <field field="parameters.productDetailName"/>
        </call-class-method>
	    <set field="argListNames[]" from-field="productDetailNamehtml"/>
        <property-to-field resource="OSafeAdminUiLabels" property="ProductSavedSuccess" field="productSavedSuccess" arg-list-name="argListNames"/>
        <string-to-list string="${productSavedSuccess}" list="successMessageList"/>
        
        <!-- if this is a Variant, check if the Virtual product's Variants are all NOT sellable -->
        <if-compare field="parameters.isVariant" operator="equals" value="Y">  
        	<call-class-method class-name="org.ofbiz.product.product.ProductWorker" method-name="getParentProduct" ret-field="parentVirtualProduct">
	            <field field="parameters.productId" type="String"/>
	            <field field="delegator" type="org.ofbiz.entity.Delegator"/>
	        </call-class-method>
	        <entity-and entity-name="ProductAssoc" list="productVariantList" filter-by-date="true">
	            <field-map field-name="productId" from-field="parentVirtualProduct.productId"/>
	            <field-map field-name="productAssocTypeId" value="PRODUCT_VARIANT"/>
	        </entity-and>
	        <set field="variantsSellable" value="false"/>
	        <iterate entry="productVariant" list="productVariantList">
	            <call-class-method class-name="org.ofbiz.product.product.ProductWorker" method-name="isSellable" ret-field="prodIsSellable">
					<field field="delegator" type="org.ofbiz.entity.Delegator"/>
		            <field field="productVariant.productIdTo" type="String"/>
		        </call-class-method> 
		        <if-compare operator="equals" value="true" field="prodIsSellable">
		        	<set field="variantsSellable" value="true"/>
		        </if-compare>
	        </iterate>
	        <if-compare operator="not-equals" value="true" field="variantsSellable">
	        	<set field="argListIds[]" from-field="parentVirtualProduct.productId"/>
	        	<property-to-field resource="OSafeAdminUiLabels" property="NoVariantsForSaleWarning" field="noVariantsForSaleWarning" arg-list-name="argListIds"/>
        		<string-to-list string="${noVariantsForSaleWarning}" list="successMessageList"/>
	        </if-compare>
        </if-compare>
        
        
        
	    <field-to-result field="parameters.productId" result-name="productId"/>
    </simple-method>
    
    <simple-method method-name="updateProdReview" short-description="Updates a product review record">
         <if-empty field="parameters.productRating">
             <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="OverallRatingMissingError"/>
             <string-to-list string="${tempErrorMessage}" message-field="productRating" list="error_list"/>
         </if-empty>
<!--
          <if-empty field="parameters.reviewNickName">
             <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="NickNameMissingError"/>
             <string-to-list string="${tempErrorMessage}" message-field="reviewNickName" list="error_list"/>
         </if-empty>
         <if-empty field="parameters.reviewGender">
             <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ReviewGenderMissingError"/>
             <string-to-list string="${tempErrorMessage}" message-field="reviewGender" list="error_list"/>
         </if-empty>
         <if-empty field="parameters.reviewAge">
             <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ReviewAgeMissingError"/>
             <string-to-list string="${tempErrorMessage}" message-field="reviewAge" list="error_list"/>
         </if-empty>
         <if-empty field="parameters.reviewLocation">
             <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ReviewLocationMissingError"/>
             <string-to-list string="${tempErrorMessage}" message-field="reviewLocation" list="error_list"/>
         </if-empty>
 -->
        <if-empty field="parameters.reviewTitle">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidProductReviewTitaleError"/>
            <string-to-list string="${tempErrorMessage}" message-field="reviewTitle" list="error_list"/>
        </if-empty>
        <if-empty field="parameters.productReview">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidProductReviewTextError"/>
            <string-to-list string="${tempErrorMessage}" message-field="productReview" list="error_list"/>
        </if-empty>
        <check-errors/>
        <set-service-fields service-name="updateProductReview" map="parameters" to-map="updateProductReviewCtx"/>
        <call-service service-name="updateProductReview" in-map-name="updateProductReviewCtx"/>
    </simple-method>
    
    <simple-method method-name="updateProductReview" short-description="Update ProductReview">
        <make-value value-field="lookupPKMap" entity-name="ProductReview"/>
        <set-pk-fields map="parameters" value-field="lookupPKMap"/>
        <find-by-primary-key map="lookupPKMap" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <store-value value-field="lookedUpValue"/>

        <set from-field="lookedUpValue.productId" field="productId"/>
        <call-simple-method method-name="updateProductWithReviewRatingAvg" />
    </simple-method>
    <simple-method method-name="updateProductWithReviewRatingAvg" short-description="Update Product with new Review Rating Avg" login-required="false">
        <!-- this method is meant to be called in-line and depends in a productId parameter -->
        <call-class-method class-name="org.ofbiz.product.product.ProductWorker" method-name="getAverageProductRating" ret-field="averageCustomerRating">
            <field field="delegator" type="org.ofbiz.entity.Delegator"/>
            <field field="productId" type="java.lang.String"/>
        </call-class-method>
        <log level="info" message="Got new average customer rating ${averageCustomerRating}"/>
        <!-- if-compare field="averageCustomerRating" operator="equals" value="0" type="BigDecimal">
            <return/>
        </if-compare -->
        <!-- update the review average on the ProductCalculatedInfo entity -->
        <entity-one entity-name="ProductCalculatedInfo" value-field="productCalculatedInfo"/>
        <if-empty field="productCalculatedInfo">
            <!-- go ahead and create it -->
            <make-value value-field="productCalculatedInfo" entity-name="ProductCalculatedInfo"/>
            <set from-field="parameters.productId" field="productCalculatedInfo.productId"/>
            <set from-field="averageCustomerRating" field="productCalculatedInfo.averageCustomerRating"/>
            <create-value value-field="productCalculatedInfo"/>
        <else>
            <set from-field="averageCustomerRating" field="productCalculatedInfo.averageCustomerRating"/>
            <store-value value-field="productCalculatedInfo"/>
        </else>
        </if-empty>
    </simple-method>
    
    <simple-method method-name="updateProductIdentification" short-description="Update Good Identification">
        <set field="idValueMap" from-field="parameters.idValue"/>
        <iterate-map key="goodIdentificationTypeIdKey" value="goodIdentificationTypeIdValue" map="parameters.goodIdentificationTypeId">
            <set field="idValue" from-field="idValueMap.${goodIdentificationTypeIdKey}"/>
            <set field="manageGoodIdentificationCtx.productId" from-field="parameters.productId"/>
            <set field="manageGoodIdentificationCtx.idValue" from-field="idValue"/>
            <set field="manageGoodIdentificationCtx.goodIdentificationTypeId" from-field="goodIdentificationTypeIdValue"/>
            <call-service service-name="manageGoodIdentification" in-map-name="manageGoodIdentificationCtx"/>
            <clear-field field="manageGoodIdentificationCtx"/>
        </iterate-map>
    </simple-method>
    
    <simple-method method-name="manageProductAttribute" short-description="Create Update, Delete Product Attribute for Bigfish Inventory">
        <set field="attrName" from-field="parameters.attrName"/>
        <entity-one entity-name="ProductAttribute" value-field="productAttribute">
            <field-map field-name="productId" from-field="parameters.productId"/>
            <field-map field-name="attrName" from-field="attrName"/>
        </entity-one>
        <if-not-empty field="productAttribute">
            <if-not-empty field="parameters.attrValue">
                <set field="updateProductAttributeCtx.productId" from-field="parameters.productId"/>
                <set field="updateProductAttributeCtx.attrName" from-field="attrName"/>
                <set field="updateProductAttributeCtx.attrValue" from-field="parameters.attrValue"/>
                <call-service service-name="updateProductAttribute" in-map-name="updateProductAttributeCtx"/>
            <else>
                <set field="deleteProductAttributeCtx.productId" from-field="parameters.productId"/>
                <set field="deleteProductAttributeCtx.attrName" from-field="attrName"/>
                <call-service service-name="deleteProductAttribute" in-map-name="deleteProductAttributeCtx"/>
            </else>
            </if-not-empty>
        <else>
            <set field="createProductAttributeCtx.productId" from-field="parameters.productId"/>
            <set field="createProductAttributeCtx.attrName" from-field="attrName"/>
            <set field="createProductAttributeCtx.attrValue" from-field="parameters.attrValue"/>
            <call-service service-name="createProductAttribute" in-map-name="createProductAttributeCtx"/>
        </else>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="updateProductContent" short-description="Update Product Contents">
        <set field="updateProductText.productId" from-field="parameters.productId"/>
        <if-compare field="parameters.isVariant" operator="not-equals" value="Y">
        <!-- For PRODUCT_NAME Product Content -->
            <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductNameText"/>
            <set field="updateProductNameText.text" from-field="parameters.productDetailName"/>
            <set field="updateProductNameText.productContentTypeId" value="PRODUCT_NAME"/>
            <call-service service-name="updateProductContentText" in-map-name="updateProductNameText"/>
            
        <!-- For PLP_LABEL Product Content -->
            <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductPLPText"/>
            <set field="updateProductPLPText.text" from-field="parameters.plpLabel"/>
            <set field="updateProductPLPText.productContentTypeId" value="PLP_LABEL"/>
            <call-service service-name="updateProductContentText" in-map-name="updateProductPLPText"/>
            
        <!-- For PDP_LABEL Product Content --> 
            <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductPDPText"/>
            <set field="updateProductPDPText.text" from-field="parameters.pdpLabel"/>
            <set field="updateProductPDPText.productContentTypeId" value="PDP_LABEL"/>
            <call-service service-name="updateProductContentText" in-map-name="updateProductPDPText"/>
        </if-compare>

        <!-- For LONG_DESCRIPTION Product Content -->
        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductLongText"/>
        <set field="updateProductLongText.text" from-field="parameters.longDescription"/>
        <set field="updateProductLongText.productContentTypeId" value="LONG_DESCRIPTION"/>
        <call-service service-name="updateProductContentText" in-map-name="updateProductLongText"/>

        <!-- For SHORT_SALES_PITCH Product Content -->
        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductSalesText"/>
        <set field="updateProductSalesText.text" from-field="parameters.shortSalesPitch"/>
        <set field="updateProductSalesText.productContentTypeId" value="SHORT_SALES_PITCH"/>
        <call-service service-name="updateProductContentText" in-map-name="updateProductSalesText"/>
            
        <!-- For SPECIALINSTRUCTIONS Product Content -->
        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductInstText"/>
        <set field="updateProductInstText.text" from-field="parameters.specialInstruction"/>
        <set field="updateProductInstText.productContentTypeId" value="SPECIALINSTRUCTIONS"/>
        <call-service service-name="updateProductContentText" in-map-name="updateProductInstText"/>
            
        <!-- For DELIVERY_INFO Product Content -->
        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductDelivText"/>
        <set field="updateProductDelivText.text" from-field="parameters.deliveryInfo"/>
        <set field="updateProductDelivText.productContentTypeId" value="DELIVERY_INFO"/>
        <call-service service-name="updateProductContentText" in-map-name="updateProductDelivText"/>
            
        <!-- For DIRECTIONS Product Content -->
        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductDirectText"/>
        <set field="updateProductDirectText.text" from-field="parameters.directions"/>
        <set field="updateProductDirectText.productContentTypeId" value="DIRECTIONS"/>
        <call-service service-name="updateProductContentText" in-map-name="updateProductDirectText"/>
            
        <!-- For TERMS_AND_CONDS Product Content -->
        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductTermsText"/>
        <set field="updateProductTermsText.text" from-field="parameters.termsAndConds"/>
        <set field="updateProductTermsText.productContentTypeId" value="TERMS_AND_CONDS"/>
        <call-service service-name="updateProductContentText" in-map-name="updateProductTermsText"/>
            
        <!-- For INGREDIENTS Product Content -->
        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductIngredText"/>
        <set field="updateProductIngredText.text" from-field="parameters.ingredients"/>
        <set field="updateProductIngredText.productContentTypeId" value="INGREDIENTS"/>
        <call-service service-name="updateProductContentText" in-map-name="updateProductIngredText"/>
            
        <!-- For WARNINGS Product Content -->
        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductWarnText"/>
        <set field="updateProductWarnText.text" from-field="parameters.warnings"/>
        <set field="updateProductWarnText.productContentTypeId" value="WARNINGS"/>
        <call-service service-name="updateProductContentText" in-map-name="updateProductWarnText"/>
        <!-- Clear the Product Content Rendered Cache -->
        <call-class-method class-name="org.ofbiz.base.util.cache.UtilCache"  method-name="clearCache">
            <string value="product.content.rendered"/>
        </call-class-method>
    </simple-method>
    
    <simple-method method-name="updateProductContentText" short-description="Update Product Content Text">
        <entity-and entity-name="ProductContent" list="productContentList">
            <field-map field-name="productId" from-field="parameters.productId"/>
            <field-map field-name="productContentTypeId" from-field="parameters.productContentTypeId"/>
        </entity-and>
        <filter-list-by-date list="productContentList" to-list="productContents"/>
        <if-not-empty field="productContents">
            <first-from-list list="productContents" entry="productContent"/>
            <entity-one entity-name="Content" value-field="content">
                <field-map field-name="contentId" from-field="productContent.contentId"/>
            </entity-one>
        </if-not-empty>
        <if-not-empty field="content">
            <get-related-one value-field="content" relation-name="DataResource" to-value-field="textDr"/>
            <if-not-empty field="textDr">
                <get-related-one value-field="textDr" relation-name="ElectronicText" to-value-field="text"/>
                <if-not-empty field="text">
                    <set-service-fields service-name="updateSimpleTextContent" map="text" to-map="updateSimpleText"/>
                    <set field="updateSimpleText.text" from-field="parameters.text"/>
                    <set field="updateSimpleText.textDataResourceId" from-field="text.dataResourceId"/>
                    <if-not-empty field="parameters.text">
                        <!-- Update product content electronic text -->
                        <call-service service-name="updateSimpleTextContent" in-map-name="updateSimpleText"/>
                    <else>
                        <!-- Remove Product content if content is exists and the text is left blank -->
                        <set-service-fields service-name="deleteProductContentAndText" map="productContent" to-map="deleteProductContentCtx"/>
                        <call-service service-name="deleteProductContentAndText" in-map-name="deleteProductContentCtx"/>
                    </else>
                    </if-not-empty>
                </if-not-empty>
            </if-not-empty>
        <else>
            <if-not-empty field="parameters.text">
                <!-- Create Product Content if it is not exist -->
                <set-service-fields service-name="createSimpleTextContent" map="parameters" to-map="createSimpleTextMap"/>
                <set field="createSimpleTextMap.text" from-field="parameters.text"/>
                <call-service service-name="createSimpleTextContent" in-map-name="createSimpleTextMap">
                    <result-to-field result-name="contentId" field="createProductContentMap.contentId"/>
                </call-service>
                <set-service-fields service-name="createProductContent" map="parameters" to-map="createProductContentMap"/>
                <set field="createProductContentMap.productContentTypeId" from-field="parameters.productContentTypeId"/>
                <set field="createProductContentMap.productId" from-field="parameters.productId"/>
                <call-service service-name="createProductContent" in-map-name="createProductContentMap"/>
            </if-not-empty>
        </else>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="manageGoodIdentification" short-description="Create Update and Delete GoodIdentification">
        <entity-one entity-name="GoodIdentification" value-field="goodIdentification">
            <field-map field-name="productId" from-field="parameters.productId"/>
            <field-map field-name="goodIdentificationTypeId" from-field="parameters.goodIdentificationTypeId"/>
        </entity-one>
        <if-not-empty field="goodIdentification">
            <if-not-empty field="parameters.idValue">
                <call-service service-name="updateGoodIdentification" in-map-name="parameters"/>
            <else>
                <set field="deleteGoodIdentificationMap.productId" from-field="parameters.productId"/>
                <set field="deleteGoodIdentificationMap.goodIdentificationTypeId" from-field="parameters.goodIdentificationTypeId"/>
                <call-service service-name="deleteGoodIdentification" in-map-name="deleteGoodIdentificationMap"/>
            </else>
            </if-not-empty>
        <else>
            <if-not-empty field="parameters.idValue">
                <call-service service-name="createGoodIdentification" in-map-name="parameters"/>
            </if-not-empty>
        </else>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="deleteProductContent" short-description="Delete Product Content And Text">
        <!-- Remove Product content if content is exists and the text is left blank -->
        <set-service-fields service-name="removeProductContent" map="parameters" to-map="removeProductContentMap"/>
        <call-service service-name="removeProductContent" in-map-name="removeProductContentMap"/>
        
        <set-service-fields service-name="removeContentAndRelated" map="parameters" to-map="removeContentAndRelatedMap"/>
        <call-service service-name="removeContentAndRelated" in-map-name="removeContentAndRelatedMap"/>
    </simple-method>
    
    <simple-method method-name="validateFacetGroup" short-description="Creates a facet group" use-transaction="false">
        <!-- Validating PRODUCT_FEATURE_GROUP_ID-->
        <if-empty field="parameters.productFeatureGroupId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankProductFeatureGroupIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="productFeatureGroupId" list="error_list"/>
        <else>
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidId" ret-field="isValidId">
                <field field="parameters.productFeatureGroupId"/>
            </call-class-method>
            <if-compare field="isValidId" operator="equals" value="true">
                <entity-condition list="productFeatureCatGrpApplList" entity-name="ProductFeatureCatGrpAppl">
	                <condition-list combine="and">
	                    <condition-expr field-name="productFeatureGroupId" from-field="parameters.productFeatureGroupId" operator="equals" ignore-case="true"/>
	                    <condition-expr field-name="productCategoryId" operator="equals" from-field="parameters.productCategoryId"/>
	                </condition-list>
                </entity-condition>
                <if-not-empty field="productFeatureCatGrpApplList">
                    <set field="errorKey" from-field="parameters.productFeatureGroupId"/>
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="FeatureIdExistError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="productFeatureGroupId" list="error_list"/>
                </if-not-empty>
            <else>
                <set field="errorKey" from-field="parameters.productFeatureGroupId"/>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidIdError"/>
                <string-to-list string="${tempErrorMessage}" message-field="productFeatureGroupId" list="error_list"/>
            </else>
            </if-compare>
        </else>
        </if-empty>
        <!-- Validating DESCRIPTION"-->
        <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidDesc" ret-field="isValidDesc">
            <field field="parameters.grpDescription"/>
        </call-class-method>
        <if-compare field="isValidDesc" operator="equals" value="false">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidProductFeatureGroupDescError"/>
            <string-to-list string="${tempErrorMessage}" message-field="productFeatureGroupId" list="error_list"/>
        </if-compare>
        <!-- Validating SEQUENCE NUM"-->
        <set field="sequenceNumValue" from-field="parameters.grpSequenceNum"/>
        <call-simple-method method-name="validateSequenceNumber" xml-resource="component://osafeadmin/script/com/osafeadmin/events/OsafeAdminValidationEvents.xml"/>
        <if>
            <condition>
                <or>
                    <if-compare operator="equals" value="true" field="invalidSeqNum" type="Boolean"/>
                    <if-compare operator="equals" value="true" field="invalidSeqNumRange" type="Boolean"/>
                </or>
            </condition>
            <then>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidSequenceNumber"/>
                <string-to-list string="${tempErrorMessage}" message-field="sequenceNum" list="error_list"/>
            </then>
        </if>
        
        <check-errors/>
        <set field="readOnly" value="true"/>
        <!-- Setting Values in Context -->
        <field-to-result field="parameters.productCategoryId" result-name="productCategoryId"/>
        <field-to-result field="parameters.productFeatureGroupId" result-name="productFeatureGroupId"/>
        <field-to-result field="parameters.grpSequenceNum" result-name="grpSequenceNum"/>
        <field-to-result field="parameters.grpDescription" result-name="grpDescription"/>
        <field-to-result field="parameters.facetValueMin" result-name="facetValueMin"/>
        <field-to-result field="parameters.facetValueMax" result-name="facetValueMax"/>
        <field-to-result field="parameters.facetTooltip" result-name="facetTooltip"/>
        <field-to-result field="parameters.grpThruDate" result-name="grpThruDate"/>
        <field-to-result field="readOnly" result-name="readOnly"/>
    </simple-method>
    
    <simple-method method-name="createFacetGroupAndValue" short-description="Create Facet Values">
        <now-timestamp field="nowTime"/>
        <!-- Validating Entered FACET VALUE IDS AND Corresponding FACET VALUES -->
        <iterate-map key="productFeatureIdKey" value="productFeatureIdValue" map="parameters.productFeatureId">
            <if-not-empty field="productFeatureIdValue">
                <field-to-list field="productFeatureIdValue" list="productFeatureIdList"/>
                <iterate-map key="descriptionKey" value="descriptionValue" map="parameters.description">
                    <if-compare-field field="productFeatureIdKey" to-field="descriptionKey" operator="equals">
	                    <if-empty field="descriptionValue">
	                        <set field="descriptionBlank" value="true"/>
	                    </if-empty>
	                </if-compare-field>
                </iterate-map>
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidId" ret-field="isValidId">
                    <field field="productFeatureIdValue"/>
                </call-class-method>
                <if-compare field="isValidId" operator="equals" value="true">
                    <!-- <entity-one entity-name="ProductFeature" value-field="existingId">
                        <field-map field-name="productFeatureId" from-field="productFeatureIdValue"/>
                    </entity-one>
                    <if-not-empty field="existingId">
                        <set field="errorKey" from-field="productFeatureIdValue"/>
                        <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="FeatureIdExistError"/>
                        <string-to-list string="${tempErrorMessage}" list="error_list"/>
                    </if-not-empty> -->
                <else>
                    <set field="errorKey" from-field="productFeatureIdValue"/>
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidIdError"/>
                    <string-to-list string="${tempErrorMessage}"  message-field="productFeatureId" list="error_list"/>
                </else>
                </if-compare>
            </if-not-empty>
        </iterate-map>
        <if-not-empty field="productFeatureIdList">
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="findDuplicates" ret-field="dupProductFeatureIdList">
                <field field="productFeatureIdList" type="List"/>
            </call-class-method>
        </if-not-empty>
        <if-not-empty field="dupProductFeatureIdList">
            <iterate entry="dupProductFeatureId" list="dupProductFeatureIdList">
                <property-to-field resource="OSafeAdminUiLabels" property="FeatureIdExistError" field="tempErrorMessage" />
                <string-to-list string="${tempErrorMessage}" message-field="productFeatureId" list="error_list"/>
            </iterate>
        </if-not-empty>
        <if-compare field="descriptionBlank" value="true" operator="equals">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="FacetValueBlankError"/>
            <string-to-list string="${tempErrorMessage}" message-field="description" list="error_list"/>
        </if-compare>
        <!-- Validating Entered SEQUENCE NUMS(Product Feature Ids) -->
        <iterate-map key="sequenceNumKey" value="sequenceNumValue" map="parameters.sequenceNum">
            <if-not-empty field="sequenceNumValue">
                <call-simple-method method-name="validateSequenceNumber" xml-resource="component://osafeadmin/script/com/osafeadmin/events/OsafeAdminValidationEvents.xml"/>
            </if-not-empty>
        </iterate-map>
        <if>
            <condition>
                <or>
                    <if-compare operator="equals" value="true" field="invalidSeqNum" type="Boolean"/>
                    <if-compare operator="equals" value="true" field="invalidSeqNumRange" type="Boolean"/>
                </or>
            </condition>
            <then>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidSequenceNumber"/>
                <string-to-list string="${tempErrorMessage}" message-field="sequenceNum" list="error_list"/>
            </then>
        </if>
        <check-errors/>
        
        <!-- sort the sequence map and make mutiple-->
        <set field="seqMutiple" value="10" type="Integer"/>
        <call-class-method method-name="setSequenceMapByMultiple" class-name="com.osafe.util.OsafeAdminUtil" ret-field="parameters.sequenceNum">
            <field field="parameters.sequenceNum" type="java.util.Map"/>
            <field field="seqMutiple" type="Integer"/>
        </call-class-method>
        
        <!-- Verify if the PRODUCT FEATURE GROUP ID already exists -->
        <entity-condition list="facetGroupIdList" entity-name="ProductFeatureType">
            <condition-expr field-name="productFeatureTypeId" from-field="parameters.productFeatureGroupId" operator="equals"/>
        </entity-condition>
        
        <!-- Saving Values in Entities for creating a new FACET GROUP-->
        <if-empty field="facetGroupIdList">
	        <set-service-fields service-name="createFeatureCategory" to-map="createProductFeatureCategoryCtx" map="parameters"/>
	        <set field="createProductFeatureCategoryCtx.productFeatureCategoryId" from-field="parameters.productFeatureGroupId" type="String" set-if-null="true"/>
	        <set field="createProductFeatureCategoryCtx.description" from-field="parameters.grpDescription" type="String" set-if-null="true"/>
	        <call-service service-name="createFeatureCategory" in-map-name="createProductFeatureCategoryCtx"/>
	        
	        <set-service-fields service-name="createFeatureGroup" to-map="createProductFeatureGroupCtx" map="parameters"/>
	        <set field="createProductFeatureGroupCtx.productFeatureGroupId" from-field="parameters.productFeatureGroupId" type="String" set-if-null="true"/>
	        <set field="createProductFeatureGroupCtx.description" from-field="parameters.grpDescription" type="String" set-if-null="true"/>
	        <call-service service-name="createFeatureGroup" in-map-name="createProductFeatureGroupCtx"/>
	       
	        <set-service-fields service-name="createProductFeatureType" to-map="createProductFeatureTypeCtx" map="parameters"/>
	        <set field="createProductFeatureTypeCtx.productFeatureTypeId" from-field="parameters.productFeatureGroupId"/>
	        <set field="createProductFeatureTypeCtx.description" from-field="parameters.grpDescription" type="String" set-if-null="true"/>
	        <call-service service-name="createProductFeatureType" in-map-name="createProductFeatureTypeCtx"/>
        </if-empty>
        <!-- Saving Values in Entities for associating a new FACET GROUP to CATEGORY-->
        <set field="createProductFeatureCatGrpApplCtx.productFeatureGroupId" from-field="parameters.productFeatureGroupId"/>
        <set field="createProductFeatureCatGrpApplCtx.productCategoryId" from-field="parameters.productCategoryId"/>
        <set field="createProductFeatureCatGrpApplCtx.sequenceNum" from-field="parameters.grpSequenceNum" type="Long"/>
        <set field="createProductFeatureCatGrpApplCtx.fromDate" from-field="nowTime" type="Timestamp"/>
        <set field="createProductFeatureCatGrpApplCtx.thruDate" from-field="parameters.grpThruDate" type="Timestamp"/>
        <set field="createProductFeatureCatGrpApplCtx.facetValueMin" from-field="parameters.facetValueMin" type="Long"/>
        <set field="createProductFeatureCatGrpApplCtx.facetValueMax" from-field="parameters.facetValueMax" type="Long"/>
        <set field="createProductFeatureCatGrpApplCtx.facetTooltip" from-field="parameters.facetTooltip" type="String"/>
        <call-service service-name="createProductFeatureCatGrpAppl" in-map-name="createProductFeatureCatGrpApplCtx"/>
        
        <set field="createProductFeatureCategoryApplCtx.productFeatureCategoryId" from-field="parameters.productFeatureGroupId"/>
        <set field="createProductFeatureCategoryApplCtx.productCategoryId" from-field="parameters.productCategoryId"/>
        <set field="createProductFeatureCategoryApplCtx.fromDate" from-field="nowTime" type="Timestamp"/>
        <set field="createProductFeatureCatGrpApplCtx.thruDate" from-field="parameters.grpThruDate" type="Timestamp"/>
        <call-service service-name="createProductFeatureCategoryAppl" in-map-name="createProductFeatureCategoryApplCtx"/>
        
        <!-- Saving values in Entities for associating FACET VALUES to a FACET GROUP -->
        <iterate-map key="productFeatureIdKey" value="productFeatureIdValue" map="parameters.productFeatureId">
            <if-not-empty field="productFeatureIdValue">
	            <set field="productFeatureId" from-field="productFeatureIdValue"/>
	            <iterate-map key="sequenceNumKey" value="sequenceNumValue" map="parameters.sequenceNum">
	                <if-compare-field field="productFeatureIdKey" to-field="sequenceNumKey" operator="equals">
	                    <set field="sequenceNum" from-field="sequenceNumValue" type="Long"/>
	                </if-compare-field>
	            </iterate-map>
	            <set field="fromDate" from-field="nowTime"/>
	            <iterate-map key="thruDateKey" value="thruDateValue" map="parameters.thruDate">
	                <if-compare-field field="productFeatureIdKey" to-field="thruDateKey" operator="equals">
	                    <set field="thruDate" from-field="thruDateValue"/>
	                </if-compare-field>
	            </iterate-map>
	            <iterate-map key="descriptionKey" value="descriptionValue" map="parameters.description">
		            <if-compare-field field="productFeatureIdKey" to-field="descriptionKey" operator="equals">
                        <set field="description" from-field="descriptionValue"/>
                    </if-compare-field>
	            </iterate-map>
	            <!-- Verify if the PRODUCT FEATURE ID already exists -->
	            <set field="findProductFeatureCtx.productFeatureId" from-field="productFeatureId"/>
                <find-by-primary-key value-field="productFeature" entity-name="ProductFeature" map="findProductFeatureCtx"/>
	            
		        <if-empty field="productFeature">
		            <set field="createProductFeatureCtx.productFeatureId" from-field="productFeatureId"/>
		            <set field="createProductFeatureCtx.productFeatureTypeId" from-field="parameters.productFeatureGroupId"/>
		            <set field="createProductFeatureCtx.productFeatureCategoryId" from-field="parameters.productFeatureGroupId"/>
		            <set field="createProductFeatureCtx.description" from-field="description"/>
		            <call-service service-name="createProductFeature" in-map-name="createProductFeatureCtx">
		                <result-to-field result-name="productFeatureId" field="productFeatureId"/>
		            </call-service>
		        </if-empty>
		        <!-- Verify if the PRODUCT FEATURE ID is already associated to a PRODUCT FEATURE GROUP -->
                <entity-condition list="productFeatureGroupApplList" entity-name="ProductFeatureGroupAppl">
                    <condition-list combine="and">
                        <condition-expr field-name="productFeatureGroupId" from-field="parameters.productFeatureGroupId" operator="equals"/>
                        <condition-expr field-name="productFeatureId" from-field="productFeatureId" operator="equals"/>
                    </condition-list>
                </entity-condition>
                <if-empty field="productFeatureGroupApplList">
		            <set field="createProductFeatureGroupApplCtx.productFeatureId" from-field="productFeatureId"/>
		            <set field="createProductFeatureGroupApplCtx.productFeatureGroupId" from-field="parameters.productFeatureGroupId"/>
		            <set field="createProductFeatureGroupApplCtx.fromDate" from-field="fromDate" type="Timestamp"/>
		            <set field="createProductFeatureGroupApplCtx.thruDate" from-field="thruDate" type="Timestamp"/>
		            <set field="createProductFeatureGroupApplCtx.sequenceNum" from-field="sequenceNum"/>
		            <call-service service-name="createProductFeatureGroupAppl" in-map-name="createProductFeatureGroupApplCtx"/>
		        </if-empty>
            </if-not-empty>
        </iterate-map>
        
        <!-- Setting Parameters to Context -->
        <set field="readOnly" value="true"/>
        <field-to-result field="readOnly" result-name="readOnly"/>
        <field-to-result field="parameters.productCategoryId" result-name="productCategoryId"/>
        <property-to-field resource="OSafeAdminUiLabels" property="FacetValueSavedSuccess" field="facetValueSavedSuccess"/>
        <string-to-list string="${facetValueSavedSuccess}" list="successMessageList"/>
    </simple-method>
    
    <simple-method method-name="createFeatureGroup" short-description="Create Product Feature Group">
        <check-permission permission="CATALOG" action="_CREATE"><fail-message message="Security Error: to run createProductFeatureGroup you must have the CATALOG_CREATE or CATALOG_ADMIN permission"/></check-permission>
        <check-errors/>
        <if-not-empty field="parameters.productFeatureGroupId">
            <make-value value-field="newEntity" entity-name="ProductFeatureGroup"/>
            <set-nonpk-fields map="parameters" value-field="newEntity"/>
            <set-pk-fields map="parameters" value-field="newEntity"/>
            <create-value value-field="newEntity"/>
            <field-to-result field="parameters.productFeatureGroupId" result-name="productFeatureGroupId" />
        <else>
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankproductFeatureGroupIdError"/>
            <string-to-list string="${tempErrorMessage}"  message-field="productFeatureGroupId"  list="error_list"/>
        </else>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="createFeatureCategory" short-description="Create Product Feature Category">
        <check-permission permission="CATALOG" action="_CREATE"><fail-message message="Security Error: to run createProductFeatureCategory you must have the CATALOG_CREATE or CATALOG_ADMIN permission"/></check-permission>
        <check-errors/>

        <make-value entity-name="ProductFeatureCategory" value-field="newEntity"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>
        <set-pk-fields map="parameters" value-field="newEntity"/>
        <field-to-result field="newEntity.productFeatureCategoryId" result-name="productFeatureCategoryId"/>
        <create-value value-field="newEntity"/>
        
    </simple-method>
    
    <simple-method method-name="updateFacetGroupList" short-description="Updates a facet groups" use-transaction="false">
    
        <iterate-map key="productFeatureGroupIdKey" value="productFeatureGroupIdValue" map="parameters.productFeatureGroupId">
            <set field="sequenceNumMap" from-field="parameters.sequenceNum" />
            <set field="sequenceNumValue" from-field="sequenceNumMap.${productFeatureGroupIdKey}"/>
                <call-simple-method method-name="validateSequenceNumber" xml-resource="component://osafeadmin/script/com/osafeadmin/events/OsafeAdminValidationEvents.xml"/>
            
            <set field="descriptionMap" from-field="parameters.description" />
            <set field="descriptionValue" from-field="descriptionMap.${productFeatureGroupIdKey}"/>
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidDesc" ret-field="isValidDesc">
                <field field="descriptionValue"/>
            </call-class-method>
            <if-compare field="isValidDesc" operator="equals" value="false">
                <set field="descriptionBlank" value="true"/>
            </if-compare>
            
            <set field="invalidFacetValueMin" value="false"/>
            <set field="invalidFacetValueMinRange" value="false"/>
            <set field="invalidFacetValueMax" value="false"/>
            <set field="invalidFacetValueMaxRange" value="false"/>
            
            <set field="facetValueMinMap" from-field="parameters.facetValueMin" />
            <set field="facetValueMinValue" from-field="facetValueMinMap.${productFeatureGroupIdKey}"/>
            <if-not-empty field="facetValueMinValue">
                <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isInteger" ret-field="facetValueMinVaild">
                    <string value="${facetValueMinValue}"></string>
                </call-class-method>
                <if-compare operator="equals" value="false" field="facetValueMinVaild" type="Boolean">
                    <set field="invalidFacetValueMin" value="true"/>
                    <set field="invalidFacetValueMinError" value="true"/>
                <else>
                    <if>
                        <condition>
                            <and>
                                <if-compare operator="greater-equals" value="0" field="facetValueMinValue" type="Long"/>
                                <if-compare operator="less-equals" value="99" field="facetValueMinValue" type="Long"/>
                            </and>
                        </condition>
                        <then>
                        </then>
                        <else>
                            <set field="invalidFacetValueMinRange" value="true"/>
                            <set field="invalidFacetValueMinRangeError" value="true"/>
                        </else>
                    </if>
                </else>
                </if-compare>
            </if-not-empty>
            
            <set field="facetValueMaxMap" from-field="parameters.facetValueMax" />
            <set field="facetValueMaxValue" from-field="facetValueMaxMap.${productFeatureGroupIdKey}"/>
            <if-not-empty field="facetValueMaxValue">
                <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isInteger" ret-field="facetValueMaxVaild">
                    <string value="${facetValueMaxValue}"></string>
                </call-class-method>
                <if-compare operator="equals" value="false" field="facetValueMaxVaild" type="Boolean">
                    <set field="invalidFacetValueMax" value="true"/>
                    <set field="invalidFacetValueMaxError" value="true"/>
                <else>
                    <if>
                        <condition>
                            <and>
                                <if-compare operator="greater-equals" value="1" field="facetValueMaxValue" type="Long"/>
                                <if-compare operator="less-equals" value="99" field="facetValueMaxValue" type="Long"/>
                            </and>
                        </condition>
                        <then>
                        </then>
                        <else>
                            <set field="invalidFacetValueMaxRange" value="true"/>
                            <set field="invalidFacetValueMaxRangeError" value="true"/>
                        </else>
                    </if>
                </else>
                </if-compare>
            </if-not-empty>
            
            <if>
            <condition>
                <and>
                    <if-compare operator="equals" value="false" field="invalidFacetValueMin" type="Boolean"/>
                    <if-compare operator="equals" value="false" field="invalidFacetValueMinRange" type="Boolean"/>
                    <if-compare operator="equals" value="false" field="invalidFacetValueMax" type="Boolean"/>
                    <if-compare operator="equals" value="false" field="invalidFacetValueMaxRange" type="Boolean"/>
                </and>
            </condition>
            <then>
                <set field="facetValueMin" from-field="facetValueMinMap.${productFeatureGroupIdKey}"/>
		        <set field="facetValueMax" from-field="facetValueMaxMap.${productFeatureGroupIdKey}"/>
		            
		        <if-empty field="facetValueMax">
		            <if-not-empty field="facetValueMin">
		                <set field="validMinMaxValue" value="false"/>
		            </if-not-empty>
		        </if-empty>
		        <if-empty field="facetValueMin">
		            <if-not-empty field="facetValueMax">
		                <set field="validMinMaxValue" value="false"/>
		            </if-not-empty>
		            <set field="facetValueMin" value="0" type="Long"/>
		        </if-empty>
		                    
				<if-not-empty field="facetValueMax">
				    <if-compare-field operator="greater-equals" field="facetValueMin" to-field="facetValueMax" type="Long">
				        <set field="validFacetMaxValue" value="false"/>
				    </if-compare-field>
				</if-not-empty>
            </then>
        </if>
        </iterate-map>
    
        <if-compare field="descriptionBlank" value="true" operator="equals">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidProductFeatureGroupDescError"/>
            <string-to-list string="${tempErrorMessage}" message-field="description" list="error_list"/>
        </if-compare>
        <if>
            <condition>
                <or>
                    <if-compare operator="equals" value="true" field="invalidSeqNum" type="Boolean"/>
                    <if-compare operator="equals" value="true" field="invalidSeqNumRange" type="Boolean"/>
                </or>
            </condition>
            <then>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidSequenceNumber"/>
                <string-to-list string="${tempErrorMessage}" message-field="SEQUENCENUM" list="error_list"/>
            </then>
        </if>
        <if>
            <condition>
                <or>
                    <if-compare operator="equals" value="true" field="invalidFacetValueMinError" type="Boolean"/>
                    <if-compare operator="equals" value="true" field="invalidFacetValueMinRangeError" type="Boolean"/>
                </or>
            </condition>
            <then>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="FacetMinValueNotValidNumError"/>
                <string-to-list string="${tempErrorMessage}" message-field="FACETVALUEMIN" list="error_list"/>
            </then>
        </if>
        <if>
            <condition>
                <or>
                    <if-compare operator="equals" value="true" field="invalidFacetValueMaxError" type="Boolean"/>
                    <if-compare operator="equals" value="true" field="invalidFacetValueMaxRangeError" type="Boolean"/>
                </or>
            </condition>
            <then>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="FacetMaxValueNotValidNumError"/>
                <string-to-list string="${tempErrorMessage}" message-field="FACETVALUEMAX" list="error_list"/>
            </then>
        </if>
        
        <if-compare operator="equals" value="false" field="validMinMaxValue" type="Boolean">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidMinMaxValueError"/>
            <string-to-list string="${tempErrorMessage}" message-field="FACETVALUEMAX" list="error_list"/>
        </if-compare>
        <if-compare operator="equals" value="false" field="validFacetMaxValue" type="Boolean">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidFacetMaxValueError"/>
            <string-to-list string="${tempErrorMessage}" message-field="FACETVALUEMAX" list="error_list"/>
        </if-compare>
        
        <check-errors/>

        <!-- sort the sequence map and make mutiple-->
        <set field="seqMutiple" value="10" type="Integer"/>
        <call-class-method method-name="setSequenceMapByMultiple" class-name="com.osafe.util.OsafeAdminUtil" ret-field="parameters.sequenceNum">
            <field field="parameters.sequenceNum" type="java.util.Map"/>
            <field field="seqMutiple" type="Integer"/>
        </call-class-method>

        <set field="productCategoryId" from-field="parameters.productCategoryId"/>
        <iterate-map key="productFeatureGroupIdKey" value="productFeatureGroupIdValue" map="parameters.productFeatureGroupId">
            <set field="productFeatureGroupId" from-field="productFeatureGroupIdValue"/>
            <iterate-map key="sequenceNumKey" value="sequenceNumValue" map="parameters.sequenceNum">
                <if-compare-field field="productFeatureGroupIdKey" to-field="sequenceNumKey" operator="equals">
                    <set field="sequenceNum" from-field="sequenceNumValue"/>
                </if-compare-field>
            </iterate-map>
            <iterate-map key="fromDateKey" value="fromDateValue" map="parameters.fromDate">
                <if-compare-field field="productFeatureGroupIdKey" to-field="fromDateKey" operator="equals">
                    <set field="fromDate" from-field="fromDateValue"/>
                </if-compare-field>
            </iterate-map> 
            <iterate-map key="thruDateKey" value="thruDateValue" map="parameters.thruDate">
                <if-compare-field field="productFeatureGroupIdKey" to-field="thruDateKey" operator="equals">
                    <set field="thruDate" from-field="thruDateValue"/>
                </if-compare-field>
            </iterate-map>
            <iterate-map key="descriptionKey" value="descriptionValue" map="parameters.description">
                <if-compare-field field="productFeatureGroupIdKey" to-field="descriptionKey" operator="equals">
                    <set field="description" from-field="descriptionValue"/>
                </if-compare-field>
            </iterate-map>
            <iterate-map key="facetValueMinKey" value="facetValueMinValue" map="parameters.facetValueMin">
                <if-compare-field field="productFeatureGroupIdKey" to-field="facetValueMinKey" operator="equals">
                    <set field="facetValueMin" from-field="facetValueMinValue"/>
                </if-compare-field>
            </iterate-map>
            <iterate-map key="facetValueMaxKey" value="facetValueMaxValue" map="parameters.facetValueMax">
                <if-compare-field field="productFeatureGroupIdKey" to-field="facetValueMaxKey" operator="equals">
                    <set field="facetValueMax" from-field="facetValueMaxValue"/>
                </if-compare-field>
            </iterate-map>
            
            <set field="updateProductFeatureCatGrpApplCtx.productCategoryId" from-field="parameters.productCategoryId"/>
            <set field="updateProductFeatureCatGrpApplCtx.sequenceNum" from-field="sequenceNum" type="Long" set-if-null="true"/>
            <set field="updateProductFeatureCatGrpApplCtx.productFeatureGroupId" from-field="productFeatureGroupId"/>
            <set field="updateProductFeatureCatGrpApplCtx.facetValueMin" from-field="facetValueMin" type="Long" set-if-null="true"/>
            <set field="updateProductFeatureCatGrpApplCtx.facetValueMax" from-field="facetValueMax" type="Long" set-if-null="true"/>
            <set field="updateProductFeatureCatGrpApplCtx.thruDate" from-field="thruDate" type="Timestamp" default-value=""/>
            <if-compare-field field="fromDate" operator="not-equals" to-field="nullValue">
                <set field="updateProductFeatureCatGrpApplCtx.fromDate" from-field="fromDate" type="Timestamp"/>
            </if-compare-field>
            <call-service service-name="updateProductFeatureCatGrpAppl" in-map-name="updateProductFeatureCatGrpApplCtx"/>
        
            <set-service-fields service-name="updateProductFeatureGroup" map="parameters" to-map="updateProductFeatureGroupCtx"/>
            <set field="updateProductFeatureGroupCtx.productFeatureGroupId" from-field="productFeatureGroupId"/>
            <set field="updateProductFeatureGroupCtx.description" from-field="description"/>
            <call-service service-name="updateProductFeatureGroup" in-map-name="updateProductFeatureGroupCtx"/>
            
        </iterate-map>
        <property-to-field resource="OSafeAdminUiLabels" property="FacetGroupSavedSuccess" field="facetGroupSavedSuccess" arg-list-name="argListNames"/>
        <string-to-list string="${facetGroupSavedSuccess}" list="successMessageList"/>
    </simple-method>
    
    <simple-method method-name="updateFacetGroup" short-description="Updates a facet group" use-transaction="false">
    
    	   <!--  sequenceNum -->
           <set field="sequenceNumValue" from-field="parameters.grpSequenceNum"/>
            <call-simple-method method-name="validateSequenceNumber" xml-resource="component://osafeadmin/script/com/osafeadmin/events/OsafeAdminValidationEvents.xml"/>

           <!--  description -->
           <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidDesc" ret-field="isValidDesc">
               <field field="parameters.grpDescription"/>
           </call-class-method>
           <if-compare field="isValidDesc" operator="equals" value="false">
               <set field="descriptionBlank" value="true"/>
           </if-compare>
           
           <set field="invalidFacetValueMin" value="false"/>
           <set field="invalidFacetValueMinRange" value="false"/>
           <set field="invalidFacetValueMax" value="false"/>
           <set field="invalidFacetValueMaxRange" value="false"/>
           
           <!--  facetValueMin -->
           <if-not-empty field="parameters.facetValueMin">
               <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isInteger" ret-field="facetValueMinVaild">
                   <string value="${parameters.facetValueMin}"></string>
               </call-class-method>
               <if-compare operator="equals" value="false" field="facetValueMinVaild" type="Boolean">
                   <set field="invalidFacetValueMin" value="true"/>
                   <set field="invalidFacetValueMinError" value="true"/>
               <else>
                   <if>
                       <condition>
                           <and>
                               <if-compare operator="greater-equals" value="0" field="parameters.facetValueMin" type="Long"/>
                               <if-compare operator="less-equals" value="99" field="parameters.facetValueMin" type="Long"/>
                           </and>
                       </condition>
                       <then>
                       </then>
                       <else>
                           <set field="invalidFacetValueMinRange" value="true"/>
                           <set field="invalidFacetValueMinRangeError" value="true"/>
                       </else>
                   </if>
               </else>
               </if-compare>
           </if-not-empty>
           
           <!--  facetValueMax -->
           <if-not-empty field="parameters.facetValueMax">
               <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isInteger" ret-field="facetValueMaxVaild">
                   <string value="${parameters.facetValueMax}"></string>
               </call-class-method>
               <if-compare operator="equals" value="false" field="facetValueMaxVaild" type="Boolean">
                   <set field="invalidFacetValueMax" value="true"/>
                   <set field="invalidFacetValueMaxError" value="true"/>
               <else>
                   <if>
                       <condition>
                           <and>
                               <if-compare operator="greater-equals" value="1" field="parameters.facetValueMax" type="Long"/>
                               <if-compare operator="less-equals" value="99" field="parameters.facetValueMax" type="Long"/>
                           </and>
                       </condition>
                       <then>
                       </then>
                       <else>
                           <set field="invalidFacetValueMaxRange" value="true"/>
                           <set field="invalidFacetValueMaxRangeError" value="true"/>
                       </else>
                   </if>
               </else>
               </if-compare>
           </if-not-empty>
           
        <if>
           <condition>
               <and>
                   <if-compare operator="equals" value="false" field="invalidFacetValueMin" type="Boolean"/>
                   <if-compare operator="equals" value="false" field="invalidFacetValueMinRange" type="Boolean"/>
                   <if-compare operator="equals" value="false" field="invalidFacetValueMax" type="Boolean"/>
                   <if-compare operator="equals" value="false" field="invalidFacetValueMaxRange" type="Boolean"/>
               </and>
           </condition>
           <then>
               <set field="facetValueMin" from-field="parameters.facetValueMin"/>
	        <set field="facetValueMax" from-field="parameters.facetValueMax"/>
	            
	        <if-empty field="facetValueMax">
	            <if-not-empty field="facetValueMin">
	                <set field="validMinMaxValue" value="false"/>
	            </if-not-empty>
	        </if-empty>
	        <if-empty field="facetValueMin">
	            <if-not-empty field="facetValueMax">
	                <set field="validMinMaxValue" value="false"/>
	            </if-not-empty>
	            <set field="facetValueMin" value="0" type="Long"/>
	        </if-empty>
	                    
			<if-not-empty field="facetValueMax">
			    <if-compare-field operator="greater-equals" field="facetValueMin" to-field="facetValueMax" type="Long">
			        <set field="validFacetMaxValue" value="false"/>
			    </if-compare-field>
			</if-not-empty>
           </then>
        </if>
        
        <if-compare field="descriptionBlank" value="true" operator="equals">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidProductFeatureGroupDescError"/>
            <string-to-list string="${tempErrorMessage}" message-field="description" list="error_list"/>
        </if-compare>
        <if>
            <condition>
                <or>
                    <if-compare operator="equals" value="true" field="invalidSeqNum" type="Boolean"/>
                    <if-compare operator="equals" value="true" field="invalidSeqNumRange" type="Boolean"/>
                </or>
            </condition>
            <then>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidSequenceNumber"/>
                <string-to-list string="${tempErrorMessage}" message-field="SEQUENCENUM" list="error_list"/>
            </then>
        </if>
        <if>
            <condition>
                <or>
                    <if-compare operator="equals" value="true" field="invalidFacetValueMinError" type="Boolean"/>
                    <if-compare operator="equals" value="true" field="invalidFacetValueMinRangeError" type="Boolean"/>
                </or>
            </condition>
            <then>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="FacetMinValueNotValidNumError"/>
                <string-to-list string="${tempErrorMessage}" message-field="FACETVALUEMIN" list="error_list"/>
            </then>
        </if>
        <if>
            <condition>
                <or>
                    <if-compare operator="equals" value="true" field="invalidFacetValueMaxError" type="Boolean"/>
                    <if-compare operator="equals" value="true" field="invalidFacetValueMaxRangeError" type="Boolean"/>
                </or>
            </condition>
            <then>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="FacetMaxValueNotValidNumError"/>
                <string-to-list string="${tempErrorMessage}" message-field="FACETVALUEMAX" list="error_list"/>
            </then>
        </if>
        
        <if-compare operator="equals" value="false" field="validMinMaxValue" type="Boolean">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidMinMaxValueError"/>
            <string-to-list string="${tempErrorMessage}" message-field="FACETVALUEMAX" list="error_list"/>
        </if-compare>
        <if-compare operator="equals" value="false" field="validFacetMaxValue" type="Boolean">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidFacetMaxValueError"/>
            <string-to-list string="${tempErrorMessage}" message-field="FACETVALUEMAX" list="error_list"/>
        </if-compare>
                
        <check-errors/>
        <!-- Update ProductFeatureCatGrpAppl -->
        <set field="productCategoryId" from-field="parameters.productCategoryId"/>
        <set-service-fields service-name="updateProductFeatureCatGrpAppl" to-map="updateProductFeatureCatGrpApplCtx" map="parameters"/>
        <set field="updateProductFeatureCatGrpApplCtx.productCategoryId" from-field="parameters.productCategoryId"/>
        <set field="updateProductFeatureCatGrpApplCtx.sequenceNum" from-field="parameters.grpSequenceNum" type="Long" set-if-null="true"/>
        <set field="updateProductFeatureCatGrpApplCtx.productFeatureGroupId" from-field="parameters.productFeatureGroupId"/>
        <set field="updateProductFeatureCatGrpApplCtx.facetValueMin" from-field="parameters.facetValueMin" type="Long" set-if-null="true"/>
        <set field="updateProductFeatureCatGrpApplCtx.facetValueMax" from-field="parameters.facetValueMax" type="Long" set-if-null="true"/>
        <set field="updateProductFeatureCatGrpApplCtx.facetTooltip" from-field="parameters.facetTooltip"/>
        <set field="updateProductFeatureCatGrpApplCtx.thruDate" from-field="parameters.grpThruDate" type="Timestamp" default-value="" set-if-null="true"/>
        <set field="updateProductFeatureCatGrpApplCtx.fromDate" from-field="parameters.grpFromDate" type="Timestamp" default-value=""/>
        <call-service service-name="updateProductFeatureCatGrpAppl" in-map-name="updateProductFeatureCatGrpApplCtx"/>
                
        <!-- Update ProductFeatureGroup -->
        <set-service-fields service-name="updateProductFeatureGroup" map="parameters" to-map="updateProductFeatureGroupCtx"/>
        <set field="updateProductFeatureGroupCtx.productFeatureGroupId" from-field="parameters.productFeatureGroupId"/>
        <set field="updateProductFeatureGroupCtx.description" from-field="parameters.grpDescription"/>
        <call-service service-name="updateProductFeatureGroup" in-map-name="updateProductFeatureGroupCtx"/>
        
        <property-to-field resource="OSafeAdminUiLabels" property="FacetGroupSavedSuccess" field="facetGroupSavedSuccess"/>
        <string-to-list string="${facetGroupSavedSuccess}" list="successMessageList"/>
        
    </simple-method>
    
    <simple-method method-name="updatePLPSequence" short-description="Updates PLP Sequence" use-transaction="false">
        <iterate-map key="sequenceNumKey" value="sequenceNumValue" map="parameters.sequenceNum">
            <if-not-empty field="sequenceNumValue">
                <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isInteger" ret-field="sequenceNumVaild">
                    <string value="${sequenceNumValue}"></string>
                </call-class-method>
                <if-compare operator="equals" value="false" field="sequenceNumVaild" type="Boolean">
                    <set field="invalidSeqNum" value="true"/>
                </if-compare>
                <else>
                    <set field="invalidSeqNum" value="true"/>
                </else>
            </if-not-empty>
        </iterate-map>
        <if>
            <condition>
                <or>
                    <if-compare operator="equals" value="true" field="invalidSeqNum" type="Boolean"/>
                </or>
            </condition>
            <then>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="PLPSequenceNumNotValidNumError"/>
                <string-to-list string="${tempErrorMessage}" message-field="sequenceNum" list="error_list"/>
            </then>
        </if>
        <check-errors/>

        <!-- sort the sequence map and make mutiple-->
        <set field="seqMutiple" value="10" type="Integer"/>
        <call-class-method method-name="setSequenceMapByMultiple" class-name="com.osafe.util.OsafeAdminUtil" ret-field="parameters.sequenceNum">
            <field field="parameters.sequenceNum" type="java.util.Map"/>
            <field field="seqMutiple" type="Integer"/>
        </call-class-method>

        <set field="productCategoryId" from-field="parameters.productCategoryId"/>
        <iterate-map key="productIdKey" value="productIdValue" map="parameters.productId">
            <set field="productId" from-field="productIdValue"/>
            <iterate-map key="sequenceNumKey" value="sequenceNumValue" map="parameters.sequenceNum">
                <if-compare-field field="productIdKey" to-field="sequenceNumKey" operator="equals">
                    <set field="sequenceNum" from-field="sequenceNumValue" type="Long"/>
                </if-compare-field>
            </iterate-map>
            <iterate-map key="fromDateKey" value="fromDateValue" map="parameters.fromDate">
                <if-compare-field field="productIdKey" to-field="fromDateKey" operator="equals">
                    <set field="fromDate" from-field="fromDateValue"/>
                </if-compare-field>
            </iterate-map>
            <set field="updateProductToCategoryCtx.productCategoryId" from-field="productCategoryId"/>
            <set field="updateProductToCategoryCtx.productId" from-field="productId"/>
            <set field="updateProductToCategoryCtx.sequenceNum" from-field="sequenceNum" set-if-null="true"/>
            <if-compare field="fromDate" operator="not-equals" value="null">
                <set field="updateProductToCategoryCtx.fromDate" from-field="fromDate" type="Timestamp"/>
            </if-compare>
            <call-service service-name="updateProductToCategory" in-map-name="updateProductToCategoryCtx"/>
        </iterate-map>
        
        <field-to-result field="parameters.productCategoryId" result-name="productCategoryId"/>
        <entity-one value-field="productCategory" entity-name="ProductCategory"/>
        <set field="argListNames[]" from-field="productCategory.categoryName"/>
        <property-to-field resource="OSafeAdminUiLabels" property="PLPSequenceSavedSuccess" field="plpSequenceSavedSuccess" arg-list-name="argListNames"/>
        <string-to-list string="${plpSequenceSavedSuccess}" list="successMessageList"/>
    </simple-method>
    
    <simple-method method-name="updateProductMetatagContent" short-description="Update Product Contents">
        <set field="updateProductText.productId" from-field="parameters.productId"/>
        <set field="productSeoUrlUnique" value="true"/>
        <if-not-empty field="parameters.seoUrl">
            <call-object-method method-name="trim" obj-field="parameters.seoUrl" ret-field="parameters.seoUrl"/>
        	<call-object-method method-name="toUpperCase" obj-field="parameters.seoUrl" ret-field="productSeoUrlUpCase"/>
            <entity-condition list="productList" entity-name="Product">
	            <condition-list combine="and">
	                <condition-expr field-name="productName" from-field="productSeoUrlUpCase" ignore-case="true"/>
	                <condition-expr field-name="isVariant" value="N"/>
	            </condition-list>
	        </entity-condition>
            <if-not-empty field="productList">
                <iterate entry="product" list="productList">
                    <if-compare-field operator="not-equals" field="product.productId" to-field="parameters.productId">
                        <set field="productSeoUrlUnique" value="false"/>
                    </if-compare-field>
                </iterate>
            </if-not-empty>
            <if-compare operator="equals" value="true" field="productSeoUrlUnique">
            	<set value="PRODUCT_NAME" field="productContentAndTextMap.productContentTypeId"/>
          		<find-by-and list="productContentAndTextList" map="productContentAndTextMap" entity-name="ProductContentAndText"/>
	            <if-not-empty field="productContentAndTextList">
	                <iterate entry="productContentAndText" list="productContentAndTextList">
	                	<set field="productTextDataName" from-field="productContentAndText.textData" type="String"/>
	                	<call-object-method obj-field="productTextDataName" method-name="toUpperCase" ret-field="productTextDataName"/>
	                	<if-compare-field operator="equals" field="productTextDataName" to-field="productSeoUrlUpCase">
		                    <if-compare-field operator="not-equals" field="productContentAndText.productId" to-field="parameters.productId">
		                        <set field="findProductCtx.productId" from-field="productContentAndText.productId"/>
		                        <find-by-primary-key value-field="productByContent" map="findProductCtx" entity-name="Product"/>
		                        <if-compare operator="equals" field="productByContent.isVariant" value="N">
		                            <set field="productSeoUrlUnique" value="false"/>
		                        </if-compare>
		                    </if-compare-field>
	                    </if-compare-field>
	                </iterate>
	            </if-not-empty>
            </if-compare>
            <if-compare operator="equals" value="true" field="productSeoUrlUnique">
            	<set value="SEO_PAGE_URL" field="productContentAndTextMap.productContentTypeId"/>
          		<find-by-and list="productContentAndTextList" map="productContentAndTextMap" entity-name="ProductContentAndText"/>
	            <if-not-empty field="productContentAndTextList">
	                <iterate entry="productContentAndText" list="productContentAndTextList">
	                	<set field="productTextDataName" from-field="productContentAndText.textData" type="String"/>
	                	<call-object-method obj-field="productTextDataName" method-name="toUpperCase" ret-field="productTextDataName"/>
	                	<if-compare-field operator="equals" field="productTextDataName" to-field="productSeoUrlUpCase">
		                    <if-compare-field operator="not-equals" field="productContentAndText.productId" to-field="parameters.productId">
		                        <set field="findProductCtx.productId" from-field="productContentAndText.productId"/>
		                        <find-by-primary-key value-field="productByContent" map="findProductCtx" entity-name="Product"/>
		                        <if-compare operator="equals" field="productByContent.isVariant" value="N">
		                            <set field="productSeoUrlUnique" value="false"/>
		                        </if-compare>
		                    </if-compare-field>
	                    </if-compare-field>
	                </iterate>
	            </if-not-empty>
            </if-compare>
            <if-compare operator="equals" value="false" field="productSeoUrlUnique" type="String">
                <set field="argListNames[]" from-field="parameters.seoUrl"/>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="UniqueProductSeoUrlError" arg-list-name="argListNames"/>
          		    <string-to-list string="${tempErrorMessage}" message-field="seoUrl" list="error_list"/>
          		    <clear-field field="argListNames"/>
            </if-compare>
	    </if-not-empty>
	    
	    <check-errors/>
	    
	    <if-compare operator="equals" value="true" field="productSeoUrlUnique" type="String">
	    	<!-- For SEO_PAGE_URL Product Content -->
	        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductSeoUrlCtx"/>
	        <set field="updateProductSeoUrlCtx.text" from-field="parameters.seoUrl"/>
	        <set field="updateProductSeoUrlCtx.productContentTypeId" value="SEO_PAGE_URL"/>
	        <call-service service-name="updateProductContentText" in-map-name="updateProductSeoUrlCtx"/>
	    </if-compare>
	    
        <!-- For HTML_PAGE_TITLE Product Content -->
        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductMetaTitleCtx"/>
        <set field="updateProductMetaTitleCtx.text" from-field="parameters.metaTitle"/>
        <set field="updateProductMetaTitleCtx.productContentTypeId" value="HTML_PAGE_TITLE"/>
        <call-service service-name="updateProductContentText" in-map-name="updateProductMetaTitleCtx"/>
            
        <!-- For HTML_PAGE_META_DESC Product Content -->
        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductMetaDescCtx"/>
        <set field="updateProductMetaDescCtx.text" from-field="parameters.metaDesc"/>
        <set field="updateProductMetaDescCtx.productContentTypeId" value="HTML_PAGE_META_DESC"/>
        <call-service service-name="updateProductContentText" in-map-name="updateProductMetaDescCtx"/>
            
        <!-- For HTML_PAGE_META_KEY Product Content --> 
        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductMetaKeyCtx"/>
        <set field="updateProductMetaKeyCtx.text" from-field="parameters.metaKeyword"/>
        <set field="updateProductMetaKeyCtx.productContentTypeId" value="HTML_PAGE_META_KEY"/>
        <call-service service-name="updateProductContentText" in-map-name="updateProductMetaKeyCtx"/>
        
        
        <!-- For CANONICAL_URL Product Category Content --> 
        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductCanonicalUrlCtx"/>
        <set field="updateProductCanonicalUrlCtx.text" from-field="parameters.canonicalUrl"/>
        <set field="updateProductCanonicalUrlCtx.productContentTypeId" value="CANONICAL_URL"/>
        <call-service service-name="updateProductContentText" in-map-name="updateProductCanonicalUrlCtx"/>
            
        <!-- Clear the Product Content Rendered Cache -->
        <call-class-method class-name="org.ofbiz.base.util.cache.UtilCache"  method-name="clearCache">
            <string value="product.content.rendered"/>
        </call-class-method>
    </simple-method>
    
    <simple-method method-name="updateProductImageAndContent" short-description="Method to update images and content for product">
        <property-to-field resource="OsafeProperties" property="osafeThemeServer" field="osafeThemeServerPath"/>
        <if-compare operator="equals" value="file" field="parameters.largeImageResourceType">
            <if-not-empty field="parameters._largeImage_fileName">
                <set field="largeImageTargetPath" value="${osafeThemeServerPath}${parameters.largeImageFilePath}"/>
                <create-object class-name="java.io.File" field="largeImageTargetPathFile">
                    <field field="largeImageTargetPath" type="String"/>
                </create-object>
                <if-not-empty field="parameters.largeImageFilePath">
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
	                    <field field="parameters.largeImageFilePath"/>
	                </call-class-method>
	                <if-compare operator="equals" value="false" field="isValidURL">
	                    <call-object-method method-name="exists" obj-field="largeImageTargetPathFile" ret-field="islargeImageTargetPathFile"/>
		                <if-compare operator="equals" value="false" field="islargeImageTargetPathFile" type="Boolean">
		                    <clear-field field="argListNames"/>
		                    <set field="argListNames[]" from-field="parameters.largeImageFilePath"/>
		                    <set field="argListNames[]" value="Large"/>
		                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathNotExistError" arg-list-name="argListNames"/>
		                    <string-to-list string="${tempErrorMessage}" message-field="largeImageFilePath" list="error_list"/>
		                </if-compare>
		            <else>
		                <clear-field field="argListNames"/>
		                <set field="argListNames[]" from-field="parameters.largeImageFilePath"/>
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathURLError" arg-list-name="argListNames"/>
		                <string-to-list string="${tempErrorMessage}" message-field="largeImageFilePath" list="error_list"/>
		            </else>
	                </if-compare>
	            <else>
	                <clear-field field="argListNames"/>
	                <set field="argListNames[]" value="Large"/>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathBlankError" arg-list-name="argListNames"/>
		            <string-to-list string="${tempErrorMessage}" message-field="largeImageFilePath" list="error_list"/>
	            </else>
                </if-not-empty>
            </if-not-empty>
        <else>
            <if-not-empty field="parameters.largeImageUrlRef">
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
                    <field field="parameters.largeImageUrlRef"/>
                </call-class-method>
                <if-compare operator="equals" value="false" field="isValidURL">
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	                <string-to-list string="${tempErrorMessage}" message-field="largeImageUrlRef" list="error_list"/>
                </if-compare>
            <else>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	            <string-to-list string="${tempErrorMessage}" message-field="largeImageUrlRef" list="error_list"/>
            </else>
            </if-not-empty>
        </else>
        </if-compare>
        
        <if-compare operator="equals" value="file" field="parameters.thumbnailImageResourceType">
            <if-not-empty field="parameters._thumbnailImage_fileName">
                <set field="thumbnailImageTargetPath" value="${osafeThemeServerPath}${parameters.thumbnailImageFilePath}"/>
                <create-object class-name="java.io.File" field="thumbnailImageTargetPathFile">
                    <field field="thumbnailImageTargetPath" type="String"/>
                </create-object>
                <if-not-empty field="parameters.thumbnailImageFilePath">
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
	                    <field field="parameters.thumbnailImageFilePath"/>
	                </call-class-method>
	                <if-compare operator="equals" value="false" field="isValidURL">
	                    <call-object-method method-name="exists" obj-field="thumbnailImageTargetPathFile" ret-field="isThumbnailImageTargetPathFile"/>
		                <if-compare operator="equals" value="false" field="isThumbnailImageTargetPathFile" type="Boolean">
		                    <clear-field field="argListNames"/>
		                    <set field="argListNames[]" from-field="parameters.thumbnailImageFilePath"/>
		                    <set field="argListNames[]" value="Thumbnail"/>
		                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathNotExistError" arg-list-name="argListNames"/>
		                    <string-to-list string="${tempErrorMessage}" message-field="thumbnailImageFilePath" list="error_list"/>
		                </if-compare>
		            <else>
		                <clear-field field="argListNames"/>
		                <set field="argListNames[]" from-field="parameters.thumbnailImageFilePath"/>
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathURLError" arg-list-name="argListNames"/>
		                <string-to-list string="${tempErrorMessage}" message-field="thumbnailImageFilePath" list="error_list"/>
		            </else>
	                </if-compare>
	            <else>
	                <clear-field field="argListNames"/>
	                <set field="argListNames[]" value="Thumbnail"/>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathBlankError" arg-list-name="argListNames"/>
		            <string-to-list string="${tempErrorMessage}" message-field="thumbnailImageFilePath" list="error_list"/>
	            </else>
                </if-not-empty>
            </if-not-empty>
        <else>
            <if-not-empty field="parameters.thumbnailImageUrlRef">
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
                    <field field="parameters.thumbnailImageUrlRef"/>
                </call-class-method>
                <if-compare operator="equals" value="false" field="isValidURL">
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	                <string-to-list string="${tempErrorMessage}" message-field="thumbnailImageUrlRef" list="error_list"/>
                </if-compare>
            <else>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	            <string-to-list string="${tempErrorMessage}" message-field="thumbnailImageUrlRef" list="error_list"/>
            </else>
            </if-not-empty>
        </else>
        </if-compare>
        
        <if-compare operator="equals" value="file" field="parameters.detailImageResourceType">
            <if-not-empty field="parameters._detailImage_fileName">
                <set field="detailImageTargetPath" value="${osafeThemeServerPath}${parameters.detailImageFilePath}"/>
                <create-object class-name="java.io.File" field="detailImageTargetPathFile">
                    <field field="detailImageTargetPath" type="String"/>
                </create-object>
                <if-not-empty field="parameters.detailImageFilePath">
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
	                    <field field="parameters.detailImageFilePath"/>
	                </call-class-method>
	                <if-compare operator="equals" value="false" field="isValidURL">
	                    <call-object-method method-name="exists" obj-field="detailImageTargetPathFile" ret-field="isDetailImageTargetPathFile"/>
		                <if-compare operator="equals" value="false" field="isDetailImageTargetPathFile" type="Boolean">
		                    <clear-field field="argListNames"/>
		                    <set field="argListNames[]" from-field="parameters.detailImageFilePath"/>
		                    <set field="argListNames[]" value="Detail"/>
		                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathNotExistError" arg-list-name="argListNames"/>
		                    <string-to-list string="${tempErrorMessage}" message-field="detailImageFilePath" list="error_list"/>
		                </if-compare>
		            <else>
		                <clear-field field="argListNames"/>
		                <set field="argListNames[]" from-field="parameters.detailImageFilePath"/>
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathURLError" arg-list-name="argListNames"/>
		                <string-to-list string="${tempErrorMessage}" message-field="detailImageFilePath" list="error_list"/>
		            </else>
	                </if-compare>
	            <else>
	                <clear-field field="argListNames"/>
	                <set field="argListNames[]" value="Detail"/>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathBlankError" arg-list-name="argListNames"/>
		            <string-to-list string="${tempErrorMessage}" message-field="detailImageFilePath" list="error_list"/>
	            </else>
                </if-not-empty>
            </if-not-empty>
        <else>
            <if-not-empty field="parameters.detailImageUrlRef">
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
                    <field field="parameters.detailImageUrlRef"/>
                </call-class-method>
                <if-compare operator="equals" value="false" field="isValidURL">
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	                <string-to-list string="${tempErrorMessage}" message-field="detailImageUrlRef" list="error_list"/>
                </if-compare>
            <else>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	            <string-to-list string="${tempErrorMessage}" message-field="detailImageUrlRef" list="error_list"/>
            </else>
            </if-not-empty>
        </else>
        </if-compare>
        
        <if-compare operator="equals" value="file" field="parameters.smallImageResourceType">
            <if-not-empty field="parameters._smallImage_fileName">
                <set field="smallImageTargetPath" value="${osafeThemeServerPath}${parameters.smallImageFilePath}"/>
                <create-object class-name="java.io.File" field="smallImageTargetPathFile">
                    <field field="smallImageTargetPath" type="String"/>
                </create-object>
                <if-not-empty field="parameters.smallImageFilePath">
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
	                    <field field="parameters.smallImageFilePath"/>
	                </call-class-method>
	                <if-compare operator="equals" value="false" field="isValidURL">
	                    <call-object-method method-name="exists" obj-field="smallImageTargetPathFile" ret-field="isSmallImageTargetPathFile"/>
		                <if-compare operator="equals" value="false" field="isSmallImageTargetPathFile" type="Boolean">
		                    <clear-field field="argListNames"/>
		                    <set field="argListNames[]" from-field="parameters.smallImageFilePath"/>
		                    <set field="argListNames[]" value="Small"/>
		                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathNotExistError" arg-list-name="argListNames"/>
		                    <string-to-list string="${tempErrorMessage}" message-field="smallImageTargetPathFile" list="error_list"/>
		                </if-compare>
		            <else>
		                <clear-field field="argListNames"/>
		                <set field="argListNames[]" from-field="parameters.smallImageFilePath"/>
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathURLError" arg-list-name="argListNames"/>
		                <string-to-list string="${tempErrorMessage}" message-field="smallImageTargetPathFile" list="error_list"/>
		            </else>
	                </if-compare>
	            <else>
	                <clear-field field="argListNames"/>
	                <set field="argListNames[]" value="Small"/>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathBlankError" arg-list-name="argListNames"/>
		            <string-to-list string="${tempErrorMessage}" message-field="smallImageTargetPathFile" list="error_list"/>
	            </else>
                </if-not-empty>
            </if-not-empty>
        <else>
            <if-not-empty field="parameters.smallImageUrlRef">
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
                    <field field="parameters.smallImageUrlRef"/>
                </call-class-method>
                <if-compare operator="equals" value="false" field="isValidURL">
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	                <string-to-list string="${tempErrorMessage}" message-field="smallImageUrlRef" list="error_list"/>
                </if-compare>
            <else>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	            <string-to-list string="${tempErrorMessage}" message-field="smallImageUrlRef" list="error_list"/>
            </else>
            </if-not-empty>
        </else>
        </if-compare>
        
        <if-compare operator="equals" value="file" field="parameters.smallAltImageResourceType">
            <if-not-empty field="parameters._smallAltImage_fileName">
                <set field="smallAltImageTargetPath" value="${osafeThemeServerPath}${parameters.smallAltImageFilePath}"/>
                <create-object class-name="java.io.File" field="smallAltImageTargetPathFile">
                    <field field="smallAltImageTargetPath" type="String"/>
                </create-object>
                <if-not-empty field="parameters.smallAltImageFilePath">
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
	                    <field field="parameters.smallAltImageFilePath"/>
	                </call-class-method>
	                <if-compare operator="equals" value="false" field="isValidURL">
	                    <call-object-method method-name="exists" obj-field="smallAltImageTargetPathFile" ret-field="isSmallAltImageTargetPathFile"/>
		                <if-compare operator="equals" value="false" field="isSmallAltImageTargetPathFile" type="Boolean">
		                    <clear-field field="argListNames"/>
		                    <set field="argListNames[]" from-field="parameters.smallAltImageFilePath"/>
		                    <set field="argListNames[]" value="Small ALT"/>
		                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathNotExistError" arg-list-name="argListNames"/>
		                    <string-to-list string="${tempErrorMessage}" message-field="smallAltImageFilePath" list="error_list"/>
		                </if-compare>
		            <else>
		                <clear-field field="argListNames"/>
		                <set field="argListNames[]" from-field="parameters.smallAltImageFilePath"/>
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathURLError" arg-list-name="argListNames"/>
		                <string-to-list string="${tempErrorMessage}" message-field="smallAltImageFilePath" list="error_list"/>
		            </else>
	                </if-compare>
	            <else>
	                <clear-field field="argListNames"/>
	                <set field="argListNames[]" value="Small ALT"/>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathBlankError" arg-list-name="argListNames"/>
		            <string-to-list string="${tempErrorMessage}" message-field="smallAltImageFilePath" list="error_list"/>
	            </else>
                </if-not-empty>
            </if-not-empty>
        <else>
            <if-not-empty field="parameters.smallAltImageUrlRef">
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
                    <field field="parameters.smallAltImageUrlRef"/>
                </call-class-method>
                <if-compare operator="equals" value="false" field="isValidURL">
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	                <string-to-list string="${tempErrorMessage}" message-field="smallAltImageUrlRef" list="error_list"/>
                </if-compare>
            <else>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	            <string-to-list string="${tempErrorMessage}" message-field="smallAltImageUrlRef" list="error_list"/>
            </else>
            </if-not-empty>
        </else>
        </if-compare>
        
        <!-- Validating alternate images -->
        <set field="largeImageMap" from-field="parameters.altLargeImage"/>
        <map-to-map map="parameters.altLargeImageResourceType" to-map="largeImageResourceTypeMap"/>
        <map-to-map map="parameters.altLargeImageFilePath" to-map="largeImageFilePathMap"/>
        <map-to-map map="parameters.altLargeImageUrlRef" to-map="largeImageUrlRefMap"/>
        
        <set field="thumbImageMap" from-field="parameters.altThumbImage"/>
        <map-to-map map="parameters.altThumbnailImageResourceType" to-map="thumbnailImageResourceTypeMap"/>
        <map-to-map map="parameters.altThumbnailImageFilePath" to-map="thumbnailImageFilePathMap"/>
        <map-to-map map="parameters.altThumbnailImageUrlRef" to-map="thumbnailImageUrlRefMap"/>
        
        <set field="detailImageMap" from-field="parameters.altDetailImage"/>
        <map-to-map map="parameters.altDetailImageResourceType" to-map="detailImageResourceTypeMap"/>
        <map-to-map map="parameters.altDetailImageFilePath" to-map="detailImageFilePathMap"/>
        <map-to-map map="parameters.altDetailImageUrlRef" to-map="detailImageUrlRefMap"/>
        
        <iterate-map key="largeImageKey" value="largeImageValue" map="largeImageResourceTypeMap">
	        <if-compare operator="equals" value="url" field="largeImageResourceTypeMap.${largeImageKey}">
	            <if-not-empty field="largeImageUrlRefMap.${largeImageKey}">
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
	                    <field field="largeImageUrlRefMap.${largeImageKey}"/>
	                </call-class-method>
	                <if-compare operator="equals" value="false" field="isValidURL">
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
		                <string-to-list string="${tempErrorMessage}" message-field="largeImageUrlRefMap.${largeImageKey}" list="error_list"/>
	                </if-compare>
	            <else>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
		            <string-to-list string="${tempErrorMessage}" message-field="largeImageUrlRefMap.${largeImageKey}" list="error_list"/>
	            </else>
	            </if-not-empty>
	        <else>
	            <if-not-empty field="largeImageMap._${largeImageKey}_fileName">
	                <set field="largeImageFilePath" from-field="largeImageFilePathMap.${largeImageKey}"/>
	                <set field="largeImageTargetPath" value="${osafeThemeServerPath}${largeImageFilePath}"/>
	                <create-object class-name="java.io.File" field="largeImageTargetPathFile">
	                    <field field="largeImageTargetPath" type="String"/>
	                </create-object>
	                <if-not-empty field="largeImageFilePath">
		                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
		                    <field field="largeImageFilePath"/>
		                </call-class-method>
		                <if-compare operator="equals" value="false" field="isValidURL">
		                    <call-object-method method-name="exists" obj-field="largeImageTargetPathFile" ret-field="islargeImageTargetPathFile"/>
			                <if-compare operator="equals" value="false" field="islargeImageTargetPathFile" type="Boolean">
			                    <clear-field field="argListNames"/>
			                    <set field="argListNames[]" from-field="largeImageFilePath"/>
			                    <set field="argListNames[]" value="Alt Large ${largeImageKey}"/>
			                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathNotExistError" arg-list-name="argListNames"/>
			                    <string-to-list string="${tempErrorMessage}" message-field="largeImageMap._${largeImageKey}_fileName" list="error_list"/>
			                </if-compare>
			            <else>
			                <clear-field field="argListNames"/>
			                <set field="argListNames[]" from-field="largeImageFilePath"/>
			                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathURLError" arg-list-name="argListNames"/>
			                <string-to-list string="${tempErrorMessage}" message-field="largeImageMap._${largeImageKey}_fileName" list="error_list"/>
			            </else>
		                </if-compare>
		            <else>
		                <clear-field field="argListNames"/>
		                <set field="argListNames[]" value="Alt Large ${largeImageKey}"/>
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathBlankError" arg-list-name="argListNames"/>
			            <string-to-list string="${tempErrorMessage}" message-field="largeImageMap._${largeImageKey}_fileName" list="error_list"/>
		            </else>
	                </if-not-empty>
	            </if-not-empty>
	        </else>
	        </if-compare>
	        
	        <if-compare operator="equals" value="url" field="thumbnailImageResourceTypeMap.${largeImageKey}">
	            <if-not-empty field="thumbnailImageUrlRefMap.${largeImageKey}">
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
	                    <field field="thumbnailImageUrlRefMap.${largeImageKey}"/>
	                </call-class-method>
	                <if-compare operator="equals" value="false" field="isValidURL">
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
		                <string-to-list string="${tempErrorMessage}" message-field="thumbnailImageResourceTypeMap.${largeImageKey}" list="error_list"/>
	                </if-compare>
	            <else>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
		            <string-to-list string="${tempErrorMessage}" message-field="thumbnailImageResourceTypeMap.${largeImageKey}" list="error_list"/>
	            </else>
	            </if-not-empty>
	        <else>
	            <if-not-empty field="thumbImageMap._${largeImageKey}_fileName">
	                <set field="thumbnailImageFilePath" from-field="thumbnailImageFilePathMap.${largeImageKey}"/>
	                <set field="thumbnailImageTargetPath" value="${osafeThemeServerPath}${thumbnailImageFilePath}"/>
	                <create-object class-name="java.io.File" field="thumbnailImageTargetPathFile">
	                    <field field="thumbnailImageTargetPath" type="String"/>
	                </create-object>
	                <if-not-empty field="thumbnailImageFilePath">
		                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
		                    <field field="thumbnailImageFilePath"/>
		                </call-class-method>
		                <if-compare operator="equals" value="false" field="isValidURL">
		                    <call-object-method method-name="exists" obj-field="thumbnailImageTargetPathFile" ret-field="isThumbnailImageTargetPathFile"/>
			                <if-compare operator="equals" value="false" field="isThumbnailImageTargetPathFile" type="Boolean">
			                    <clear-field field="argListNames"/>
			                    <set field="argListNames[]" from-field="thumbnailImageFilePath"/>
			                    <set field="argListNames[]" value="Alt Thumbnail ${largeImageKey}"/>
			                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathNotExistError" arg-list-name="argListNames"/>
			                    <string-to-list string="${tempErrorMessage}" message-field="thumbImageMap._${largeImageKey}_fileName" list="error_list"/>
			                </if-compare>
			            <else>
			                <clear-field field="argListNames"/>
			                <set field="argListNames[]" from-field="thumbnailImageFilePath"/>
			                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathURLError" arg-list-name="argListNames"/>
			                <string-to-list string="${tempErrorMessage}" message-field="thumbImageMap._${largeImageKey}_fileName" list="error_list"/>
			            </else>
		                </if-compare>
		            <else>
		                <clear-field field="argListNames"/>
		                <set field="argListNames[]" value="Alt Thumbnail ${largeImageKey}"/>
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathBlankError" arg-list-name="argListNames"/>
			            <string-to-list string="${tempErrorMessage}" message-field="thumbImageMap._${largeImageKey}_fileName" list="error_list"/>
		            </else>
	                </if-not-empty>
	            </if-not-empty>
	        </else>
	        </if-compare>
	        
	        <if-compare operator="equals" value="url" field="detailImageResourceTypeMap.${largeImageKey}">
	            <if-not-empty field="detailImageUrlRefMap.${largeImageKey}">
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
	                    <field field="detailImageUrlRefMap.${largeImageKey}"/>
	                </call-class-method>
	                <if-compare operator="equals" value="false" field="isValidURL">
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
		                <string-to-list string="${tempErrorMessage}" message-field="detailImageResourceTypeMap.${largeImageKey}" list="error_list"/>
	                </if-compare>
	            <else>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
		            <string-to-list string="${tempErrorMessage}" message-field="detailImageResourceTypeMap.${largeImageKey}" list="error_list"/>
	            </else>
	            </if-not-empty>
	        <else>
	            <if-not-empty field="detailImageMap._${largeImageKey}_fileName">
	                <set field="detailImageFilePath" from-field="detailImageFilePathMap.${largeImageKey}"/>
	                <set field="detailImageTargetPath" value="${osafeThemeServerPath}${detailImageFilePath}"/>
	                <create-object class-name="java.io.File" field="detailImageTargetPathFile">
	                    <field field="detailImageTargetPath" type="String"/>
	                </create-object>
	                <if-not-empty field="detailImageFilePath">
		                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
		                    <field field="detailImageFilePath"/>
		                </call-class-method>
		                <if-compare operator="equals" value="false" field="isValidURL">
		                    <call-object-method method-name="exists" obj-field="detailImageTargetPathFile" ret-field="isDetailImageTargetPathFile"/>
			                <if-compare operator="equals" value="false" field="isDetailImageTargetPathFile" type="Boolean">
			                    <clear-field field="argListNames"/>
			                    <set field="argListNames[]" from-field="detailImageFilePath"/>
			                    <set field="argListNames[]" value="Alt Detail ${largeImageKey}"/>
			                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathNotExistError" arg-list-name="argListNames"/>
			                    <string-to-list string="${tempErrorMessage}" message-field="detailImageMap._${largeImageKey}_fileName" list="error_list"/>
			                </if-compare>
			            <else>
			                <clear-field field="argListNames"/>
			                <set field="argListNames[]" from-field="detailImageFilePath"/>
			                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathURLError" arg-list-name="argListNames"/>
			                <string-to-list string="${tempErrorMessage}" message-field="detailImageMap._${largeImageKey}_fileName" list="error_list"/>
			            </else>
		                </if-compare>
		            <else>
		                <clear-field field="argListNames"/>
		                <set field="argListNames[]" value="Alt Detail ${largeImageKey}"/>
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathBlankError" arg-list-name="argListNames"/>
			            <string-to-list string="${tempErrorMessage}" message-field="detailImageMap._${largeImageKey}_fileName" list="error_list"/>
		            </else>
	                </if-not-empty>
	            </if-not-empty>
	        </else>
	        </if-compare>
        </iterate-map>
        
        <if-compare operator="equals" value="file" field="parameters.plpSwatchImageResourceType">
            <if-not-empty field="parameters._plpSwatchImage_fileName">
                <set field="plpSwatchImageTargetPath" value="${osafeThemeServerPath}${parameters.plpSwatchImageFilePath}"/>
                <create-object class-name="java.io.File" field="plpSwatchImageTargetPathFile">
                    <field field="plpSwatchImageTargetPath" type="String"/>
                </create-object>
                <if-not-empty field="parameters.plpSwatchImageFilePath">
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
	                    <field field="parameters.plpSwatchImageFilePath"/>
	                </call-class-method>
	                <if-compare operator="equals" value="false" field="isValidURL">
	                    <call-object-method method-name="exists" obj-field="plpSwatchImageTargetPathFile" ret-field="isPlpSwatchImageTargetPathFile"/>
		                <if-compare operator="equals" value="false" field="isPlpSwatchImageTargetPathFile" type="Boolean">
		                    <clear-field field="argListNames"/>
		                    <set field="argListNames[]" from-field="parameters.plpSwatchImageFilePath"/>
		                    <set field="argListNames[]" value="PLP Swatch"/>
		                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathNotExistError" arg-list-name="argListNames"/>
		                    <string-to-list string="${tempErrorMessage}" message-field="_plpSwatchImage_fileName" list="error_list"/>
		                </if-compare>
		            <else>
		                <clear-field field="argListNames"/>
		                <set field="argListNames[]" from-field="parameters.plpSwatchImageFilePath"/>
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathURLError" arg-list-name="argListNames"/>
		                <string-to-list string="${tempErrorMessage}" message-field="_plpSwatchImage_fileName" list="error_list"/>
		            </else>
	                </if-compare>
	            <else>
	                <clear-field field="argListNames"/>
	                <set field="argListNames[]" value="PLP Swatch"/>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathBlankError" arg-list-name="argListNames"/>
		            <string-to-list string="${tempErrorMessage}" message-field="_plpSwatchImage_fileName" list="error_list"/>
	            </else>
                </if-not-empty>
            </if-not-empty>
        <else>
            <if-not-empty field="parameters.plpSwatchImageUrlRef">
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
                    <field field="parameters.plpSwatchImageUrlRef"/>
                </call-class-method>
                <if-compare operator="equals" value="false" field="isValidURL">
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	                <string-to-list string="${tempErrorMessage}" message-field="_plpSwatchImage_fileName" list="error_list"/>
                </if-compare>
            <else>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	            <string-to-list string="${tempErrorMessage}" message-field="_plpSwatchImage_fileName" list="error_list"/>
            </else>
            </if-not-empty>
        </else>
        </if-compare>
        
        <if-compare operator="equals" value="file" field="parameters.pdpSwatchImageResourceType">
            <if-not-empty field="parameters._pdpSwatchImage_fileName">
                <set field="pdpSwatchImageTargetPath" value="${osafeThemeServerPath}${parameters.pdpSwatchImageFilePath}"/>
                <create-object class-name="java.io.File" field="pdpSwatchImageTargetPathFile">
                    <field field="pdpSwatchImageTargetPath" type="String"/>
                </create-object>
                <if-not-empty field="parameters.pdpSwatchImageFilePath">
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
	                    <field field="parameters.pdpSwatchImageFilePath"/>
	                </call-class-method>
	                <if-compare operator="equals" value="false" field="isValidURL">
	                    <call-object-method method-name="exists" obj-field="pdpSwatchImageTargetPathFile" ret-field="isPdpSwatchImageTargetPathFile"/>
		                <if-compare operator="equals" value="false" field="isPdpSwatchImageTargetPathFile" type="Boolean">
		                    <clear-field field="argListNames"/>
		                    <set field="argListNames[]" from-field="parameters.pdpSwatchImageFilePath"/>
		                    <set field="argListNames[]" value="PDP Swatch"/>
		                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathNotExistError" arg-list-name="argListNames"/>
		                    <string-to-list string="${tempErrorMessage}" message-field="_pdpSwatchImage_fileName" list="error_list"/>
		                </if-compare>
		            <else>
		                <clear-field field="argListNames"/>
		                <set field="argListNames[]" from-field="parameters.pdpSwatchImageFilePath"/>
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathURLError" arg-list-name="argListNames"/>
		                <string-to-list string="${tempErrorMessage}" message-field="_pdpSwatchImage_fileName" list="error_list"/>
		            </else>
	                </if-compare>
	            <else>
	                <clear-field field="argListNames"/>
	                <set field="argListNames[]" value="PDP Swatch"/>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathBlankError" arg-list-name="argListNames"/>
		            <string-to-list string="${tempErrorMessage}" message-field="_pdpSwatchImage_fileName" list="error_list"/>
	            </else>
                </if-not-empty>
            </if-not-empty>
        <else>
            <if-not-empty field="parameters.pdpSwatchImageUrlRef">
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
                    <field field="parameters.pdpSwatchImageUrlRef"/>
                </call-class-method>
                <if-compare operator="equals" value="false" field="isValidURL">
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	                <string-to-list string="${tempErrorMessage}" message-field="pdpSwatchImageUrlRef" list="error_list"/>
                </if-compare>
            <else>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	            <string-to-list string="${tempErrorMessage}" message-field="pdpSwatchImageUrlRef" list="error_list"/>
            </else>
            </if-not-empty>
        </else>
        </if-compare>
        
        <check-errors/>
        <!-- Update Product Large Image -->        
        <set field="addProductImageAndContentMap.productId" from-field="parameters.productId"/>
	    <set field="addProductImageAndContentMap.productContentTypeId" value="LARGE_IMAGE_URL"/>
	    <set field="addProductImageAndContentMap.imageResourceType" from-field="parameters.largeImageResourceType"/>
        <if-compare operator="equals" value="file" field="parameters.largeImageResourceType">
	        <if-not-empty field="parameters._largeImage_fileName">
	            <set field="addProductImageAndContentMap.uploadedFile" from-field="parameters.largeImage"/>
	            <set field="addProductImageAndContentMap.imageFilePath" from-field="parameters.largeImageFilePath"/>
	            <set field="addProductImageAndContentMap._uploadedFile_fileName" from-field="parameters._largeImage_fileName"/>
	            <set field="addProductImageAndContentMap._uploadedFile_contentType" from-field="parameters._largeImage_contentType"/>
	            <call-service service-name="addProductImageAndContent" in-map-name="addProductImageAndContentMap"/>
	        </if-not-empty>
	    <else>
	        <set field="addProductImageAndContentMap.imageUrlRef" from-field="parameters.largeImageUrlRef"/>
	        <call-service service-name="addProductImageAndContent" in-map-name="addProductImageAndContentMap"/>
	    </else>
        </if-compare>
        <clear-field field="addProductImageAndContentMap"/>
        
        
        <!-- Update Product Thumbnail Image -->        
        <set field="addProductImageAndContentMap.productId" from-field="parameters.productId"/>
	    <set field="addProductImageAndContentMap.productContentTypeId" value="THUMBNAIL_IMAGE_URL"/>
	    <set field="addProductImageAndContentMap.imageResourceType" from-field="parameters.thumbnailImageResourceType"/>
        <if-compare operator="equals" value="file" field="parameters.thumbnailImageResourceType">
	        <if-not-empty field="parameters._thumbnailImage_fileName">
	            <set field="addProductImageAndContentMap.uploadedFile" from-field="parameters.thumbnailImage"/>
	            <set field="addProductImageAndContentMap.imageFilePath" from-field="parameters.thumbnailImageFilePath"/>
	            <set field="addProductImageAndContentMap._uploadedFile_fileName" from-field="parameters._thumbnailImage_fileName"/>
	            <set field="addProductImageAndContentMap._uploadedFile_contentType" from-field="parameters._thumbnailImage_contentType"/>
	            <call-service service-name="addProductImageAndContent" in-map-name="addProductImageAndContentMap"/>
	        </if-not-empty>
	    <else>
	        <set field="addProductImageAndContentMap.imageUrlRef" from-field="parameters.thumbnailImageUrlRef"/>
	        <call-service service-name="addProductImageAndContent" in-map-name="addProductImageAndContentMap"/>
	    </else>
        </if-compare>
        <clear-field field="addProductImageAndContentMap"/>
        
        <!-- Update Product Detail Image -->        
        <set field="addProductImageAndContentMap.productId" from-field="parameters.productId"/>
	    <set field="addProductImageAndContentMap.productContentTypeId" value="DETAIL_IMAGE_URL"/>
	    <set field="addProductImageAndContentMap.imageResourceType" from-field="parameters.detailImageResourceType"/>
        <if-compare operator="equals" value="file" field="parameters.detailImageResourceType">
	        <if-not-empty field="parameters._detailImage_fileName">
	            <set field="addProductImageAndContentMap.uploadedFile" from-field="parameters.detailImage"/>
	            <set field="addProductImageAndContentMap.imageFilePath" from-field="parameters.detailImageFilePath"/>
	            <set field="addProductImageAndContentMap._uploadedFile_fileName" from-field="parameters._detailImage_fileName"/>
	            <set field="addProductImageAndContentMap._uploadedFile_contentType" from-field="parameters._detailImage_contentType"/>
	            <call-service service-name="addProductImageAndContent" in-map-name="addProductImageAndContentMap"/>
	        </if-not-empty>
	    <else>
	        <set field="addProductImageAndContentMap.imageUrlRef" from-field="parameters.detailImageUrlRef"/>
	        <call-service service-name="addProductImageAndContent" in-map-name="addProductImageAndContentMap"/>
	    </else>
        </if-compare>
        <clear-field field="addProductImageAndContentMap"/>
        
        <!-- Update Product Samll Image -->        
        <set field="addProductImageAndContentMap.productId" from-field="parameters.productId"/>
	    <set field="addProductImageAndContentMap.productContentTypeId" value="SMALL_IMAGE_URL"/>
	    <set field="addProductImageAndContentMap.imageResourceType" from-field="parameters.smallImageResourceType"/>
        <if-compare operator="equals" value="file" field="parameters.smallImageResourceType">
	        <if-not-empty field="parameters._smallImage_fileName">
	            <set field="addProductImageAndContentMap.uploadedFile" from-field="parameters.smallImage"/>
	            <set field="addProductImageAndContentMap.imageFilePath" from-field="parameters.smallImageFilePath"/>
	            <set field="addProductImageAndContentMap._uploadedFile_fileName" from-field="parameters._smallImage_fileName"/>
	            <set field="addProductImageAndContentMap._uploadedFile_contentType" from-field="parameters._smallImage_contentType"/>
	            <call-service service-name="addProductImageAndContent" in-map-name="addProductImageAndContentMap"/>
	        </if-not-empty>
	    <else>
	        <set field="addProductImageAndContentMap.imageUrlRef" from-field="parameters.smallImageUrlRef"/>
	        <call-service service-name="addProductImageAndContent" in-map-name="addProductImageAndContentMap"/>
	    </else>
        </if-compare>
        <clear-field field="addProductImageAndContentMap"/>
        
        <!-- Update Product Small Alt Image -->        
        <set field="addProductImageAndContentMap.productId" from-field="parameters.productId"/>
	    <set field="addProductImageAndContentMap.productContentTypeId" value="SMALL_IMAGE_ALT_URL"/>
	    <set field="addProductImageAndContentMap.imageResourceType" from-field="parameters.smallAltImageResourceType"/>
        <if-compare operator="equals" value="file" field="parameters.smallAltImageResourceType">
	        <if-not-empty field="parameters._smallAltImage_fileName">
	            <set field="addProductImageAndContentMap.uploadedFile" from-field="parameters.smallAltImage"/>
	            <set field="addProductImageAndContentMap.imageFilePath" from-field="parameters.smallAltImageFilePath"/>
	            <set field="addProductImageAndContentMap._uploadedFile_fileName" from-field="parameters._smallAltImage_fileName"/>
	            <set field="addProductImageAndContentMap._uploadedFile_contentType" from-field="parameters._smallAltImage_contentType"/>
	            <call-service service-name="addProductImageAndContent" in-map-name="addProductImageAndContentMap"/>
	        </if-not-empty>
	    <else>
	        <set field="addProductImageAndContentMap.imageUrlRef" from-field="parameters.smallAltImageUrlRef"/>
	        <call-service service-name="addProductImageAndContent" in-map-name="addProductImageAndContentMap"/>
	    </else>
        </if-compare>
        <clear-field field="addProductImageAndContentMap"/>
        
        
        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updatePLPTitleCtx"/>
        <set field="updatePLPTitleCtx.text" from-field="parameters.plpTitleText"/>
        <set field="updatePLPTitleCtx.productContentTypeId" value="SMALL_IMAGE_ALT"/>
        <call-service service-name="updateProductContentText" in-map-name="updatePLPTitleCtx"/>


        <iterate-map key="largeImageKey" value="largeImageValue" map="parameters.altLargeImageResourceType">
            
            <set field="addProductImageAndContentMap.productId" from-field="parameters.productId"/>
		    <set field="addProductImageAndContentMap.productContentTypeId" value="XTRA_IMG_${largeImageKey}_LARGE"/>
		    
	        <if-compare operator="equals" value="url" field="largeImageResourceTypeMap.${largeImageKey}">
	            <set field="addProductImageAndContentMap.imageUrlRef" from-field="largeImageUrlRefMap.${largeImageKey}"/>
		        <set field="addProductImageAndContentMap.imageResourceType" value="url"/>
		        <call-service service-name="addProductImageAndContent" in-map-name="addProductImageAndContentMap"/>
		    <else>
		        <if-not-empty field="largeImageMap._${largeImageKey}_fileName">
		            <set field="addProductImageAndContentMap.uploadedFile" from-field="largeImageMap.${largeImageKey}"/>
		            <set field="addProductImageAndContentMap.imageFilePath" from-field="largeImageFilePathMap.${largeImageKey}"/>
		            <set field="addProductImageAndContentMap.imageResourceType" value="file"/>
		            <set field="addProductImageAndContentMap._uploadedFile_fileName" from-field="largeImageMap._${largeImageKey}_fileName"/>
	                <set field="addProductImageAndContentMap._uploadedFile_contentType" from-field="largeImageMap._${largeImageKey}_contentType"/>
		            <call-service service-name="addProductImageAndContent" in-map-name="addProductImageAndContentMap"/>
		        </if-not-empty>
		    </else>
	        </if-compare>
	        <clear-field field="addProductImageAndContentMap"/>
	        
	        <set field="addProductImageAndContentMap.productId" from-field="parameters.productId"/>
		    <set field="addProductImageAndContentMap.productContentTypeId" value="ADDITIONAL_IMAGE_${largeImageKey}"/>
	        <if-compare operator="equals" value="url" field="thumbnailImageResourceTypeMap.${largeImageKey}">
		        <set field="addProductImageAndContentMap.imageUrlRef" from-field="thumbnailImageUrlRefMap.${largeImageKey}"/>
		        <set field="addProductImageAndContentMap.imageResourceType" value="url"/>
		        <call-service service-name="addProductImageAndContent" in-map-name="addProductImageAndContentMap"/>
		    <else>
		        <if-not-empty field="thumbImageMap._${largeImageKey}_fileName">
		            <set field="addProductImageAndContentMap.uploadedFile" from-field="thumbImageMap.${largeImageKey}"/>
		            <set field="addProductImageAndContentMap.imageFilePath" from-field="thumbnailImageFilePathMap.${largeImageKey}"/>
		            <set field="addProductImageAndContentMap.imageResourceType" value="file"/>
		            <set field="addProductImageAndContentMap._uploadedFile_fileName" from-field="thumbImageMap._${largeImageKey}_fileName"/>
	                <set field="addProductImageAndContentMap._uploadedFile_contentType" from-field="thumbImageMap._${largeImageKey}_contentType"/>
		            <call-service service-name="addProductImageAndContent" in-map-name="addProductImageAndContentMap"/>
		        </if-not-empty>
		    </else>
	        </if-compare>
	        <clear-field field="addProductImageAndContentMap"/>
	        
	        <set field="addProductImageAndContentMap.productId" from-field="parameters.productId"/>
		    <set field="addProductImageAndContentMap.productContentTypeId" value="XTRA_IMG_${largeImageKey}_DETAIL"/>
	        <if-compare operator="equals" value="url" field="detailImageResourceTypeMap.${largeImageKey}">
	            <set field="addProductImageAndContentMap.imageUrlRef" from-field="detailImageUrlRefMap.${largeImageKey}"/>
		        <set field="addProductImageAndContentMap.imageResourceType" value="url"/>
		        <call-service service-name="addProductImageAndContent" in-map-name="addProductImageAndContentMap"/>
		    <else>
		        <if-not-empty field="detailImageMap._${largeImageKey}_fileName">
		            <set field="addProductImageAndContentMap.uploadedFile" from-field="detailImageMap.${largeImageKey}"/>
		            <set field="addProductImageAndContentMap.imageFilePath" from-field="detailImageFilePathMap.${largeImageKey}"/>
		            <set field="addProductImageAndContentMap.imageResourceType" value="file"/>
		            <set field="addProductImageAndContentMap._uploadedFile_fileName" from-field="detailImageMap._${largeImageKey}_fileName"/>
	                <set field="addProductImageAndContentMap._uploadedFile_contentType" from-field="detailImageMap._${largeImageKey}_contentType"/>
		            <call-service service-name="addProductImageAndContent" in-map-name="addProductImageAndContentMap"/>
		        </if-not-empty>
		    </else>
	        </if-compare>
	        <clear-field field="addProductImageAndContentMap"/>
        </iterate-map>
        
        <!-- Update Product PLP Swatch Image -->        
        <set field="addProductImageAndContentMap.productId" from-field="parameters.productId"/>
	    <set field="addProductImageAndContentMap.productContentTypeId" value="PLP_SWATCH_IMAGE_URL"/>
	    <set field="addProductImageAndContentMap.imageResourceType" from-field="parameters.plpSwatchImageResourceType"/>
        <if-compare operator="equals" value="file" field="parameters.plpSwatchImageResourceType">
	        <if-not-empty field="parameters._plpSwatchImage_fileName">
	            <set field="addProductImageAndContentMap.uploadedFile" from-field="parameters.plpSwatchImage"/>
	            <set field="addProductImageAndContentMap.imageFilePath" from-field="parameters.plpSwatchImageFilePath"/>
	            <set field="addProductImageAndContentMap._uploadedFile_fileName" from-field="parameters._plpSwatchImage_fileName"/>
	            <set field="addProductImageAndContentMap._uploadedFile_contentType" from-field="parameters._plpSwatchImage_contentType"/>
	            <call-service service-name="addProductImageAndContent" in-map-name="addProductImageAndContentMap"/>
	        </if-not-empty>
	    <else>
	        <set field="addProductImageAndContentMap.imageUrlRef" from-field="parameters.plpSwatchImageUrlRef"/>
	        <call-service service-name="addProductImageAndContent" in-map-name="addProductImageAndContentMap"/>
	    </else>
        </if-compare>
        <clear-field field="addProductImageAndContentMap"/>
        
        <!-- Update Product PLP Swatch Image -->        
        <set field="addProductImageAndContentMap.productId" from-field="parameters.productId"/>
	    <set field="addProductImageAndContentMap.productContentTypeId" value="PDP_SWATCH_IMAGE_URL"/>
	    <set field="addProductImageAndContentMap.imageResourceType" from-field="parameters.pdpSwatchImageResourceType"/>
        <if-compare operator="equals" value="file" field="parameters.pdpSwatchImageResourceType">
	        <if-not-empty field="parameters._pdpSwatchImage_fileName">
	            <set field="addProductImageAndContentMap.uploadedFile" from-field="parameters.pdpSwatchImage"/>
	            <set field="addProductImageAndContentMap.imageFilePath" from-field="parameters.pdpSwatchImageFilePath"/>
	            <set field="addProductImageAndContentMap._uploadedFile_fileName" from-field="parameters._pdpSwatchImage_fileName"/>
	            <set field="addProductImageAndContentMap._uploadedFile_contentType" from-field="parameters._pdpSwatchImage_contentType"/>
	            <call-service service-name="addProductImageAndContent" in-map-name="addProductImageAndContentMap"/>
	        </if-not-empty>
	    <else>
	        <set field="addProductImageAndContentMap.imageUrlRef" from-field="parameters.pdpSwatchImageUrlRef"/>
	        <call-service service-name="addProductImageAndContent" in-map-name="addProductImageAndContentMap"/>
	    </else>
        </if-compare>
        <clear-field field="addProductImageAndContentMap"/>
        
        <!-- Clear the Product Content Rendered Cache -->
        <call-class-method class-name="org.ofbiz.base.util.cache.UtilCache"  method-name="clearCache">
            <string value="product.content.rendered"/>
        </call-class-method>
    </simple-method>
    
    
    <simple-method method-name="updateProductAttachmentAndContent" short-description="Method to update images and content for product">
        <property-to-field resource="OsafeProperties" property="osafeThemeServer" field="osafeThemeServerPath"/>
        
        <!-- Validating Attachments -->
        <set field="attachmentMap" from-field="parameters.attachment"/>
        <map-to-map map="parameters.attachmentResourceType" to-map="attachResourceTypeMap"/>
        <map-to-map map="parameters.attachmentFilePath" to-map="attachFilePathMap"/>
        <map-to-map map="parameters.attachmentUrlRef" to-map="attachUrlRefMap"/>
        
        <iterate-map key="attachKey" value="attachValue" map="attachResourceTypeMap">
	        <if-compare operator="equals" value="url" field="attachResourceTypeMap.${attachKey}">
	            <if-not-empty field="attachUrlRefMap.${attachKey}">
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
	                    <field field="attachUrlRefMap.${attachKey}"/>
	                </call-class-method>
	                <if-compare operator="equals" value="false" field="isValidURL">
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
		                <string-to-list string="${tempErrorMessage}" message-field="attachUrlRefMap.${attachKey}" list="error_list"/>
	                </if-compare>
	            <else>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
		            <string-to-list string="${tempErrorMessage}" message-field="attachUrlRefMap.${attachKey}" list="error_list"/>
	            </else>
	            </if-not-empty>
	        <else>
	            <if-not-empty field="attachmentMap._${attachKey}_fileName">
	                <set field="attachFilePath" from-field="attachFilePathMap.${attachKey}"/>
	                <set field="attachTargetPath" value="${osafeThemeServerPath}${attachFilePath}"/>
	                <create-object class-name="java.io.File" field="attachTargetPathFile">
	                    <field field="attachTargetPath" type="String"/>
	                </create-object>
	                <if-not-empty field="attachFilePath">
		                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
		                    <field field="attachFilePath"/>
		                </call-class-method>
		                <if-compare operator="equals" value="false" field="isValidURL">
		                    <call-object-method method-name="exists" obj-field="attachTargetPathFile" ret-field="isAttachTargetPathFile"/>
			                <if-compare operator="equals" value="false" field="isAttachTargetPathFile" type="Boolean">
			                    <clear-field field="argListNames"/>
			                    <set field="argListNames[]" from-field="attachFilePath"/>
			                    <set field="argListNames[]" value="Product Attachment ${attachKey}"/>
			                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="AttachmentPathNotExistError" arg-list-name="argListNames"/>
			                    <string-to-list string="${tempErrorMessage}" message-field="attachmentMap._${attachKey}_fileName" list="error_list"/>
			                </if-compare>
			            <else>
			                <clear-field field="argListNames"/>
			                <set field="argListNames[]" from-field="attachFilePath"/>
			                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="AttachmentPathURLError" arg-list-name="argListNames"/>
			                <string-to-list string="${tempErrorMessage}" message-field="attachmentMap._${attachKey}_fileName" list="error_list"/>
			            </else>
		                </if-compare>
		            <else>
		                <clear-field field="argListNames"/>
		                <set field="argListNames[]" value="Product Attachment ${attachKey}"/>
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="AttachmentPathBlankError" arg-list-name="argListNames"/>
			            <string-to-list string="${tempErrorMessage}" message-field="attachmentMap._${attachKey}_fileName" list="error_list"/>
		            </else>
	                </if-not-empty>
	            </if-not-empty>
	        </else>
	        </if-compare>
        </iterate-map>
        
        <check-errors/>

        <iterate-map key="attachKey" value="attachValue" map="parameters.attachmentResourceType">
            
            <set field="addProductAttachmentAndContentMap.productId" from-field="parameters.productId"/>
		    <set field="addProductAttachmentAndContentMap.productContentTypeId" value="ATTACH_URL_0${attachKey}"/>
		    
	        <if-compare operator="equals" value="url" field="attachResourceTypeMap.${attachKey}">
	            <set field="addProductAttachmentAndContentMap.imageUrlRef" from-field="attachUrlRefMap.${attachKey}"/>
		        <set field="addProductAttachmentAndContentMap.imageResourceType" value="url"/>
		        <call-service service-name="addProductImageAndContent" in-map-name="addProductAttachmentAndContentMap"/>
		    <else>
		        <if-not-empty field="attachmentMap._${attachKey}_fileName">
		            <set field="addProductAttachmentAndContentMap.uploadedFile" from-field="attachmentMap.${attachKey}"/>
		            <set field="addProductAttachmentAndContentMap.imageFilePath" from-field="attachFilePathMap.${attachKey}"/>
		            <set field="addProductAttachmentAndContentMap.imageResourceType" value="file"/>
		            <set field="addProductAttachmentAndContentMap._uploadedFile_fileName" from-field="attachmentMap._${attachKey}_fileName"/>
	                <set field="addProductAttachmentAndContentMap._uploadedFile_contentType" from-field="attachmentMap._${attachKey}_contentType"/>
		            <call-service service-name="addProductImageAndContent" in-map-name="addProductAttachmentAndContentMap"/>
		        </if-not-empty>
		    </else>
	        </if-compare>
	        <clear-field field="addProductAttachmentAndContentMap"/>
        </iterate-map>
        
        <!-- Clear the Product Content Rendered Cache -->
        <call-class-method class-name="org.ofbiz.base.util.cache.UtilCache"  method-name="clearCache">
            <string value="product.content.rendered"/>
        </call-class-method>
    </simple-method>
    
    <simple-method method-name="createUpdateProductVideo" short-description="Method to create, update video content for product">
        <property-to-field resource="OsafeProperties" property="osafeThemeServer" field="osafeThemeServerPath"/>
        <if-compare operator="equals" value="file" field="parameters.videoUrlResourceType">
            <if-not-empty field="parameters._videoUrl_fileName">
                <set field="videoUrlTargetPath" value="${osafeThemeServerPath}${parameters.videoUrlFilePath}"/>
                <create-object class-name="java.io.File" field="videoUrlTargetPathFile">
                    <field field="videoUrlTargetPath" type="String"/>
                </create-object>
                <if-not-empty field="parameters.videoUrlFilePath">
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
	                    <field field="parameters.videoUrlFilePath"/>
	                </call-class-method>
	                <if-compare operator="equals" value="false" field="isValidURL">
	                    <call-object-method method-name="exists" obj-field="videoUrlTargetPathFile" ret-field="isVideoUrlTargetPathFile"/>
		                <if-compare operator="equals" value="false" field="isVideoUrlTargetPathFile" type="Boolean">
		                    <clear-field field="argListNames"/>
		                    <set field="argListNames[]" from-field="parameters.videoUrlFilePath"/>
		                    <set field="argListNames[]" value="Large"/>
		                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathNotExistError" arg-list-name="argListNames"/>
		                    <string-to-list string="${tempErrorMessage}" message-field="_videoUrl_fileName" list="error_list"/>
		                </if-compare>
		            <else>
		                <clear-field field="argListNames"/>
		                <set field="argListNames[]" from-field="parameters.videoUrlFilePath"/>
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathURLError" arg-list-name="argListNames"/>
		                <string-to-list string="${tempErrorMessage}" message-field="_videoUrl_fileName" list="error_list"/>
		            </else>
	                </if-compare>
	            <else>
	                <clear-field field="argListNames"/>
	                <set field="argListNames[]" value="Video"/>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathBlankError" arg-list-name="argListNames"/>
		            <string-to-list string="${tempErrorMessage}" message-field="_videoUrl_fileName" list="error_list"/>
	            </else>
                </if-not-empty>
            </if-not-empty>
        <else>
            <if-not-empty field="parameters.videoUrlUrlRef">
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
                    <field field="parameters.videoUrlUrlRef"/>
                </call-class-method>
                <if-compare operator="equals" value="false" field="isValidURL">
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	                <string-to-list string="${tempErrorMessage}" message-field="_videoUrl_fileName" list="error_list"/>
                </if-compare>
            <else>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	            <string-to-list string="${tempErrorMessage}" message-field="_videoUrl_fileName" list="error_list"/>
            </else>
            </if-not-empty>
        </else>
        </if-compare>
        
        <if-compare operator="equals" value="file" field="parameters.video360UrlResourceType">
            <if-not-empty field="parameters._video360Url_fileName">
                <set field="video360UrlTargetPath" value="${osafeThemeServerPath}${parameters.video360UrlFilePath}"/>
                <create-object class-name="java.io.File" field="video360UrlTargetPathFile">
                    <field field="video360UrlTargetPath" type="String"/>
                </create-object>
                <if-not-empty field="parameters.video360UrlFilePath">
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
	                    <field field="parameters.video360UrlFilePath"/>
	                </call-class-method>
	                <if-compare operator="equals" value="false" field="isValidURL">
	                    <call-object-method method-name="exists" obj-field="video360UrlTargetPathFile" ret-field="isVideo360UrlTargetPathFile"/>
		                <if-compare operator="equals" value="false" field="isVideo360UrlTargetPathFile" type="Boolean">
		                    <clear-field field="argListNames"/>
		                    <set field="argListNames[]" from-field="parameters.video360UrlFilePath"/>
		                    <set field="argListNames[]" value="Large"/>
		                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathNotExistError" arg-list-name="argListNames"/>
		                    <string-to-list string="${tempErrorMessage}" message-field="_video360Url_fileName" list="error_list"/>
		                </if-compare>
		            <else>
		                <clear-field field="argListNames"/>
		                <set field="argListNames[]" from-field="parameters.video360UrlFilePath"/>
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathURLError" arg-list-name="argListNames"/>
		                <string-to-list string="${tempErrorMessage}" message-field="_video360Url_fileName" list="error_list"/>
		            </else>
	                </if-compare>
	            <else>
	                <clear-field field="argListNames"/>
	                <set field="argListNames[]" value="Video 360"/>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathBlankError" arg-list-name="argListNames"/>
		            <string-to-list string="${tempErrorMessage}" message-field="_video360Url_fileName" list="error_list"/>
	            </else>
                </if-not-empty>
            </if-not-empty>
        <else>
            <if-not-empty field="parameters.video360UrlUrlRef">
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
                    <field field="parameters.video360UrlUrlRef"/>
                </call-class-method>
                <if-compare operator="equals" value="false" field="isValidURL">
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	                <string-to-list string="${tempErrorMessage}" message-field="_video360Url_fileName" list="error_list"/>
                </if-compare>
            <else>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	            <string-to-list string="${tempErrorMessage}" message-field="_video360Url_fileName" list="error_list"/>
            </else>
            </if-not-empty>
        </else>
        </if-compare>
        <check-errors/>
    
        <!-- Update Product Video Url -->        
        <set field="addProductVideoAndContentMap.productId" from-field="parameters.productId"/>
	    <set field="addProductVideoAndContentMap.productContentTypeId" value="PDP_VIDEO_URL"/>
	    <set field="addProductVideoAndContentMap.imageResourceType" from-field="parameters.videoUrlResourceType"/>
        <if-compare operator="equals" value="file" field="parameters.videoUrlResourceType">
	        <if-not-empty field="parameters._videoUrl_fileName">
	            <set field="addProductVideoAndContentMap.uploadedFile" from-field="parameters.videoUrl"/>
	            <set field="addProductVideoAndContentMap.imageFilePath" from-field="parameters.videoUrlFilePath"/>
	            <set field="addProductVideoAndContentMap._uploadedFile_fileName" from-field="parameters._videoUrl_fileName"/>
	            <set field="addProductVideoAndContentMap._uploadedFile_contentType" from-field="parameters._videoUrl_contentType"/>
	            <call-service service-name="addProductVideoAndContent" in-map-name="addProductVideoAndContentMap"/>
	        </if-not-empty>
	    <else>
	        <set field="addProductVideoAndContentMap.imageUrlRef" from-field="parameters.videoUrlUrlRef"/>
	        <call-service service-name="addProductVideoAndContent" in-map-name="addProductVideoAndContentMap"/>
	    </else>
        </if-compare>
        <clear-field field="addProductVideoAndContentMap"/>
        
        <!-- Update Product Video 360 Url -->        
        <set field="addProductVideoAndContentMap.productId" from-field="parameters.productId"/>
	    <set field="addProductVideoAndContentMap.productContentTypeId" value="PDP_VIDEO_360_URL"/>
	    <set field="addProductVideoAndContentMap.imageResourceType" from-field="parameters.video360UrlResourceType"/>
        <if-compare operator="equals" value="file" field="parameters.video360UrlResourceType">
	        <if-not-empty field="parameters._video360Url_fileName">
	            <set field="addProductVideoAndContentMap.uploadedFile" from-field="parameters.video360Url"/>
	            <set field="addProductVideoAndContentMap.imageFilePath" from-field="parameters.video360UrlFilePath"/>
	            <set field="addProductVideoAndContentMap._uploadedFile_fileName" from-field="parameters._video360Url_fileName"/>
	            <set field="addProductVideoAndContentMap._uploadedFile_contentType" from-field="parameters._video360Url_contentType"/>
	            <call-service service-name="addProductVideoAndContent" in-map-name="addProductVideoAndContentMap"/>
	        </if-not-empty>
	    <else>
	        <set field="addProductVideoAndContentMap.imageUrlRef" from-field="parameters.video360UrlUrlRef"/>
	        <call-service service-name="addProductVideoAndContent" in-map-name="addProductVideoAndContentMap"/>
	    </else>
        </if-compare>
        <clear-field field="addProductVideoAndContentMap"/>
        
        <!-- Clear the Product Content Rendered Cache -->
        <call-class-method class-name="org.ofbiz.base.util.cache.UtilCache"  method-name="clearCache">
            <string value="product.content.rendered"/>
        </call-class-method>
    </simple-method>
    
    <simple-method method-name="createUpdateProdCatContentText" short-description="Create and Update Product Category Content Text">
        <entity-and entity-name="ProductCategoryContent" list="prodCatContentList">
            <field-map field-name="productCategoryId" from-field="parameters.productCategoryId"/>
            <field-map field-name="prodCatContentTypeId" from-field="parameters.prodCatContentTypeId"/>
        </entity-and>
        <filter-list-by-date list="prodCatContentList" to-list="prodCatContents"/>
        <if-not-empty field="prodCatContents">
            <first-from-list list="prodCatContents" entry="prodCatContent"/>
            <get-related-one value-field="prodCatContent" relation-name="Content" to-value-field="content"/>
        </if-not-empty>
        <if-not-empty field="content">
            <get-related-one value-field="content" relation-name="DataResource" to-value-field="textDr"/>
            <if-not-empty field="textDr">
                <get-related-one value-field="textDr" relation-name="ElectronicText" to-value-field="text"/>
                <if-not-empty field="text">
                    <set-service-fields service-name="updateSimpleTextContent" map="text" to-map="updateSimpleText"/>
                    <set field="updateSimpleText.text" from-field="parameters.text"/>
                    <set field="updateSimpleText.textDataResourceId" from-field="text.dataResourceId"/>
                    <if-not-empty field="parameters.text">
                        <!-- Update product category content electronic text -->
                        <call-service service-name="updateSimpleTextContent" in-map-name="updateSimpleText"/>
                    <else>
                        <!-- Remove Product category content if content is exists and the text is left blank -->
                        <set-service-fields service-name="deleteProdCatContentAndText" map="prodCatContent" to-map="deleteProdCatContentCtx"/>
                        <call-service service-name="deleteProdCatContentAndText" in-map-name="deleteProdCatContentCtx"/>
                    </else>
                    </if-not-empty>
                </if-not-empty>
            </if-not-empty>
        <else>
            <if-not-empty field="parameters.text">
                <!-- Create Product Content if it is not exist -->
                <set-service-fields service-name="createSimpleTextContent" map="parameters" to-map="createSimpleTextMap"/>
                <set field="createSimpleTextMap.text" from-field="parameters.text"/>
                <call-service service-name="createSimpleTextContent" in-map-name="createSimpleTextMap">
                    <result-to-field result-name="contentId" field="createProdCatContentMap.contentId"/>
                </call-service>
                <set-service-fields service-name="createCategoryContent" map="parameters" to-map="createProdCatContentMap"/>
                <set field="createProdCatContentMap.prodCatContentTypeId" from-field="parameters.prodCatContentTypeId"/>
                <set field="createProdCatContentMap.productCategoryId" from-field="parameters.productCategoryId"/>
                <call-service service-name="createCategoryContent" in-map-name="createProdCatContentMap"/>
            </if-not-empty>
        </else>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="deleteProdCatContent" short-description="Delete Product Content And Text">
        <!-- Remove Product content if content is exists and the text is left blank -->
        <set-service-fields service-name="removeCategoryContent" map="parameters" to-map="removeCategoryContentMap"/>
        <call-service service-name="removeCategoryContent" in-map-name="removeCategoryContentMap"/>
        
        <set-service-fields service-name="removeContentAndRelated" map="parameters" to-map="removeContentAndRelatedMap"/>
        <call-service service-name="removeContentAndRelated" in-map-name="removeContentAndRelatedMap"/>
    </simple-method>
    
    <simple-method method-name="updateCategoryMetatagContent" short-description="Update Product Category Contents">
        <!-- For SEO_PAGE_URL Product Category Content -->
        <set-service-fields service-name="createUpdateProdCatContentText" map="parameters" to-map="createUpdateProdCatSeoUrlCtx"/>
        <set field="createUpdateProdCatSeoUrlCtx.text" from-field="parameters.seoUrl"/>
        <set field="createUpdateProdCatSeoUrlCtx.prodCatContentTypeId" value="SEO_PAGE_URL"/>
        <call-service service-name="createUpdateProdCatContentText" in-map-name="createUpdateProdCatSeoUrlCtx"/>
        
        <!-- For HTML_PAGE_TITLE Product Category Content -->
        <set-service-fields service-name="createUpdateProdCatContentText" map="parameters" to-map="createUpdateProdCatMetaTitleCtx"/>
        <set field="createUpdateProdCatMetaTitleCtx.text" from-field="parameters.metaTitle"/>
        <set field="createUpdateProdCatMetaTitleCtx.prodCatContentTypeId" value="HTML_PAGE_TITLE"/>
        <call-service service-name="createUpdateProdCatContentText" in-map-name="createUpdateProdCatMetaTitleCtx"/>
            
        <!-- For HTML_PAGE_META_DESC Product Category Content -->
        <set-service-fields service-name="createUpdateProdCatContentText" map="parameters" to-map="createUpdateProdCatMetaDescCtx"/>
        <set field="createUpdateProdCatMetaDescCtx.text" from-field="parameters.metaDesc"/>
        <set field="createUpdateProdCatMetaDescCtx.prodCatContentTypeId" value="HTML_PAGE_META_DESC"/>
        <call-service service-name="createUpdateProdCatContentText" in-map-name="createUpdateProdCatMetaDescCtx"/>
            
        <!-- For HTML_PAGE_META_KEY Product Category Content --> 
        <set-service-fields service-name="createUpdateProdCatContentText" map="parameters" to-map="createUpdateProdCatMetaKeyCtx"/>
        <set field="createUpdateProdCatMetaKeyCtx.text" from-field="parameters.metaKeyword"/>
        <set field="createUpdateProdCatMetaKeyCtx.prodCatContentTypeId" value="HTML_PAGE_META_KEY"/>
        <call-service service-name="createUpdateProdCatContentText" in-map-name="createUpdateProdCatMetaKeyCtx"/>
        
        <!-- For CANONICAL_URL Product Category Content --> 
        <set-service-fields service-name="createUpdateProdCatContentText" map="parameters" to-map="createUpdateProdCatCanonicalUrlCtx"/>
        <set field="createUpdateProdCatCanonicalUrlCtx.text" from-field="parameters.canonicalUrl"/>
        <set field="createUpdateProdCatCanonicalUrlCtx.prodCatContentTypeId" value="CANONICAL_URL"/>
        <call-service service-name="createUpdateProdCatContentText" in-map-name="createUpdateProdCatCanonicalUrlCtx"/>
    </simple-method>
    
    <simple-method method-name="updateProductCategoryImage" short-description="Method to update images for category">
        <property-to-field resource="OsafeProperties" property="osafeThemeServer" field="osafeThemeServerPath"/>
        <if-compare operator="equals" value="file" field="parameters.categoryImageResourceType">
            <if-not-empty field="parameters._categoryImage_fileName">
                <set field="categoryImageTargetPath" value="${osafeThemeServerPath}${parameters.categoryImageFilePath}"/>
                <create-object class-name="java.io.File" field="categoryImageTargetPathFile">
                    <field field="categoryImageTargetPath" type="String"/>
                </create-object>
                <if-not-empty field="parameters.categoryImageFilePath">
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
	                    <field field="parameters.categoryImageFilePath"/>
	                </call-class-method>
	                <if-compare operator="equals" value="false" field="isValidURL">
	                    <call-object-method method-name="exists" obj-field="categoryImageTargetPathFile" ret-field="isCategoryImageTargetPathFile"/>
		                <if-compare operator="equals" value="false" field="isCategoryImageTargetPathFile" type="Boolean">
		                    <clear-field field="argListNames"/>
		                    <set field="argListNames[]" from-field="parameters.categoryImageFilePath"/>
		                    <set field="argListNames[]" value="Category"/>
		                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathNotExistError" arg-list-name="argListNames"/>
		                    <string-to-list string="${tempErrorMessage}" message-field="categoryImageFilePath" list="error_list"/>
		                </if-compare>
		            <else>
		                <clear-field field="argListNames"/>
		                <set field="argListNames[]" from-field="parameters.categoryImageFilePath"/>
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathURLError" arg-list-name="argListNames"/>
		                <string-to-list string="${tempErrorMessage}" message-field="categoryImageFilePath" list="error_list"/>
		            </else>
	                </if-compare>
	            <else>
	                <clear-field field="argListNames"/>
	                <set field="argListNames[]" value="Category"/>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathBlankError" arg-list-name="argListNames"/>
		            <string-to-list string="${tempErrorMessage}" message-field="categoryImageFilePath" list="error_list"/>
	            </else>
                </if-not-empty>
            </if-not-empty>
        <else>
            <if-not-empty field="parameters.categoryImageUrlRef">
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
                    <field field="parameters.categoryImageUrlRef"/>
                </call-class-method>
                <if-compare operator="equals" value="false" field="isValidURL">
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	                <string-to-list string="${tempErrorMessage}" message-field="categoryImageUrlRef" list="error_list"/>
                </if-compare>
            <else>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	            <string-to-list string="${tempErrorMessage}" message-field="categoryImageUrlRef" list="error_list"/>
            </else>
            </if-not-empty>
        </else>
        </if-compare>
        <check-errors/>
        
        <!-- Update Product Category Image -->        
        <set field="addProductCategoryImageMap.productCategoryId" from-field="parameters.productCategoryId"/>
	    <set field="addProductCategoryImageMap.imageResourceType" from-field="parameters.categoryImageResourceType"/>
        <if-compare operator="equals" value="file" field="parameters.categoryImageResourceType">
	        <if-not-empty field="parameters._categoryImage_fileName">
	            <set field="addProductCategoryImageMap.uploadedFile" from-field="parameters.categoryImage"/>
	            <set field="addProductCategoryImageMap.imageFilePath" from-field="parameters.categoryImageFilePath"/>
	            <set field="addProductCategoryImageMap._uploadedFile_fileName" from-field="parameters._categoryImage_fileName"/>
	            <set field="addProductCategoryImageMap._uploadedFile_contentType" from-field="parameters._categoryImage_contentType"/>
	            <call-service service-name="addProductCategoryImage" in-map-name="addProductCategoryImageMap"/>
	        </if-not-empty>
	    <else>
	        <set field="addProductCategoryImageMap.imageUrlRef" from-field="parameters.categoryImageUrlRef"/>
	        <call-service service-name="addProductCategoryImage" in-map-name="addProductCategoryImageMap"/>
	    </else>
        </if-compare>
    </simple-method>
    
    <simple-method method-name="manageProductAssociations" short-description="Method to update and create product assoc">
        <!-- Validating Complement Products -->
        <set field="compProductAssocTypeId" from-field="parameters.compProductAssocTypeId"/>
        <iterate-map key="productIdKey" value="productIdValue" map="parameters.compRelatedProductId">
            <field-to-list field="productIdValue" list="newCompProductIdList"/>
            <iterate-map key="relatedProductNameKey" value="relatedProductNameValue" map="parameters.compRelatedProductName">
                <if-compare-field field="productIdKey" to-field="relatedProductNameKey" operator="equals">
                    <set field="pruductNameMap.${productIdValue}" from-field="relatedProductNameValue"/>
                </if-compare-field>
            </iterate-map>
        </iterate-map>
        <if-not-empty field="newCompProductIdList">
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="findDuplicates" ret-field="dupProductIdList">
                <field field="newCompProductIdList" type="List"/>
            </call-class-method>
        </if-not-empty>
        
        <if-not-empty field="dupProductIdList">
            <iterate entry="dupProductId" list="dupProductIdList">
                <clear-field field="argListNames"/>
                <set field="argListNames[]" from-field="pruductNameMap.${dupProductId}"/>
                <property-to-field resource="OSafeAdminUiLabels" property="DuplicateComplementProductAssocError" field="tempErrorMessage" arg-list-name="argListNames"/>
                <string-to-list string="${tempErrorMessage}" message-field="pruductNameMap.${dupProductId}" list="error_list"/>
            </iterate>
        </if-not-empty>
        
        <iterate-map key="sequenceNumKey" value="sequenceNumValue" map="parameters.compSequenceNum">
            <call-simple-method method-name="validateSequenceNumber" xml-resource="component://osafeadmin/script/com/osafeadmin/events/OsafeAdminValidationEvents.xml"/>
        </iterate-map>

        <if>
            <condition>
                    <if-compare operator="equals" value="true" field="invalidSeqNum" type="Boolean"/>
            </condition>
            <then>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidComplementSequenceNumber"/>
                <string-to-list string="${tempErrorMessage}" message-field="compSequenceNum" list="error_list"/>
            </then>
        </if>
        

        <!-- Validating Accessory Products -->
        <set field="accessProductAssocTypeId" from-field="parameters.accessProductAssocTypeId"/>
        <iterate-map key="productIdKey" value="productIdValue" map="parameters.accessRelatedProductId">
            <field-to-list field="productIdValue" list="newAccessProductIdList"/>
            <iterate-map key="relatedProductNameKey" value="relatedProductNameValue" map="parameters.accessRelatedProductName">
                <if-compare-field field="productIdKey" to-field="relatedProductNameKey" operator="equals">
                    <set field="pruductNameMap.${productIdValue}" from-field="relatedProductNameValue"/>
                </if-compare-field>
            </iterate-map>
        </iterate-map>
        <if-not-empty field="newAccessProductIdList">
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="findDuplicates" ret-field="dupAccessProductIdList">
                <field field="newAccessProductIdList" type="List"/>
            </call-class-method>
        </if-not-empty>
        
        <if-not-empty field="dupAccessProductIdList">
            <iterate entry="dupProductId" list="dupAccessProductIdList">
                <clear-field field="argListNames"/>
                <set field="argListNames[]" from-field="pruductNameMap.${dupProductId}"/>
                <property-to-field resource="OSafeAdminUiLabels" property="DuplicateAccessoryProductAssocError" field="tempErrorMessage" arg-list-name="argListNames"/>
                <string-to-list string="${tempErrorMessage}" message-field="pruductNameMap.${dupProductId}" list="error_list"/>
            </iterate>
        </if-not-empty>
        
        <set field="invalidSeqNum" value="false"/>
        <set field="invalidSeqNumRange" value="false"/>
        <iterate-map key="sequenceNumKey" value="sequenceNumValue" map="parameters.accessSequenceNum">
            <call-simple-method method-name="validateSequenceNumber" xml-resource="component://osafeadmin/script/com/osafeadmin/events/OsafeAdminValidationEvents.xml"/>
        </iterate-map>

        <if>
            <condition>
                    <if-compare operator="equals" value="true" field="invalidSeqNum" type="Boolean"/>
            </condition>
            <then>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidAccessorySequenceNumber"/>
                <string-to-list string="${tempErrorMessage}" message-field="accessSequenceNum" list="error_list"/>
            </then>
        </if>
        
        <check-errors/>
        
        <set-service-fields service-name="createUpdateProductAssoc" to-map="createUpdateProductAssocCtx" map="parameters"/>
        <set field="createUpdateProductAssocCtx.productId" from-field="parameters.productId"/>
        <set field="createUpdateProductAssocCtx.productAssocTypeId" from-field="parameters.compProductAssocTypeId"/>
        <set field="createUpdateProductAssocCtx.productIdTo" from-field="parameters.compRelatedProductId"/>
        <set field="createUpdateProductAssocCtx.sequenceNum" from-field="parameters.compSequenceNum" />
        <call-service service-name="createUpdateProductAssoc" in-map-name="createUpdateProductAssocCtx"/>
        <clear-field field="createUpdateProductAssocCtx"/>
        
        <set-service-fields service-name="createUpdateProductAssoc" to-map="createUpdateProductAssocCtx" map="parameters"/>
        <set field="createUpdateProductAssocCtx.productId" from-field="parameters.productId"/>
        <set field="createUpdateProductAssocCtx.productAssocTypeId" from-field="parameters.accessProductAssocTypeId"/>
        <set field="createUpdateProductAssocCtx.productIdTo" from-field="parameters.accessRelatedProductId"/>
        <set field="createUpdateProductAssocCtx.sequenceNum" from-field="parameters.accessSequenceNum" />
        <call-service service-name="createUpdateProductAssoc" in-map-name="createUpdateProductAssocCtx"/>
                
        <set field="argListNames[]" from-field="parameters.productId"/>
        <property-to-field resource="OSafeAdminUiLabels" property="ProductAssociationSavedSuccess" field="productAssociationSavedSuccess" arg-list-name="argListNames"/>
        <string-to-list string="${productAssociationSavedSuccess}" list="successMessageList"/>
    </simple-method>
    
    
    <simple-method method-name="createUpdateProductAssoc" short-description="Method to update and create product assoc">
        <iterate-map key="productIdKey" value="productIdValue" map="parameters.productIdTo">
            <field-to-list field="productIdValue" list="newProductIdList"/>
        </iterate-map>
        <set field="productAssocTypeId" from-field="parameters.productAssocTypeId"/>
        
        <!-- sort the sequence map and make mutiple-->
        <set field="seqMutiple" value="10" type="Integer"/>
        <call-class-method method-name="setSequenceMapByMultiple" class-name="com.osafe.util.OsafeAdminUtil" ret-field="parameters.sequenceNum">
            <field field="parameters.sequenceNum" type="java.util.Map"/>
            <field field="seqMutiple" type="Integer"/>
        </call-class-method>
        
        <iterate-map key="productIdKey" value="productIdValue" map="parameters.productIdTo">
            <iterate-map key="sequenceNumKey" value="sequenceNumValue" map="parameters.sequenceNum">
                <if-compare-field field="productIdKey" to-field="sequenceNumKey" operator="equals">
                    <set field="pruductSeqMap.${productIdValue}" from-field="sequenceNumValue"/>
                </if-compare-field>
            </iterate-map>
        </iterate-map>
        
        <entity-and entity-name="ProductAssoc" list="productAssocList" filter-by-date="true">
            <field-map field-name="productId" from-field="parameters.productId"/>
            <field-map field-name="productAssocTypeId" from-field="productAssocTypeId"/>
        </entity-and>
        
        <call-bsh><![CDATA[
            List existingProductIds = org.ofbiz.entity.util.EntityUtil.getFieldListFromEntityList(productAssocList, "productIdTo", true);
            parameters.put("existingProductIds",existingProductIds);
        ]]></call-bsh>
        
        <set field="existingProductIds" from-field="parameters.existingProductIds"/>
        <if-not-empty field="newProductIdList">
            <call-bsh><![CDATA[
                List allProductIds = javolution.util.FastList.newInstance();
                allProductIds.addAll(existingProductIds);
                
                for(String newProductId : newProductIdList)
                {
                    if(!allProductIds.contains(newProductId)) {
                        allProductIds.add(newProductId);
                    }
                }
                parameters.put("allProductIds",allProductIds);
            ]]></call-bsh>
        <else>
            <call-bsh><![CDATA[
                List allProductIds = javolution.util.FastList.newInstance();
                allProductIds.addAll(existingProductIds);
                
                parameters.put("allProductIds",allProductIds);
            ]]></call-bsh>
        </else>
        </if-not-empty>
        <now-timestamp field="nowStamp"/>    
        <set field="allProductIds" from-field="parameters.allProductIds"/>
        
        <iterate entry="allProductId" list="allProductIds">
            <set field="sequNumValue" from-field="pruductSeqMap.${allProductId}"/>
            
            <entity-and entity-name="ProductAssoc" list="productAssocListToUpdate" filter-by-date="true">
                <field-map field-name="productIdTo" from-field="allProductId"/>
                <field-map field-name="productId" from-field="parameters.productId"/>
                <field-map field-name="productAssocTypeId" from-field="productAssocTypeId"/>
            </entity-and>
                    
            <if>
                <condition>
                    <and>
                        <if-compare-field field="existingProductIds" to-field="allProductId" operator="contains"/>
                        <if-compare-field field="newProductIdList" to-field="allProductId" operator="contains"/>
                    </and>
                </condition>
                <then>
                    <!-- Perform UPDATE -->
                    <first-from-list entry="productAssocToUpdate" list="productAssocListToUpdate"/>
                    <set-service-fields service-name="updateProductAssoc" map="productAssocToUpdate" to-map="updateProductAssocCtx"/>
                    <set field="updateProductAssocCtx.sequenceNum" from-field="sequNumValue" type="Long"/>
                    <call-service service-name="updateProductAssoc" in-map-name="updateProductAssocCtx"/>
                </then>
            </if>
            <if>
                <condition>
                    <and>
                        <if-compare-field field="existingProductIds" to-field="allProductId" operator="contains"/>
                        <not><if-compare-field field="newProductIdList" to-field="allProductId" operator="contains"/></not>
                    </and>
                </condition>
                <then>
                    <!-- Perform DELETE -->
                    <iterate entry="productAssoc" list="productAssocListToUpdate">
                        <set-service-fields service-name="deleteProductAssoc" map="productAssoc" to-map="productAssocCtx"/>
                        <call-service service-name="deleteProductAssoc" in-map-name="productAssocCtx"/>
                    </iterate>
                </then>
            </if>
            <if>
                <condition>
                    <and>
                        <not><if-compare-field field="existingProductIds" to-field="allProductId" operator="contains"/></not>
                        <if-compare-field field="newProductIdList" to-field="allProductId" operator="contains"/>
                    </and>
                </condition>
                <then>
                    <!-- Perform CREATE -->
                    <set field="createProductAssocCtx.fromDate" from-field="nowStamp"/>
                    <set field="createProductAssocCtx.productId" from-field="parameters.productId"/>
                    <set field="createProductAssocCtx.productIdTo" from-field="allProductId"/>
                    <set field="createProductAssocCtx.productAssocTypeId" from-field="productAssocTypeId"/>
                    <set field="createProductAssocCtx.sequenceNum" from-field="sequNumValue" type="Long"/>
                    <call-service service-name="createProductAssoc" in-map-name="createProductAssocCtx"/>
                </then>
            </if>
        </iterate>
    </simple-method>
    
    
    <simple-method method-name="createNewProduct" short-description="Method to Create Product">
        <!-- check for bad or missing values --> 
        <if-empty field="parameters.productId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankProductIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="productId" list="error_list"/>
        <else>
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidId" ret-field="isValidId">
                <field field="parameters.productId"/>
            </call-class-method>
            <if-compare field="isValidId" operator="equals" value="true">
                <set field="findProductCtx.productId" from-field="parameters.productId"/>
                <find-by-primary-key value-field="existingProductId" entity-name="Product" map="findProductCtx"/>
	            <if-not-empty field="existingProductId">
	                <set field="errorKey" from-field="parameters.productId"/>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductIdExistError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="productId" list="error_list"/>
	            </if-not-empty>
            <else>
	            <set field="errorKey" from-field="parameters.productId"/>
	            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidIdError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="productId" list="error_list"/>
            </else>
            </if-compare>
        </else>
        </if-empty>
    
        <if-empty field="parameters.productCategoryId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankProductCategoryError"/>
            <string-to-list string="${tempErrorMessage}" message-field="productCategoryId" list="error_list"/>
        <else>
            <set from-field="parameters.productCategoryId" field="findSubCatListMap.parentProductCategoryId"/>
            <find-by-and list="subCatList" map="findSubCatListMap" entity-name="ProductCategoryRollupAndChild"/>
            <filter-list-by-date list="subCatList"/>
            <if-not-empty field="subCatList">
	            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ParentProductCategoryError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="productCategoryId" list="error_list"/>
            </if-not-empty>
        </else>
        </if-empty>
        <call-object-method method-name="trim" obj-field="parameters.productDetailName" ret-field="parameters.productDetailName"/>
        <call-object-method method-name="toUpperCase" obj-field="parameters.productDetailName" ret-field="productDetailNameUpCase"/>
        <if-empty field="parameters.productDetailName">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankProductNameError"/>
            <string-to-list string="${tempErrorMessage}" message-field="productDetailName" list="error_list"/>
            <else>
            	<call-object-method method-name="length" obj-field="parameters.productDetailName" ret-field="productDetailNameLength"/>
		        <if-compare operator="greater" value="100" field="productDetailNameLength" type="Integer">
		        	<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="LongProductNameError"/>
            		<string-to-list string="${tempErrorMessage}" message-field="productDetailName" list="error_list"/>
                <else>
		            <set field="productNameUnique" value="true"/>
		            <entity-condition list="productList" entity-name="Product">
			            <condition-list combine="and">
			                <condition-expr field-name="productName" from-field="productDetailNameUpCase" ignore-case="true"/>
			                <condition-expr field-name="isVariant" value="N"/>
			            </condition-list>
			        </entity-condition>
		            
		            <if-not-empty field="productList">
		                <set field="productNameUnique" value="false"/>
		            </if-not-empty>		            
		            <if-compare operator="equals" value="true" field="productNameUnique">
			            <set value="PRODUCT_NAME" field="productContentAndTextMap.productContentTypeId"/>
            			<find-by-and list="productContentAndTextList" map="productContentAndTextMap" entity-name="ProductContentAndText"/>
			            <if-not-empty field="productContentAndTextList">
			                <iterate entry="productContentAndText" list="productContentAndTextList">
			                	<set field="productTextDataName" from-field="productContentAndText.textData" type="String"/>
			                	<call-object-method obj-field="productTextDataName" method-name="toUpperCase" ret-field="productTextDataName"/>
			                	<if-compare-field operator="equals" field="productTextDataName" to-field="productDetailNameUpCase">
			                        <set field="findProductCtx.productId" from-field="productContentAndText.productId"/>
			                        <find-by-primary-key value-field="productByContent" map="findProductCtx" entity-name="Product"/>
			                        <if-compare operator="equals" field="productByContent.isVariant" value="N">
			                            <set field="productNameUnique" value="false"/>
			                        </if-compare>
		                        </if-compare-field>
			                </iterate>
			            </if-not-empty>
		            </if-compare>
		            <if-compare operator="equals" value="false" field="productNameUnique" type="String">
		                <set field="argListNames[]" from-field="parameters.productDetailName"/>
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="UniqueProductNameAdminError" arg-list-name="argListNames"/>
            		    <string-to-list string="${tempErrorMessage}" message-field="productDetailName" list="error_list"/>
            		    <clear-field field="argListNames"/>
		            </if-compare>
                </else>
		        </if-compare>
        	</else>
	    </if-empty>
	    
        <if-not-empty field="parameters.internalName">
            <call-object-method method-name="length" obj-field="parameters.internalName" ret-field="internalNameLength"/>
		    <if-compare operator="greater" value="255" field="internalNameLength" type="Integer">
		        <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InternalNameExceedsLengthError"/>
                <string-to-list string="${tempErrorMessage}" message-field="internalName" list="error_list"/>
		    </if-compare>
        </if-not-empty>
        
        <if-empty field="parameters.longDescription">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankDetailFieldError"/>
            <string-to-list string="${tempErrorMessage}" message-field="longDescription" list="error_list"/>
        </if-empty>
        <if-empty field="parameters.listPrice">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidProductListPriceError"/>
            <string-to-list string="${tempErrorMessage}" message-field="listPrice" list="error_list"/>
            <else>
                <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="checkFloatResult">
                    <field field="parameters.listPrice"/>
                </call-class-method>
                <if-compare field="checkFloatResult" operator="equals" value="false" type="Boolean">
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductListPriceError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="listPrice" list="error_list"/>
                </if-compare>
            </else>
        </if-empty>
        <if-empty field="parameters.defaultPrice">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidProductDefaultPriceError"/>
            <string-to-list string="${tempErrorMessage}" message-field="defaultPrice" list="error_list"/>
            <else>
                <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="checkFloatResult">
                    <field field="parameters.defaultPrice"/>
                </call-class-method>
                <if-compare field="checkFloatResult" operator="equals" value="false" type="Boolean">
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductDefaultPriceError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="defaultPrice" list="error_list"/>
                </if-compare>
            </else>
        </if-empty>
        <if-not-empty field="parameters.recurringPrice">
                <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="checkFloatResult">
                    <field field="parameters.recurringPrice"/>
                </call-class-method>
                <if-compare field="checkFloatResult" operator="equals" value="false" type="Boolean">
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductRecurringPriceError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="defaultPrice" list="error_list"/>
                </if-compare>
        </if-not-empty>
        <if-not-empty field="parameters.introductionDate">
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isDateTime" ret-field="checkDateValidResult">
                <field field="parameters.introductionDate"/>
                <field field="parameters.entryDateTimeFormat"/>
            </call-class-method>
            <if-compare field="checkDateValidResult" operator="equals" value="false" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidProductIntroDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="introductionDate" list="error_list"/>
                <else>
                    <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="toTimestamp" ret-field="parameters.introductionDate">
                        <field field="parameters.introductionDate"/>
                        <field field="parameters.entryDateTimeFormat"/>
                    </call-class-method>
                </else>
            </if-compare>
        </if-not-empty>
        <if-not-empty field="parameters.salesDiscontinuationDate">
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isDateTime" ret-field="checkDateValidResult">
                <field field="parameters.salesDiscontinuationDate"/>
                <field field="parameters.entryDateTimeFormat"/>
            </call-class-method>
            <if-compare field="checkDateValidResult" operator="equals" value="false" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidProductDiscontDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="salesDiscontinuationDate" list="error_list"/>
                <else>
                    <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="toTimestamp" ret-field="parameters.salesDiscontinuationDate">
                        <field field="parameters.salesDiscontinuationDate"/>
                        <field field="parameters.entryDateTimeFormat"/>
                    </call-class-method>
                </else>
            </if-compare>
        </if-not-empty>
        
        <if-not-empty field="parameters.introductionDate">
        	<if-not-empty field="parameters.salesDiscontinuationDate">
        		<if-compare-field field="parameters.introductionDate" operator="greater" to-field="parameters.salesDiscontinuationDate" type="Timestamp">
		            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductIntroDiscCompareError"/>
		            <string-to-list string="${tempErrorMessage}" message-field="introductionDate" list="error_list"/>
		        </if-compare-field>
        	</if-not-empty>
        </if-not-empty>
        
        <set field="bfTotalInventory" from-field="parameters.bfTotalInventory" default-value="0"/>
        <set field="bfWHInventory" from-field="parameters.bfWHInventory" default-value="0"/>
        
        <if-not-empty field="bfTotalInventory"> 
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isSignedInteger" ret-field="bfTotalInventoryVaild">
               <string value="${bfTotalInventory}"></string>
            </call-class-method>
            <if-compare operator="equals" value="false" field="bfTotalInventoryVaild" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidBFTotalInventoryError"/>
                <string-to-list string="${tempErrorMessage}" message-field="bfTotalInventory" list="error_list"/>
            <else>
                <if>
                    <condition>
                    <and>
                        <if-compare operator="greater-equals" value="-9999" field="bfTotalInventory" type="Long"/>
                        <if-compare operator="less-equals" value="99999" field="bfTotalInventory" type="Long"/>
                    </and>
                    </condition>
                <then>
                </then>
                <else>
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidBFTotalInventoryError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="bfTotalInventory" list="error_list"/>
                </else>
                </if>
            </else>
            </if-compare>
        </if-not-empty>
        
        <if-not-empty field="bfWHInventory"> 
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isSignedInteger" ret-field="bfWHInventoryVaild">
               <string value="${bfWHInventory}"></string>
            </call-class-method>
            <if-compare operator="equals" value="false" field="bfWHInventoryVaild" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidBFWHInventoryError"/>
                <string-to-list string="${tempErrorMessage}" message-field="bfWHInventory" list="error_list"/>
            <else>
                <if>
                    <condition>
                    <and>
                        <if-compare operator="greater-equals" value="-9999" field="bfWHInventory" type="Long"/>
                        <if-compare operator="less-equals" value="99999" field="bfWHInventory" type="Long"/>
                    </and>
                    </condition>
                <then>
                </then>
                <else>
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidBFWHInventoryError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="bfWHInventory" list="error_list"/>
                </else>
                </if>
            </else>
            </if-compare>
        </if-not-empty>
        
        <set field="productHeight" from-field="parameters.productHeight" />
        <if-not-empty field="productHeight">
             <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isFloat" ret-field="heightVaild">
                <field field="productHeight"/>
             </call-class-method>
             <if-compare operator="equals" value="false" field="heightVaild" type="Boolean">
               <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidHeightError"/>
               <string-to-list string="${tempErrorMessage}" message-field="productHeight" list="error_list"/>
             </if-compare>
        </if-not-empty>
        <set field="productWidth" from-field="parameters.productWidth" />
        <if-not-empty field="productWidth">
             <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isFloat" ret-field="widthVaild">
                <field field="productWidth"/>
             </call-class-method>
             <if-compare operator="equals" value="false" field="widthVaild" type="Boolean">
               <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidWidthError"/>
               <string-to-list string="${tempErrorMessage}" message-field="productWidth" list="error_list"/>
             </if-compare>
        </if-not-empty>
        <set field="productDepth" from-field="parameters.productDepth" />
        <if-not-empty field="productDepth">
             <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isFloat" ret-field="depthVaild">
                <field field="productDepth"/>
             </call-class-method>
             <if-compare operator="equals" value="false" field="depthVaild" type="Boolean">
               <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidDepthError"/>
               <string-to-list string="${tempErrorMessage}" message-field="productDepth" list="error_list"/>
             </if-compare>
        </if-not-empty>
        <set field="weight" from-field="parameters.weight" />
        <if-not-empty field="weight">
             <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isFloat" ret-field="weightVaild">
                <field field="weight"/>
             </call-class-method>
             <if-compare operator="equals" value="false" field="weightVaild" type="Boolean">
               <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidWeightError"/>
               <string-to-list string="${tempErrorMessage}" message-field="weight" list="error_list"/>
             </if-compare>
        </if-not-empty>
        <!--  if-compare field="parameters.isVariant" operator="not-equals" value="Y">
            <set field="idValuesMap" from-field="parameters.idValue"/>
            <iterate-map key="goodIdentificationTypeIdKey" value="goodIdentificationTypeIdValue" map="parameters.goodIdentificationTypeId">
                <set field="idValue1" from-field="idValuesMap.${goodIdentificationTypeIdKey}"/>
                <if-not-empty field="idValue1">
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidId" ret-field="isValidId">
		                <field field="idValue1"/>
		            </call-class-method>
		            <if-compare field="isValidId" operator="equals" value="false">
		            	<set field="errorKey" from-field="idValuesMap.${goodIdentificationTypeIdKey}"/>
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidIdError"/>
		                <string-to-list string="${tempErrorMessage}" list="error_list"/>
		            </if-compare>
	            </if-not-empty>
            </iterate-map>
        </if-compare -->

        <if-compare field="parameters.isVirtual" operator="equals" value="Y">
            <set field="selectableFeatureExists" value="false" />
            <if-not-empty field="parameters.productFeatureGroupIds">
		        <iterate-map key="productFeatureGroupIdKey" value="productFeatureGroupIdValue" map="parameters.productFeatureGroupIds">
		            <if-not-empty field="parameters.productFeatureApplTypeIds">
		                <iterate-map key="productFeatureApplTypeIdKey" value="productFeatureApplTypeIdValue" map="parameters.productFeatureApplTypeIds">
			                <if-compare-field field="productFeatureGroupIdKey" to-field="productFeatureApplTypeIdKey" operator="equals">
			                    <if-compare field="productFeatureApplTypeIdValue" operator="equals" value="SELECTABLE_FEATURE">
			                        <set field="selectableFeatureExists" value="true" />
			                    </if-compare>
			                </if-compare-field>
		                </iterate-map>
		            </if-not-empty>
		        </iterate-map>
		        <call-object-method method-name="size" obj-field="parameters.productFeatureGroupIds" ret-field="productFeatureGroupIdSize"/>
		        <call-object-method method-name="size" obj-field="parameters.productFeatureApplTypeIds" ret-field="productFeatureApplTypeIdSize"/>
		        
		        <if-compare operator="equals" value="false" field="selectableFeatureExists">
		            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="SelectableFeatureNotExistError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="selectableFeatureExists" list="error_list"/>
		        </if-compare>
		        <if-compare-field operator="not-equals" field="productFeatureApplTypeIdSize" to-field="productFeatureGroupIdSize" type="Integer">
		            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="FeatureValueNotDefinedError"/>
                    <string-to-list string="${tempErrorMessage}"  message-field="productFeatureApplTypeIdSize" list="error_list"/>
		        </if-compare-field>
	        </if-not-empty>
        </if-compare>

        <if-not-empty field="parameters.productFeatureGroupIds">
	        <iterate-map key="productFeatureGroupIdKey" value="productFeatureGroupIdValue" map="parameters.productFeatureGroupIds">
	            <iterate-map key="productFeatureApplTypeIdKey" value="productFeatureApplTypeIdValue" map="parameters.productFeatureApplTypeIds">
	                <if-compare-field field="productFeatureGroupIdKey" to-field="productFeatureApplTypeIdKey" operator="equals">
	                    <!-- check if feature group is distinguish then feature id should be select -->
	                    <if-compare field="productFeatureApplTypeIdValue" operator="equals" value="DISTINGUISHING_FEAT">
	                        <iterate-map key="productFeatureIdKey" value="productFeatureIdValue" map="parameters.productFeatureIds">
		                            <if-compare-field field="productFeatureGroupIdKey" to-field="productFeatureIdKey" operator="equals">
		                                <iterate-map key="productFeatureKey" value="productFeatureValue" map="parameters.distinguishProductFeatureMulti">
		                                    <if-compare-field field="productFeatureKey" to-field="productFeatureGroupIdValue" operator="equals">
		                                        <if-empty field="productFeatureValue">
		                                            <if-empty field="productFeatureIdValue">
					                                    <entity-one entity-name="ProductFeatureGroup" value-field="productFeatureGroup">
					                                        <field-map field-name="productFeatureGroupId" from-field="productFeatureGroupIdValue"/>
					                                    </entity-one>
		                                                <clear-field field="argListNames"/>
					                                    <set field="argListNames[]" from-field="productFeatureGroup.description" default-value="productFeatureKey"/>
					                                    <property-to-field resource="OSafeAdminUiLabels" property="ProductFeatureRequiredError" field="tempErrorMessage" arg-list-name="argListNames"/>
					                                    <string-to-list string="${tempErrorMessage}" message-field="productFeatureGroupIds" list="error_list"/>
		                                			</if-empty>
		                                        </if-empty>
		                                    </if-compare-field>
		                                </iterate-map>
		                                
		                            </if-compare-field>
		                        </iterate-map>
	                    </if-compare>
	                </if-compare-field>
	            </iterate-map>
	        </iterate-map>
        <else>
            <if-not-empty field="parameters.productCategoryId">
                <if-compare field="parameters.isVirtual" operator="equals" value="Y">
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankProductCategoryFeturesError"/>
                    <string-to-list string="${tempErrorMessage}"  message-field="productCategoryId" list="error_list"/>
                </if-compare>
            </if-not-empty>
        </else>
        </if-not-empty>
        <if-compare field="parameters.isVirtual" operator="not-equals" value="Y">
            <set field="pdpQuantityMinMaxSetCount" value="0" type="Integer"/>
	        <if-not-empty field="parameters.pdpQuantityMin">
	        	<call-class-method class-name="com.osafe.util.OsafeAdminUtil" method-name="isNumber" ret-field="isNumber">
		            <field field="parameters.pdpQuantityMin"/>
		        </call-class-method>
		        <if-compare field="isNumber" operator="equals" value="false">
		            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidPdpQtyMinError"/>
		            <string-to-list string="${tempErrorMessage}" message-field="pdpQuantityMin" list="error_list"/>
			        <else>
			        	<if-compare field="parameters.pdpQuantityMin" operator="greater" value="0" type="Long">
			        		<set field="pdpQuantityMinSet" value="Y"/>
			        		<calculate field="pdpQuantityMinMaxSetCount">
			        			<calcop operator="add" >
			        				<calcop operator="get" field="pdpQuantityMinMaxSetCount"/>
	               					<number value="1"/>
			        			</calcop>
			        		</calculate>
			        		<else>
			        			<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="PdpQtyMinGreaterThanZeroError"/>
		            			<string-to-list string="${tempErrorMessage}" message-field="pdpQuantityMin" list="error_list"/>
			        		</else>
			        	</if-compare>
			        </else>
		        </if-compare>
	        </if-not-empty>
	        
	        <if-not-empty field="parameters.pdpQuantityMax">
	        	<call-class-method class-name="com.osafe.util.OsafeAdminUtil" method-name="isNumber" ret-field="isNumber">
		            <field field="parameters.pdpQuantityMax"/>
		        </call-class-method>
		        <if-compare field="isNumber" operator="equals" value="false">
		            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidPdpQtyMaxError"/>
		            <string-to-list string="${tempErrorMessage}" message-field="pdpQuantityMax" list="error_list"/>
		            <else>
		            	<calculate field="pdpQuantityMinMaxSetCount">
		        			<calcop operator="add" >
		        				<calcop operator="get" field="pdpQuantityMinMaxSetCount"/>
	              				<number value="1"/>
		        			</calcop>
		        		</calculate>
		            </else>
		        </if-compare>
	        </if-not-empty>
	        
	        <if-compare field="pdpQuantityMinMaxSetCount" operator="greater" value="0" type="Integer">
	        	<if-compare field="pdpQuantityMinMaxSetCount" operator="equals" value="1" type="Integer">
	        		<!-- if only one is entered -->
	        		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BothSetPdpQtyMinMaxError"/>
		            <string-to-list string="${tempErrorMessage}" message-field="pdpQuantityMax" list="error_list"/>
		            <else>
		            	<if-compare field="pdpQuantityMinMaxSetCount" operator="equals" value="2" type="Integer">
		            		<!-- if both are entered -->
		            		<if-compare-field field="parameters.pdpQuantityMax" operator="greater-equals" to-field="parameters.pdpQuantityMin"  type="Integer">
		            			<!-- both min and max are set and they both passed validation pdpQuantityMinMaxSetCount = 3 -->
				            	<calculate field="pdpQuantityMinMaxSetCount">
				        			<calcop operator="add" >
				        				<calcop operator="get" field="pdpQuantityMinMaxSetCount"/>
			              				<number value="1"/>
				        			</calcop>
				        		</calculate>
		            			<else>
		            				<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="PdpQtyMaxNotGreaterThanMinError"/>
		           					 <string-to-list string="${tempErrorMessage}" message-field="pdpQuantityMax" list="error_list"/>
		            			</else>
	        				</if-compare-field>
		            	</if-compare>
		            </else>
	        	</if-compare>
			</if-compare>
			
			<if-not-empty field="parameters.pdpQuantityDefault">
				<call-class-method class-name="com.osafe.util.OsafeAdminUtil" method-name="isNumber" ret-field="isNumber">
		            <field field="parameters.pdpQuantityDefault"/>
		        </call-class-method>
		        <if-compare field="isNumber" operator="equals"  value="false">
		            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidPdpQtyDefaultError"/>
		            <string-to-list string="${tempErrorMessage}" message-field="pdpQuantityDefault" list="error_list"/>
		            <else>
		            	<if-compare field="pdpQuantityMinMaxSetCount" operator="equals" value="3" type="Integer">
		            		<if-compare-field field="parameters.pdpQuantityDefault" operator="greater"  to-field="parameters.pdpQuantityMax" type="Integer">
		            			<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="PdpQtyDefaultWithinMinMaxError"/>
		           				<string-to-list string="${tempErrorMessage}" message-field="pdpQuantityDefault" list="error_list"/>
		           				<else>
		           					<if-compare-field field="parameters.pdpQuantityDefault" operator="less" to-field="parameters.pdpQuantityMin" type="Integer">
		           						<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="PdpQtyDefaultWithinMinMaxError"/>
		           						<string-to-list string="${tempErrorMessage}" message-field="pdpQuantityDefault" list="error_list"/>
		           					</if-compare-field>
		           				</else>
		            		</if-compare-field>
		            	</if-compare>
		            </else>
		        </if-compare>
			</if-not-empty>
        </if-compare>
        

        <check-errors/>
        
        <!-- create Product -->
        <set-service-fields service-name="createProduct" map="parameters" to-map="createProductCtx"/>
        <call-service service-name="createProduct" in-map-name="createProductCtx">
            <result-to-field result-name="productId" field="parameters.productId"/>
        </call-service>
        
        <!-- create ProductPrice -->
        <now-timestamp field="nowStamp"/>
        <if-not-empty field="parameters.listPrice">
            <set-service-fields service-name="createProductPrice" map="parameters" to-map="createProductPriceCtx"/>
            <set field="createProductPriceCtx.fromDate" from-field="nowStamp"/>
            <set field="createProductPriceCtx.productPricePurposeId" value="PURCHASE"/>
            <set field="createProductPriceCtx.productStoreGroupId" value="_NA_"/>
            <set field="createProductPriceCtx.productPriceTypeId" value="LIST_PRICE"/>
            <set field="createProductPriceCtx.price" from-field="parameters.listPrice" type="BigDecimal"/>
            <call-service service-name="createProductPrice" in-map-name="createProductPriceCtx"/>
            <clear-field field="createProductPriceCtx"/>
        </if-not-empty>
        <if-not-empty field="parameters.defaultPrice">
            <set-service-fields service-name="createProductPrice" map="parameters" to-map="createProductPriceCtx"/>
            <set field="createProductPriceCtx.fromDate" from-field="nowStamp"/>
            <set field="createProductPriceCtx.productPricePurposeId" value="PURCHASE"/>
            <set field="createProductPriceCtx.productStoreGroupId" value="_NA_"/>
            <set field="createProductPriceCtx.productPriceTypeId" value="DEFAULT_PRICE"/>
            <set field="createProductPriceCtx.price" from-field="parameters.defaultPrice" type="BigDecimal"/>
            <call-service service-name="createProductPrice" in-map-name="createProductPriceCtx"/>
            <clear-field field="createProductPriceCtx"/>
        </if-not-empty>
        
        <if-not-empty field="parameters.recurringPrice">
            <set-service-fields service-name="createProductPrice" map="parameters" to-map="createProductPriceCtx"/>
            <set field="createProductPriceCtx.fromDate" from-field="nowStamp"/>
            <set field="createProductPriceCtx.productPricePurposeId" value="RECURRING_CHARGE"/>
            <set field="createProductPriceCtx.productStoreGroupId" value="_NA_"/>
            <set field="createProductPriceCtx.productPriceTypeId" value="DEFAULT_PRICE"/>
            <set field="createProductPriceCtx.price" from-field="parameters.recurringPrice" type="BigDecimal"/>
            <call-service service-name="createProductPrice" in-map-name="createProductPriceCtx"/>
            <clear-field field="createProductPriceCtx"/>
        </if-not-empty>
        <!-- create ProductCategoryMember -->
        <if-not-empty field="parameters.productCategoryId">
            <set field="callCreateProductCategoryMemberMap.productId" from-field="parameters.productId"/>
            <set field="callCreateProductCategoryMemberMap.productCategoryId" from-field="parameters.productCategoryId"/>
            <call-service service-name="addProductToCategory" in-map-name="callCreateProductCategoryMemberMap"/>
        </if-not-empty>
        
        <!-- Manage Bigfish Inventory Product Attribute -->
        <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
        <set field="manageProductAttributeCtx.attrName" value="BF_INVENTORY_TOT"/>
        <set field="manageProductAttributeCtx.attrValue" from-field="bfTotalInventory"/>
        <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
        <clear-field field="manageProductAttributeCtx"/>
        
        <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
        <set field="manageProductAttributeCtx.attrName" value="BF_INVENTORY_WHS"/>
        <set field="manageProductAttributeCtx.attrValue" from-field="bfWHInventory"/>
        <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
        <clear-field field="manageProductAttributeCtx"/>
        
        <if-not-empty field="parameters.pdpInStoreOnly">
            <set field="pdpInStoreOnly" from-field="parameters.pdpInStoreOnly"/>
        <else>
            <set field="pdpInStoreOnly" value="N"/>
        </else>
        </if-not-empty>
        <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
        <set field="manageProductAttributeCtx.attrName" value="PDP_IN_STORE_ONLY"/>
        <set field="manageProductAttributeCtx.attrValue" from-field="pdpInStoreOnly"/>
        <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
        <clear-field field="manageProductAttributeCtx"/>
        
        <if-compare field="parameters.isVirtual" operator="equals" value="Y">
            <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
            <set field="manageProductAttributeCtx.attrName" value="PDP_SELECT_MULTI_VARIANT"/>
            <set field="manageProductAttributeCtx.attrValue" from-field="parameters.multiSelectVariant"/>
            <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
            <clear-field field="manageProductAttributeCtx"/>
        <else>
            <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
            <set field="manageProductAttributeCtx.attrName" value="CHECKOUT_GIFT_MESSAGE"/>
            <set field="manageProductAttributeCtx.attrValue" from-field="parameters.checkoutGiftMessage"/>
            <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
            <clear-field field="manageProductAttributeCtx"/>
            
            <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
            <set field="manageProductAttributeCtx.attrName" value="PDP_QTY_MIN"/>
            <set field="manageProductAttributeCtx.attrValue" from-field="parameters.pdpQuantityMin"/>
            <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
            <clear-field field="manageProductAttributeCtx"/>
            <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
            <set field="manageProductAttributeCtx.attrName" value="PDP_QTY_MAX"/>
            <set field="manageProductAttributeCtx.attrValue" from-field="parameters.pdpQuantityMax"/>
            <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
            <clear-field field="manageProductAttributeCtx"/>
            <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
            <set field="manageProductAttributeCtx.attrName" value="PDP_QTY_DEFAULT"/>
            <set field="manageProductAttributeCtx.attrValue" from-field="parameters.pdpQuantityDefault"/>
            <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
            <clear-field field="manageProductAttributeCtx"/>
        </else>
        </if-compare>
        
       
        
        <set field="argListNames[]" from-field="parameters.productId"/>
	    <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="htmlSpecialChars" ret-field="productDetailNamehtml">
            <field field="parameters.productDetailName"/>
        </call-class-method>
	    <set field="argListNames[]" from-field="productDetailNamehtml"/>
        <property-to-field resource="OSafeAdminUiLabels" property="ProductSavedSuccess" field="productSavedSuccess" arg-list-name="argListNames"/>
        <string-to-list string="${productSavedSuccess}" list="successMessageList"/>
        
    </simple-method>
    
    <simple-method method-name="createTopProductCategory" short-description="Method to create top category and rollup">
    
        <if-empty field="parameters.topNavId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankTopNavIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="topNavId" list="error_list"/>
        <else>
            <entity-and entity-name="ProductCategory" list="productCategoryList">
                <field-map field-name="productCategoryId" from-field="parameters.topNavId"/>
            </entity-and>
            <if-not-empty field="productCategoryList">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="UniqueCatalogIdError"/>
                <string-to-list string="${tempErrorMessage}" message-field="topNavId" list="error_list"/>
            <else>
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidId" ret-field="isValidId">
	                <field field="parameters.topNavId"/>
	            </call-class-method>
	            <if-compare field="isValidId" operator="equals" value="false">
	                <set field="errorKey" from-field="parameters.topNavId"/>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidIdError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="topNavId" list="error_list"/>
	            </if-compare>
            </else>
            </if-not-empty>
        </else>
        </if-empty>
    
        <if-empty field="parameters.topNavBar">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankTopNavBarError"/>
            <string-to-list string="${tempErrorMessage}" message-field="topNavBar" list="error_list"/>
        </if-empty>
        
        <if-empty field="parameters.fromDate">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankActiveFromDateError"/>
            <string-to-list string="${tempErrorMessage}" message-field="fromDate" list="error_list"/>
        <else>
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isDateTime" ret-field="checkDateValidResult">
                <field field="parameters.fromDate"/>
                <field field="parameters.entryDateTimeFormat"/>
            </call-class-method>
            <if-compare field="checkDateValidResult" operator="equals" value="false" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidActiveFromDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="fromDate" list="error_list"/>
                <else>
                	<call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="toTimestamp" ret-field="fromDateCheck">
                        <field field="parameters.fromDate"/>
                        <field field="parameters.entryDateTimeFormat"/>
                    </call-class-method>
                </else>
            </if-compare>
        </else>
        </if-empty>
        <if-not-empty field="parameters.thruDate">
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isDateTime" ret-field="checkDateValidResult">
                <field field="parameters.thruDate"/>
                <field field="parameters.entryDateTimeFormat"/>
            </call-class-method>
            <if-compare field="checkDateValidResult" operator="equals" value="false" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidActiveThruDateDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="thruDate" list="error_list"/>
                <else>
                	<call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="toTimestamp" ret-field="thruDateCheck">
                        <field field="parameters.thruDate"/>
                        <field field="parameters.entryDateTimeFormat"/>
                    </call-class-method>
                </else>
            </if-compare>
        </if-not-empty>
        
        <if-not-empty field="fromDateCheck">
        	<if-not-empty field="thruDateCheck">
        		<if-compare-field field="fromDateCheck" operator="greater" to-field="thruDateCheck" type="Date">
		            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="CataologFromThruCompareError"/>
		            <string-to-list string="${tempErrorMessage}" message-field="thruDate" list="error_list"/>
		        </if-compare-field>
        	</if-not-empty>
        </if-not-empty>
        <if-empty field="parameters.sequenceNum">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidCategorySeqNumError"/>
            <string-to-list string="${tempErrorMessage}" message-field="sequenceNum" list="error_list"/>
        <else>
            <call-class-method method-name="trimTrailSpaces" class-name="com.osafe.util.OsafeAdminUtil" ret-field="sequenceNum">
                <field field="parameters.sequenceNum"/>
            </call-class-method>
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isInteger" ret-field="sequenceNumVaild">
                <string value="${sequenceNum}"></string>
            </call-class-method>
            <if-compare operator="equals" value="false" field="sequenceNumVaild" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidCategorySeqNumError"/>
                <string-to-list string="${tempErrorMessage}" message-field="sequenceNum" list="error_list"/>
            <else>
                <if>
                    <condition>
                        <and>
                            <if-compare operator="greater-equals" value="0" field="sequenceNum" type="Long"/>
                            <if-compare operator="less-equals" value="9999" field="sequenceNum" type="Long"/>
                        </and>
                    </condition>
                    <then>
                    </then>
                    <else>
                        <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidCategorySeqNumError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="sequenceNum" list="error_list"/>
                    </else>
                </if>
            </else>
            </if-compare>
        </else>
        </if-empty>
        <if-not-empty field="parameters.description">
            <call-object-method method-name="length" obj-field="parameters.description" ret-field="categoryDescriptionLength"/>
	        <if-compare operator="greater" value="255" field="categoryDescriptionLength" type="Integer">
	        	<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="LongCategoryDescriptionError"/>
           		<string-to-list string="${tempErrorMessage}" message-field="description" list="error_list"/>
            </if-compare>
        </if-not-empty>
        <check-errors/>
        
        <set-service-fields service-name="createProductCategoryAndRollup" map="parameters" to-map="createProductCategoryCtx"/>
        <set field="createProductCategoryCtx.productCategoryTypeId" value="CATALOG_CATEGORY"/>
        <set field="createProductCategoryCtx.productCategoryId" from-field="parameters.topNavId"/>
        <set field="createProductCategoryCtx.primaryParentCategoryId" from-field="parameters.catalogTopCategoryId"/>
        <set field="createProductCategoryCtx.categoryName" from-field="parameters.topNavBar"/>
        <call-service service-name="createProductCategoryAndRollup" in-map-name="createProductCategoryCtx"/>
    </simple-method>
    
    <simple-method method-name="createSubProductCategory" short-description="Method to create sub category and rollup">
        <if-empty field="parameters.topNavBarId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="TopNavNotExistsError"/>
            <string-to-list string="${tempErrorMessage}" message-field="topNav" list="error_list"/>
        </if-empty>
        
        <if-empty field="parameters.subNavId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankSubNavIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="subNavId" list="error_list"/>
        <else>
            <entity-and entity-name="ProductCategory" list="productCategoryList">
                <field-map field-name="productCategoryId" from-field="parameters.subNavId"/>
            </entity-and>
            <if-not-empty field="productCategoryList">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="UniqueCatalogIdError"/>
                <string-to-list string="${tempErrorMessage}" message-field="subNavId" list="error_list"/>
            <else>
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidId" ret-field="isValidId">
	                <field field="parameters.subNavId"/>
	            </call-class-method>
	            <if-compare field="isValidId" operator="equals" value="false">
	                <set field="errorKey" from-field="parameters.subNavId"/>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidIdError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="subNavId" list="error_list"/>
	            </if-compare>
            </else>
            </if-not-empty>
        </else>
        </if-empty>
        
        <if-empty field="parameters.subNavBar">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankSubNavBarError"/>
            <string-to-list string="${tempErrorMessage}" message-field="subNavBar" list="error_list"/>
        </if-empty>
        <if-empty field="parameters.fromDate">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankActiveFromDateError"/>
            <string-to-list string="${tempErrorMessage}" message-field="fromDate" list="error_list"/>
        <else>
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isDateTime" ret-field="checkDateValidResult">
                <field field="parameters.fromDate"/>
                <field field="parameters.entryDateTimeFormat"/>
            </call-class-method>
            <if-compare field="checkDateValidResult" operator="equals" value="false" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidActiveFromDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="fromDate" list="error_list"/>
                <else>
                	<call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="toTimestamp" ret-field="fromDateCheck">
                        <field field="parameters.fromDate"/>
                        <field field="parameters.entryDateTimeFormat"/>
                    </call-class-method>
                </else>
            </if-compare>
        </else>
        </if-empty>
        <if-not-empty field="parameters.thruDate">
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isDateTime" ret-field="checkDateValidResult">
                <field field="parameters.thruDate"/>
                <field field="parameters.entryDateTimeFormat"/>
            </call-class-method>
            <if-compare field="checkDateValidResult" operator="equals" value="false" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidActiveThruDateDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="thruDate" list="error_list"/>
                <else>
                	<call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="toTimestamp" ret-field="thruDateCheck">
                        <field field="parameters.thruDate"/>
                        <field field="parameters.entryDateTimeFormat"/>
                    </call-class-method>
                </else>
            </if-compare>
        </if-not-empty>
        
        <if-not-empty field="fromDateCheck">
        	<if-not-empty field="thruDateCheck">
        		<if-compare-field field="fromDateCheck" operator="greater" to-field="thruDateCheck" type="Date">
		            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="CataologFromThruCompareError"/>
		            <string-to-list string="${tempErrorMessage}" message-field="thruDate" list="error_list"/>
		        </if-compare-field>
        	</if-not-empty>
        </if-not-empty>
        <if-empty field="parameters.sequenceNum">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidCategorySeqNumError"/>
            <string-to-list string="${tempErrorMessage}" message-field="sequenceNum" list="error_list"/>
        <else>
            <call-class-method method-name="trimTrailSpaces" class-name="com.osafe.util.OsafeAdminUtil" ret-field="sequenceNum">
                <field field="parameters.sequenceNum"/>
            </call-class-method>
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isInteger" ret-field="sequenceNumVaild">
                <string value="${sequenceNum}"></string>
            </call-class-method>
            <if-compare operator="equals" value="false" field="sequenceNumVaild" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidCategorySeqNumError"/>
                <string-to-list string="${tempErrorMessage}" message-field="thruDate" list="error_list"/>
            <else>
                <if>
                    <condition>
                        <and>
                            <if-compare operator="greater-equals" value="0" field="sequenceNum" type="Long"/>
                            <if-compare operator="less-equals" value="9999" field="sequenceNum" type="Long"/>
                        </and>
                    </condition>
                    <then>
                    </then>
                    <else>
                        <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidCategorySeqNumError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="sequenceNum" list="error_list"/>
                    </else>
                </if>
            </else>
        </if-compare>
        </else>
        </if-empty>
        <if-not-empty field="parameters.description">
            <call-object-method method-name="length" obj-field="parameters.description" ret-field="categoryDescriptionLength"/>
	        <if-compare operator="greater" value="255" field="categoryDescriptionLength" type="Integer">
	        	<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="LongCategoryDescriptionError"/>
           		<string-to-list string="${tempErrorMessage}" message-field="description" list="error_list"/>
            </if-compare>
        </if-not-empty>
        <check-errors/>
        
        <set-service-fields service-name="createProductCategoryAndRollup" map="parameters" to-map="createProductCategoryCtx"/>
        <set field="createProductCategoryCtx.productCategoryTypeId" value="CATALOG_CATEGORY"/>
        <set field="createProductCategoryCtx.primaryParentCategoryId" from-field="parameters.topNavBarId"/>
        <set field="createProductCategoryCtx.productCategoryId" from-field="parameters.subNavId"/>
        <set field="createProductCategoryCtx.categoryName" from-field="parameters.subNavBar"/>
        <call-service service-name="createProductCategoryAndRollup" in-map-name="createProductCategoryCtx"/>
    </simple-method>
    
    <simple-method method-name="createProductCategoryAndRollup" short-description="Create an ProductCategory">
        <check-permission permission="CATALOG" action="_CREATE">
            <alt-permission permission="CATALOG_ROLE" action="_CREATE"/>
            <fail-message message="Security Error: to run createProductCategory you must have the CATALOG_CREATE or CATALOG_ADMIN permission, or the limited CATALOG_ROLE_CREATE permission"/>
        </check-permission>
        <check-errors/>

        <now-timestamp field="nowTimestamp"/>
        <make-value value-field="newEntity" entity-name="ProductCategory"/>
        <set-nonpk-fields map="parameters" value-field="newEntity"/>

        <if-empty field="parameters.productCategoryId">
            <sequenced-id sequence-name="ProductCategory" field="newEntity.productCategoryId"/>
        <else>
            <set field="newEntity.productCategoryId" from-field="parameters.productCategoryId"/>
            <check-id field="newEntity.productCategoryId"/>
            <check-errors/>
        </else>
        </if-empty>
        <field-to-result field="newEntity.productCategoryId" result-name="productCategoryId"/>

        <create-value value-field="newEntity"/>

        <!-- if setting the primaryParentCategoryId, create a rollup entity too -->
        <if-not-empty field="parameters.fromDate">
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="toTimestamp" ret-field="parameters.fromDate">
                <field field="parameters.fromDate"/>
            </call-class-method>
        </if-not-empty>
        <if-not-empty field="parameters.thruDate">
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="toTimestamp" ret-field="parameters.thruDate">
                <field field="parameters.thruDate"/>
            </call-class-method>
        </if-not-empty>
        <if-not-empty field="newEntity.primaryParentCategoryId">
            <make-value entity-name="ProductCategoryRollup" value-field="newRollup"/>
            <set field="newRollup.productCategoryId" from-field="newEntity.productCategoryId"/>
            <set field="newRollup.parentProductCategoryId" from-field="newEntity.primaryParentCategoryId"/>
            <set field="newRollup.sequenceNum" from-field="parameters.sequenceNum" type="Long"/>
            <set field="newRollup.fromDate" from-field="parameters.fromDate"/>
            <set field="newRollup.thruDate" from-field="parameters.thruDate"/>
            <create-value value-field="newRollup"/>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="deleteProductImageAndContent" short-description="Method to Delete Product Image And Content">
        <if-not-empty field="parameters.productContentTypeId">
            <entity-and entity-name="ProductContent" list="productContentList" filter-by-date="true">
                <field-map field-name="productId" from-field="parameters.productId"/>
                <field-map field-name="productContentTypeId" from-field="parameters.productContentTypeId"/>
            </entity-and>
        </if-not-empty>
        <if-not-empty field="productContentList">
            <first-from-list entry="productContent" list="productContentList"/>
        </if-not-empty>
        <if-not-empty field="productContent">
            <set-service-fields service-name="removeProductContent" map="productContent" to-map="removeProductContentCtx"/>
            <set field="removeProductContentCtx.productId" from-field="productContent.productId"/>
            <set field="removeProductContentCtx.productContentTypeId" from-field="productContent.productContentTypeId"/>
            <set field="removeProductContentCtx.contentId" from-field="productContent.contentId"/>
            <set field="removeProductContentCtx.fromDate" from-field="productContent.fromDate"/>
            <call-service service-name="removeProductContent" in-map-name="removeProductContentCtx">
            </call-service>
            
            <set field="parameters.contentId" from-field="productContent.contentId"/>
            <set-service-fields service-name="removeContentAndRelated" map="parameters" to-map="removeContentAndRelatedMap"/>
        	<call-service service-name="removeContentAndRelated" in-map-name="removeContentAndRelatedMap"/>
        	
            <field-to-result field="parameters.productId" result-name="productId"/>
            <!-- Clear the Product Content Rendered Cache -->
            <call-class-method class-name="org.ofbiz.base.util.cache.UtilCache"  method-name="clearCache">
                <string value="product.content.rendered"/>
            </call-class-method>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="updateFacetValue" short-description="Updates a facet groups">
        <!-- Validating Description For UPDATING -->
        <iterate-map key="descriptionKey" value="descriptionValue" map="parameters.description">
            <if-empty field="descriptionValue">
                <set field="descriptionBlank" value="true"/>
            </if-empty>
        </iterate-map>
        <!-- Validating SequenceNum For UPDATING -->
        <iterate-map key="sequenceNumKey" value="sequenceNumValue" map="parameters.sequenceNum">
            <call-simple-method method-name="validateSequenceNumber" xml-resource="component://osafeadmin/script/com/osafeadmin/events/OsafeAdminValidationEvents.xml"/>
        </iterate-map>
        <if-compare field="descriptionBlank" value="true" operator="equals">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="FacetValueBlankError"/>
            <string-to-list string="${tempErrorMessage}" message-field="description" list="error_list"/>
        </if-compare>
        <if>
            <condition>
                <or>
                    <if-compare operator="equals" value="true" field="invalidSeqNum" type="Boolean"/>
                    <if-compare operator="equals" value="true" field="invalidSeqNumRange" type="Boolean"/>
                </or>
            </condition>
            <then>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidSequenceNumber"/>
                <string-to-list string="${tempErrorMessage}" message-field="sequenceNum" list="error_list"/>
            </then>
        </if>

        <!-- sort the sequence map and make mutiple-->
        <set field="seqMutiple" value="10" type="Integer"/>
        <call-class-method method-name="setSequenceMapByMultiple" class-name="com.osafe.util.OsafeAdminUtil" ret-field="parameters.sequenceNum">
            <field field="parameters.sequenceNum" type="java.util.Map"/>
            <field field="seqMutiple" type="Integer"/>
        </call-class-method>
        <!-- Iterating productFeatureIds for UPDATING -->
        <set field="productFeatureGroupId" from-field="parameters.productFeatureGroupId"/>
        <iterate-map key="productFeatureIdKey" value="productFeatureIdValue" map="parameters.productFeatureId">
            <set field="productFeatureId" from-field="productFeatureIdValue"/>
            
            <iterate-map key="sequenceNumKey" value="sequenceNumValue" map="parameters.sequenceNum">
                <if-compare-field field="productFeatureIdKey" to-field="sequenceNumKey" operator="equals">
                    <set field="sequenceNum" from-field="sequenceNumValue" type="Long"/>
                </if-compare-field>
            </iterate-map>
            <iterate-map key="fromDateKey" value="fromDateValue" map="parameters.fromDate">
                <if-compare-field field="productFeatureIdKey" to-field="fromDateKey" operator="equals">
                    <set field="fromDate" from-field="fromDateValue"/>
                </if-compare-field>
            </iterate-map> 
            <iterate-map key="thruDateKey" value="thruDateValue" map="parameters.thruDate">
                <if-compare-field field="productFeatureIdKey" to-field="thruDateKey" operator="equals">
                    <set field="thruDate" from-field="thruDateValue"/>
                </if-compare-field>
            </iterate-map>
            <iterate-map key="productFeatureTypeIdKey" value="productFeatureTypeIdValue" map="parameters.productFeatureTypeId">
                <if-compare-field field="productFeatureIdKey" to-field="productFeatureTypeIdKey" operator="equals">
                    <set field="productFeatureTypeId" from-field="productFeatureTypeIdValue"/>
                </if-compare-field>
            </iterate-map>
            <iterate-map key="descriptionKey" value="descriptionValue" map="parameters.description">
                <if-compare-field field="productFeatureIdKey" to-field="descriptionKey" operator="equals">
                    <set field="description" from-field="descriptionValue"/>
                </if-compare-field>
            </iterate-map>
            <set field="updateProductFeatureGroupApplCtx.productFeatureGroupId" from-field="productFeatureGroupId"/>
            <set field="updateProductFeatureGroupApplCtx.productFeatureId" from-field="productFeatureId"/>
            <set field="updateProductFeatureGroupApplCtx.sequenceNum" from-field="sequenceNum" set-if-null="true" type="Long"/>
            <if-compare field="thruDate" operator="not-equals" value="null">
                <set field="updateProductFeatureGroupApplCtx.thruDate" from-field="thruDate" type="Timestamp"/>
            </if-compare>
            <if-compare field="fromDate" operator="not-equals" value="null">
                <set field="updateProductFeatureGroupApplCtx.fromDate" from-field="fromDate" type="Timestamp"/>
            </if-compare>
            <call-service service-name="updateProductFeatureGroupAppl" in-map-name="updateProductFeatureGroupApplCtx"/>   

            <if-compare field="parameters.updateProductFeatureAppls" operator="equals" value="Y" type="String">
                <set field="updateProductFeatureApplsCtx.productFeatureId" from-field="productFeatureId"/>
                <set field="updateProductFeatureApplsCtx.sequenceNum" from-field="sequenceNum" set-if-null="true"/>
                <call-service service-name="updateProductFeatureAppls" in-map-name="updateProductFeatureApplsCtx"/>
            </if-compare>

            <set-service-fields service-name="updateProductFeature" map="parameters" to-map="updateProductFeatureCtx"/>
            <set field="updateProductFeatureCtx.productFeatureId" from-field="productFeatureId"/>
            <set field="updateProductFeatureCtx.productFeatureTypeId" from-field="parameters.productFeatureGroupId"/>
            <set field="updateProductFeatureCtx.description" from-field="description"/>
            <call-service service-name="updateProductFeature" in-map-name="updateProductFeatureCtx"/>
        </iterate-map>
        <!-- Saving values in Entities for associating FACET VALUES to a FACET GROUP -->
        <iterate-map key="newProductFeatureIdKey" value="newProductFeatureIdValue" map="parameters.newProductFeatureId">
           <if-not-empty field="newProductFeatureIdValue">
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidId" ret-field="isValidId">
                    <field field="newProductFeatureIdValue"/>
                </call-class-method>
                <if-compare field="isValidId" operator="equals" value="true">
                    <!-- Verify if the PRODUCT FEATURE ID is already Exists in PRODUCT FEATURE -->
                    <entity-and list="productFeatureList" entity-name="ProductFeature">
                        <field-map field-name="productFeatureId" from-field="newProductFeatureIdValue"/>
                    </entity-and>
                    
                    <!-- Verify if the PRODUCT FEATURE ID is already associated to a PRODUCT FEATURE GROUP -->
	                <entity-condition list="productFeatureGroupApplList" entity-name="ProductFeatureGroupAppl">
	                    <condition-list combine="and">
	                        <condition-expr field-name="productFeatureGroupId" from-field="parameters.productFeatureGroupId" operator="equals"/>
	                        <condition-expr field-name="productFeatureId" from-field="newProductFeatureIdValue" operator="equals"/>
	                    </condition-list>
	                </entity-condition>
                    <if-not-empty field="productFeatureGroupApplList">
                        <set field="errorKey" from-field="newProductFeatureIdValue"/>
                        <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="FeatureIdExistError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="productFeatureGroupApplList" list="error_list"/>
                    <else>
                        <if-not-empty field="productFeatureList">
                            <set field="errorKey" from-field="newProductFeatureIdValue"/>
                            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="FeatureIdExistError"/>
                            <string-to-list string="${tempErrorMessage}" message-field="productFeatureGroupApplList" list="error_list"/>
                        </if-not-empty>
                    </else>
                    </if-not-empty>
                <else>
                    <set field="errorKey" from-field="newProductFeatureIdValue"/>
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidIdError"/>
                    <string-to-list string="${tempErrorMessage}"  message-field="productFeatureGroupApplList" list="error_list"/>
                </else>
                </if-compare>
                <set field="newProductFeatureId" from-field="newProductFeatureIdValue"/>
                <iterate-map key="sequenceNumKey" value="sequenceNumValue" map="parameters.sequenceNum">
                    <if-compare-field field="newProductFeatureIdKey" to-field="sequenceNumKey" operator="equals">
                        <set field="sequenceNum" from-field="sequenceNumValue" type="Long"/>
                    </if-compare-field>
                </iterate-map>
                <set field="fromDate" from-field="nowTime"/>
                <iterate-map key="thruDateKey" value="thruDateValue" map="parameters.thruDate">
                    <if-compare-field field="newProductFeatureIdKey" to-field="thruDateKey" operator="equals">
                        <set field="thruDate" from-field="thruDateValue"/>
                    </if-compare-field>
                </iterate-map>
                <iterate-map key="newDescriptionKey" value="newDescriptionValue" map="parameters.newDescription">
                    <if-compare-field field="newProductFeatureIdKey" to-field="newDescriptionKey" operator="equals">
                    <if-empty field="newDescriptionValue">
                        <set field="descriptionBlank" value="true"/>
                    <else>
                        <set field="newDescription" from-field="newDescriptionValue"/>
                    </else>
                    </if-empty>
                    </if-compare-field>
                    <if-compare field="descriptionBlank" value="true" operator="equals">
                        <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="FacetValueBlankError"/>
                        <string-to-list string="${tempErrorMessage}" message-field="description" list="error_list"/>
                    </if-compare>
                </iterate-map>
                <check-errors/>
                
                <entity-one value-field="productFeature" entity-name="ProductFeature">
	                <field-map field-name="productFeatureId" from-field="newProductFeatureId"/>
	            </entity-one>
		        <if-empty field="productFeature">
	                <set field="createProductFeatureCtx.productFeatureId" from-field="newProductFeatureId"/>
	                <set field="createProductFeatureCtx.productFeatureTypeId" from-field="parameters.productFeatureGroupId"/>
	                <set field="createProductFeatureCtx.productFeatureCategoryId" from-field="parameters.productFeatureGroupId"/>
	                <set field="createProductFeatureCtx.description" from-field="newDescription"/>
	                
	                <call-service service-name="createProductFeature" in-map-name="createProductFeatureCtx">
	                    <result-to-field result-name="productFeatureId" field="productFeatureId"/>
	                </call-service>
                </if-empty>
                
                <set-service-fields service-name="createProductFeatureGroupAppl" map="" to-map="createProductFeatureGroupApplCtx" />
                <set field="createProductFeatureGroupApplCtx.productFeatureId" from-field="newProductFeatureId"/>
                <set field="createProductFeatureGroupApplCtx.productFeatureGroupId" from-field="parameters.productFeatureGroupId"/>
                <set field="createProductFeatureGroupApplCtx.fromDate" from-field="fromDate" type="Timestamp"/>
                <set field="createProductFeatureGroupApplCtx.thruDate" from-field="thruDate" type="Timestamp"/>
                <set field="createProductFeatureGroupApplCtx.sequenceNum" from-field="sequenceNum" />
                <call-service service-name="createProductFeatureGroupAppl" in-map-name="createProductFeatureGroupApplCtx"/>
            </if-not-empty>
        </iterate-map>
        <property-to-field resource="OSafeAdminUiLabels" property="FacetValueSavedSuccess" field="facetValueSavedSuccess"/>
        <string-to-list string="${facetValueSavedSuccess}" list="successMessageList"/>
    </simple-method>
    
    <simple-method method-name="updateFeatureSwatchImage" short-description="Method to update PLP and PDP swatch images for feature">
        <property-to-field resource="OsafeProperties" property="osafeThemeServer" field="osafeThemeServerPath"/>
        <if-compare operator="equals" value="file" field="parameters.plpSwatchImageResourceType">
            <if-not-empty field="parameters._plpSwatchImage_fileName">
                <set field="plpSwatchImageTargetPath" value="${osafeThemeServerPath}${parameters.plpSwatchImageFilePath}"/>
                <create-object class-name="java.io.File" field="plpSwatchImageTargetPathFile">
                    <field field="plpSwatchImageTargetPath" type="String"/>
                </create-object>
                <if-not-empty field="parameters.plpSwatchImageFilePath">
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
	                    <field field="parameters.plpSwatchImageFilePath"/>
	                </call-class-method>
	                <if-compare operator="equals" value="false" field="isValidURL">
	                    <call-object-method method-name="exists" obj-field="plpSwatchImageTargetPathFile" ret-field="isPlpSwatchImageTargetPathFile"/>
		                <if-compare operator="equals" value="false" field="isPlpSwatchImageTargetPathFile" type="Boolean">
		                    <clear-field field="argListNames"/>
		                    <set field="argListNames[]" from-field="parameters.plpSwatchImageFilePath"/>
		                    <set field="argListNames[]" value="PLP Swatch"/>
		                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathNotExistError" arg-list-name="argListNames"/>
		                    <string-to-list string="${tempErrorMessage}" message-field="plpSwatchImageFilePath" list="error_list"/>
		                </if-compare>
		            <else>
		                <clear-field field="argListNames"/>
		                <set field="argListNames[]" from-field="parameters.plpSwatchImageFilePath"/>
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathURLError" arg-list-name="argListNames"/>
		                <string-to-list string="${tempErrorMessage}" message-field="plpSwatchImageFilePath" list="error_list"/>
		            </else>
	                </if-compare>
	            <else>
	                <clear-field field="argListNames"/>
	                <set field="argListNames[]" value="PLP Swatch"/>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathBlankError" arg-list-name="argListNames"/>
		            <string-to-list string="${tempErrorMessage}" message-field="plpSwatchImageFilePath" list="error_list"/>
	            </else>
                </if-not-empty>
            </if-not-empty>
        <else>
            <if-not-empty field="parameters.plpSwatchImageUrlRef">
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
                    <field field="parameters.plpSwatchImageUrlRef"/>
                </call-class-method>
                <if-compare operator="equals" value="false" field="isValidURL">
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	                <string-to-list string="${tempErrorMessage}" message-field="plpSwatchImageUrlRef" list="error_list"/>
                </if-compare>
            <else>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	            <string-to-list string="${tempErrorMessage}" message-field="plpSwatchImageUrlRef" list="error_list"/>
            </else>
            </if-not-empty>
        </else>
        </if-compare>
        
        <if-compare operator="equals" value="file" field="parameters.pdpSwatchImageResourceType">
            <if-not-empty field="parameters._pdpSwatchImage_fileName">
                <set field="pdpSwatchImageTargetPath" value="${osafeThemeServerPath}${parameters.pdpSwatchImageFilePath}"/>
                <create-object class-name="java.io.File" field="pdpSwatchImageTargetPathFile">
                    <field field="pdpSwatchImageTargetPath" type="String"/>
                </create-object>
                <if-not-empty field="parameters.pdpSwatchImageFilePath">
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
	                    <field field="parameters.pdpSwatchImageFilePath"/>
	                </call-class-method>
	                <if-compare operator="equals" value="false" field="isValidURL">
	                    <call-object-method method-name="exists" obj-field="pdpSwatchImageTargetPathFile" ret-field="isPdpSwatchImageTargetPathFile"/>
		                <if-compare operator="equals" value="false" field="isPdpSwatchImageTargetPathFile" type="Boolean">
		                    <clear-field field="argListNames"/>
		                    <set field="argListNames[]" from-field="parameters.pdpSwatchImageFilePath"/>
		                    <set field="argListNames[]" value="PDP Swatch"/>
		                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathNotExistError" arg-list-name="argListNames"/>
		                    <string-to-list string="${tempErrorMessage}" message-field="pdpSwatchImageFilePath" list="error_list"/>
		                </if-compare>
		            <else>
		                <clear-field field="argListNames"/>
		                <set field="argListNames[]" from-field="parameters.pdpSwatchImageFilePath"/>
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathURLError" arg-list-name="argListNames"/>
		                <string-to-list string="${tempErrorMessage}" message-field="pdpSwatchImageFilePath" list="error_list"/>
		            </else>
	                </if-compare>
	            <else>
	                <clear-field field="argListNames"/>
	                <set field="argListNames[]" value="PDP Swatch"/>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathBlankError" arg-list-name="argListNames"/>
		            <string-to-list string="${tempErrorMessage}" message-field="pdpSwatchImageFilePath" list="error_list"/>
	            </else>
                </if-not-empty>
            </if-not-empty>
        <else>
            <if-not-empty field="parameters.pdpSwatchImageUrlRef">
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
                    <field field="parameters.pdpSwatchImageUrlRef"/>
                </call-class-method>
                <if-compare operator="equals" value="false" field="isValidURL">
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	                <string-to-list string="${tempErrorMessage}" message-field="pdpSwatchImageUrlRef" list="error_list"/>
                </if-compare>
            <else>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	            <string-to-list string="${tempErrorMessage}" message-field="pdpSwatchImageUrlRef" list="error_list"/>
            </else>
            </if-not-empty>
        </else>
        </if-compare>
        
        <check-errors/>
        
        <set field="featurePLPSwatchImagePath" from-field="parameters.plpSwatchImageFilePath" />

        <set field="createUpdateProdFeatureDataResourceCtx.productFeatureId" from-field="parameters.productFeatureId"/>
        <set field="createUpdateProdFeatureDataResourceCtx.featureDataResourceTypeId" value="PLP_SWATCH_IMAGE_URL"/>
        <if-compare operator="equals" value="file" field="parameters.plpSwatchImageResourceType">
            <set field="featureSwatchTargetPath" value="${osafeThemeServerPath}${featurePLPSwatchImagePath}"/>
            <create-object class-name="java.io.File" field="featureSwatchTargetPathFile">
                <field field="featureSwatchTargetPath" type="String"/>
            </create-object>
            <call-object-method method-name="exists" obj-field="featureSwatchTargetPathFile" ret-field="isFeatureSwatchTargetPathFile"/>
            <if-compare field="isFeatureSwatchTargetPathFile" operator="equals" value="FALSE" type="Boolean">
                <call-object-method method-name="mkdirs" obj-field="featureSwatchTargetPathFile"/>
            </if-compare>
            
            <if-not-empty field="parameters._plpSwatchImage_fileName">
	            <set field="uploadFileCtx.uploadedFile" from-field="parameters.plpSwatchImage"/>
	            <set field="uploadFileCtx._uploadedFile_fileName" from-field="parameters._plpSwatchImage_fileName"/>
	            <call-service service-name="uploadFile" in-map-name="uploadFileCtx">
	                <result-to-field result-name="uploadFileName" field="parameters.plpSwatchImageName"/>
	                <result-to-field result-name="uploadFilePath" field="parameters.plpSwatchImagePath"/>
	            </call-service>
	            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="moveContent">
	                <field field="parameters.plpSwatchImagePath"/>
	                <field field="featureSwatchTargetPath"/>
	                <field field="parameters.plpSwatchImageName"/>
	            </call-class-method>
	            <clear-field field="uploadFileCtx"/>
	            <set field="createUpdateProdFeatureDataResourceCtx.dataResourceName" value="${parameters.plpSwatchImageName}"/>
	            <set field="createUpdateProdFeatureDataResourceCtx.objectInfo" value="${featurePLPSwatchImagePath}${parameters.plpSwatchImageName}"/>
	            <call-service service-name="createUpdateProdFeatureDataResource" in-map-name="createUpdateProdFeatureDataResourceCtx"/>
                
            </if-not-empty>
        <else>
            <call-object-method obj-field="parameters.plpSwatchImageUrlRef" method-name="lastIndexOf" ret-field="lastSlash">
                  <string value="/"/>
            </call-object-method>
            <if>
               <condition>
                   <if-compare field="lastSlash" operator="not-equals" value="-1" type="Integer" />
               </condition>
               <then>
                   <calculate field="lastSlash">
                       <calcop operator="add" >
                           <calcop operator="get" field="lastSlash"/>
                           <number value="1"/>
                       </calcop>
                   </calculate>
                   <set field="startIndex" value="0" type="Integer"/>
                   <set field="endIndex" from-field="lastSlash" type="Integer"/>
                   <call-object-method obj-field="parameters.plpSwatchImageUrlRef" method-name="substring" ret-field="plpSwatchFileName">
                       <field field="startIndex" type="int"/>
                       <field field="endIndex" type="int"/>
                   </call-object-method>
                   <set field="createUpdateProdFeatureDataResourceCtx.dataResourceName" from-field="plpSwatchFileName"/>
	               <set field="createUpdateProdFeatureDataResourceCtx.objectInfo" from-field="parameters.plpSwatchImageUrlRef"/>
	               <call-service service-name="createUpdateProdFeatureDataResource" in-map-name="createUpdateProdFeatureDataResourceCtx"/>
               </then>
           </if>
            
        </else>
        </if-compare>
        <clear-field field="createUpdateProdFeatureDataResourceCtx"/>
        
        <set field="featurePDPSwatchImagePath" from-field="parameters.pdpSwatchImageFilePath" />
        <set field="createUpdateProdFeatureDataResourceCtx.productFeatureId" from-field="parameters.productFeatureId"/>
        <set field="createUpdateProdFeatureDataResourceCtx.featureDataResourceTypeId" value="PDP_SWATCH_IMAGE_URL"/>
        <if-compare operator="equals" value="file" field="parameters.pdpSwatchImageResourceType">
            <set field="featureSwatchTargetPath" value="${osafeThemeServerPath}${featurePDPSwatchImagePath}"/>
            <create-object class-name="java.io.File" field="featureSwatchTargetPathFile">
                <field field="featureSwatchTargetPath" type="String"/>
            </create-object>
            <call-object-method method-name="exists" obj-field="featureSwatchTargetPathFile" ret-field="isFeatureSwatchTargetPathFile"/>
            <if-compare field="isFeatureSwatchTargetPathFile" operator="equals" value="FALSE" type="Boolean">
                <call-object-method method-name="mkdirs" obj-field="featureSwatchTargetPathFile"/>
            </if-compare>
            
            <if-not-empty field="parameters._pdpSwatchImage_fileName">
	            <set field="uploadFileCtx.uploadedFile" from-field="parameters.pdpSwatchImage"/>
	            <set field="uploadFileCtx._uploadedFile_fileName" from-field="parameters._pdpSwatchImage_fileName"/>
	            <call-service service-name="uploadFile" in-map-name="uploadFileCtx">
	                <result-to-field result-name="uploadFileName" field="parameters.pdpSwatchImageName"/>
	                <result-to-field result-name="uploadFilePath" field="parameters.pdpSwatchImagePath"/>
	            </call-service>
	            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="moveContent">
	                <field field="parameters.pdpSwatchImagePath"/>
	                <field field="featureSwatchTargetPath"/>
	                <field field="parameters.pdpSwatchImageName"/>
	            </call-class-method>
	            <clear-field field="uploadFileCtx"/>
	            <set field="createUpdateProdFeatureDataResourceCtx.dataResourceName" value="${parameters.pdpSwatchImageName}"/>
	            <set field="createUpdateProdFeatureDataResourceCtx.objectInfo" value="${featurePDPSwatchImagePath}${parameters.pdpSwatchImageName}"/>
	            <call-service service-name="createUpdateProdFeatureDataResource" in-map-name="createUpdateProdFeatureDataResourceCtx"/>
                
            </if-not-empty>
        <else>
            <call-object-method obj-field="parameters.pdpSwatchImageUrlRef" method-name="lastIndexOf" ret-field="lastSlash">
                  <string value="/"/>
            </call-object-method>
            <if>
               <condition>
                   <if-compare field="lastSlash" operator="not-equals" value="-1" type="Integer" />
               </condition>
               <then>
                   <calculate field="lastSlash">
                       <calcop operator="add" >
                           <calcop operator="get" field="lastSlash"/>
                           <number value="1"/>
                       </calcop>
                   </calculate>
                   <set field="startIndex" value="0" type="Integer"/>
                   <set field="endIndex" from-field="lastSlash" type="Integer"/>
                   <call-object-method obj-field="parameters.pdpSwatchImageUrlRef" method-name="substring" ret-field="pdpSwatchFileName">
                       <field field="startIndex" type="int"/>
                       <field field="endIndex" type="int"/>
                   </call-object-method>
                   <set field="createUpdateProdFeatureDataResourceCtx.dataResourceName" from-field="pdpSwatchFileName"/>
	               <set field="createUpdateProdFeatureDataResourceCtx.objectInfo" from-field="parameters.pdpSwatchImageUrlRef"/>
	               <call-service service-name="createUpdateProdFeatureDataResource" in-map-name="createUpdateProdFeatureDataResourceCtx"/>
               </then>
           </if>
            
        </else>
        </if-compare>
        <clear-field field="createUpdateProdFeatureDataResourceCtx"/>
        
        <field-to-result field="parameters.productFeatureGroupId" result-name="productFeatureGroupId"/>
    </simple-method>
    
    <simple-method method-name="createUpdateProdFeatureDataResource" short-description="Method to create and update product feature dataresource">
        <entity-and entity-name="ProductFeatureDataResource" list="productFeatureDataResourceList">
            <field-map field-name="productFeatureId" from-field="parameters.productFeatureId"/>
            <field-map field-name="featureDataResourceTypeId" from-field="parameters.featureDataResourceTypeId"/>
        </entity-and>
        <if-not-empty field="productFeatureDataResourceList">
            <first-from-list list="productFeatureDataResourceList" entry="productFeatureDataResource"/>
            <get-related-one relation-name="DataResource" to-value-field="dataResource" value-field="productFeatureDataResource"/>
            <if-not-empty field="dataResource">
                <set-service-fields service-name="updateDataResource" map="dataResource" to-map="updateDataResourceCtx"/>
                <set field="updateDataResourceCtx.objectInfo" from-field="parameters.objectInfo"/>
                <set field="updateDataResourceCtx.dataResourceName" from-field="parameters.dataResourceName"/>
                <call-service service-name="updateDataResource" in-map-name="updateDataResourceCtx"/>
            </if-not-empty>
        <else>
            <set-service-fields service-name="createDataResource" map="parameters" to-map="createDataResourceCtx"/>
            <set field="createDataResourceCtx.dataResourceTypeId" value="SHORT_TEXT"/>
            <set field="createDataResourceCtx.mimeTypeId" value="text/html"/>
            <call-service service-name="createDataResource" in-map-name="createDataResourceCtx">
                <result-to-field result-name="dataResourceId" field="parameters.dataResourceId"/>
            </call-service>
            <make-value value-field="newEntity" entity-name="ProductFeatureDataResource"/>
            <set-pk-fields map="parameters" value-field="newEntity"/>
            <set-nonpk-fields map="parameters" value-field="newEntity"/>
            <create-value value-field="newEntity"/>
        </else>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="updateProductFeatures" short-description="Update product feature">
        <iterate-map key="sequenceNumKey" value="sequenceNumValue" map="parameters.sequenceNum">
            <call-simple-method method-name="validateSequenceNumber" xml-resource="component://osafeadmin/script/com/osafeadmin/events/OsafeAdminValidationEvents.xml"/>
        </iterate-map>
        <if>
            <condition>
                <or>
                    <if-compare operator="equals" value="true" field="invalidSeqNum" type="Boolean"/>
                    <if-compare operator="equals" value="true" field="invalidSeqNumRange" type="Boolean"/>
                </or>
            </condition>
            <then>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidSequenceNumber"/>
                <string-to-list string="${tempErrorMessage}" message-field="sequenceNum" list="error_list"/>
            </then>
        </if>
        <check-errors/>

        <!-- sort the sequence map and make mutiple-->
        <set field="seqMutiple" value="10" type="Integer"/>
        <call-class-method method-name="setSequenceMapByMultiple" class-name="com.osafe.util.OsafeAdminUtil" ret-field="parameters.sequenceNum">
            <field field="parameters.sequenceNum" type="java.util.Map"/>
            <field field="seqMutiple" type="Integer"/>
        </call-class-method>

        <set field="productFeatureTypeId" from-field="parameters.productFeatureTypeId"/>
        <set field="productId" from-field="parameters.productId"/>
        <iterate-map key="productFeatureIdKey" value="productFeatureIdValue" map="parameters.productFeatureId">
            <set field="productFeatureId" from-field="productFeatureIdValue"/>
            <iterate-map key="sequenceNumKey" value="sequenceNumValue" map="parameters.sequenceNum">
                <if-compare-field field="productFeatureIdKey" to-field="sequenceNumKey" operator="equals">
                    <set field="sequenceNum" from-field="sequenceNumValue" type="Long"/>
                </if-compare-field>
            </iterate-map>
            <iterate-map key="fromDateKey" value="fromDateValue" map="parameters.fromDate">
                <if-compare-field field="productFeatureIdKey" to-field="fromDateKey" operator="equals">
                    <set field="fromDate" from-field="fromDateValue"/>
                </if-compare-field>
            </iterate-map> 
            <iterate-map key="thruDateKey" value="thruDateValue" map="parameters.thruDate">
                <if-compare-field field="productFeatureIdKey" to-field="thruDateKey" operator="equals">
                    <set field="thruDate" from-field="thruDateValue"/>
                </if-compare-field>
            </iterate-map>
            <set field="updateProductFeatureApplCtx.productId" from-field="productId"/>
            <set field="updateProductFeatureApplCtx.productFeatureId" from-field="productFeatureId"/>
            <set field="updateProductFeatureApplCtx.sequenceNum" from-field="sequenceNum" set-if-null="true"/>
            <if-compare field="thruDate" operator="not-equals" value="null">
                <set field="updateProductFeatureApplCtx.thruDate" from-field="thruDate" type="Timestamp"/>
            </if-compare>
            <if-compare field="fromDate" operator="not-equals" value="null">
                <set field="updateProductFeatureApplCtx.fromDate" from-field="fromDate" type="Timestamp"/>
            </if-compare>
            <call-service service-name="updateProductFeatureAppl" in-map-name="updateProductFeatureApplCtx"/>
        </iterate-map>
        <property-to-field resource="OSafeAdminUiLabels" property="ProductFeatureSavedSuccess" field="facetValueSavedSuccess"/>
        <string-to-list string="${facetValueSavedSuccess}" list="successMessageList"/>
        <field-to-result field="parameters.productId" result-name="productId"/>
    </simple-method>

    <simple-method method-name="createNewProductVariant" short-description="Create Product Variant">
        <if-empty field="parameters.productIdTo">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankProductIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="productIdTo" list="error_list"/>
        <else>
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidId" ret-field="isValidId">
                <field field="parameters.productIdTo"/>
            </call-class-method>
            <if-compare field="isValidId" operator="equals" value="true">
	            <set field="findProductCtx.productId" from-field="parameters.productIdTo"/>
                <find-by-primary-key value-field="existingProductId" entity-name="Product" map="findProductCtx"/>
	            <if-not-empty field="existingProductId">
	                <set field="errorKey" from-field="parameters.productIdTo"/>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductIdExistError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="productIdTo" list="error_list"/>
	            </if-not-empty>
            <else>
	            <set field="errorKey" from-field="parameters.productIdTo"/>
	            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidIdError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="productIdTo" list="error_list"/>
            </else>
            </if-compare>
        </else>
        </if-empty>
        <if-not-empty field="parameters.internalName">
            <call-object-method method-name="length" obj-field="parameters.internalName" ret-field="internalNameLength"/>
		    <if-compare operator="greater" value="255" field="internalNameLength" type="Integer">
		       	<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InternalNameExceedsLengthError"/>
            	<string-to-list string="${tempErrorMessage}" message-field="internalName" list="error_list"/>
		    </if-compare>
        </if-not-empty>
        <if-not-empty field="parameters.variantListPrice">
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="checkFloatResult">
                <field field="parameters.variantListPrice"/>
            </call-class-method>
            <if-compare field="checkFloatResult" operator="equals" value="false" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductVariantListPriceError"/>
                <string-to-list string="${tempErrorMessage}" message-field="variantListPrice" list="error_list"/>
            </if-compare>
        </if-not-empty>
        <if-not-empty field="parameters.variantSalePrice">
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="checkFloatResult">
                <field field="parameters.variantSalePrice"/>
            </call-class-method>
            <if-compare field="checkFloatResult" operator="equals" value="false" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductVariantSalePriceError"/>
                <string-to-list string="${tempErrorMessage}" message-field="variantSalePrice" list="error_list"/>
            </if-compare>
        </if-not-empty>
        <if-not-empty field="parameters.introductionDate">
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isDateTime" ret-field="checkDateValidResult">
                <field field="parameters.introductionDate"/>
                <field field="parameters.entryDateTimeFormat"/>
            </call-class-method>
            <if-compare field="checkDateValidResult" operator="equals" value="false" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidProductIntroDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="introductionDate" list="error_list"/>
                <else>
                    <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="toTimestamp" ret-field="parameters.introductionDate">
                        <field field="parameters.introductionDate"/>
                        <field field="parameters.entryDateTimeFormat"/>
                    </call-class-method>
                </else>
            </if-compare>
        </if-not-empty>
        <if-not-empty field="parameters.salesDiscontinuationDate">
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isDateTime" ret-field="checkDateValidResult">
                <field field="parameters.salesDiscontinuationDate"/>
                <field field="parameters.entryDateTimeFormat"/>
            </call-class-method>
            <if-compare field="checkDateValidResult" operator="equals" value="false" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidProductDiscontDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="salesDiscontinuationDate" list="error_list"/>
                <else>
                    <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="toTimestamp" ret-field="parameters.salesDiscontinuationDate">
                        <field field="parameters.salesDiscontinuationDate"/>
                        <field field="parameters.entryDateTimeFormat"/>
                    </call-class-method>
                </else>
            </if-compare>
        </if-not-empty>
        
        <if-not-empty field="parameters.introductionDate">
        	<if-not-empty field="parameters.salesDiscontinuationDate">
        		<if-compare-field field="parameters.introductionDate" operator="greater" to-field="parameters.salesDiscontinuationDate" type="Timestamp">
		            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductIntroDiscCompareError"/>
		            <string-to-list string="${tempErrorMessage}" message-field="introductionDate" list="error_list"/>
		        </if-compare-field>
        	</if-not-empty>
        </if-not-empty>
        
        <set field="bfTotalInventory" from-field="parameters.bfTotalInventory" default-value="0"/>
        <set field="bfWHInventory" from-field="parameters.bfWHInventory" default-value="0"/>
        
        <if-not-empty field="bfTotalInventory"> 
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isSignedInteger" ret-field="bfTotalInventoryVaild">
               <string value="${bfTotalInventory}"></string>
            </call-class-method>
            <if-compare operator="equals" value="false" field="bfTotalInventoryVaild" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidBFTotalInventoryError"/>
                <string-to-list string="${tempErrorMessage}" message-field="bfTotalInventory" list="error_list"/>
            <else>
                <if>
                    <condition>
                    <and>
                        <if-compare operator="greater-equals" value="-9999" field="bfTotalInventory" type="Long"/>
                        <if-compare operator="less-equals" value="99999" field="bfTotalInventory" type="Long"/>
                    </and>
                    </condition>
                <then>
                </then>
                <else>
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidBFTotalInventoryError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="bfTotalInventory" list="error_list"/>
                </else>
                </if>
            </else>
            </if-compare>
        </if-not-empty>
        
        <if-not-empty field="bfWHInventory"> 
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isSignedInteger" ret-field="bfWHInventoryVaild">
               <string value="${bfWHInventory}"></string>
            </call-class-method>
            <if-compare operator="equals" value="false" field="bfWHInventoryVaild" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidBFWHInventoryError"/>
                <string-to-list string="${tempErrorMessage}" message-field="bfWHInventory" list="error_list"/>
            <else>
                <if>
                    <condition>
                    <and>
                        <if-compare operator="greater-equals" value="-9999" field="bfWHInventory" type="Long"/>
                        <if-compare operator="less-equals" value="99999" field="bfWHInventory" type="Long"/>
                    </and>
                    </condition>
                <then>
                </then>
                <else>
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidBFWHInventoryError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="bfWHInventory" list="error_list"/>
                </else>
                </if>
            </else>
            </if-compare>
        </if-not-empty>
        
        <set field="productHeight" from-field="parameters.productHeight" />
        <if-not-empty field="productHeight">
             <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isFloat" ret-field="heightVaild">
                <field field="productHeight"/>
             </call-class-method>
             <if-compare operator="equals" value="false" field="heightVaild" type="Boolean">
               <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidHeightError"/>
               <string-to-list string="${tempErrorMessage}" message-field="productHeight" list="error_list"/>
             </if-compare>
        </if-not-empty>
        <set field="productWidth" from-field="parameters.productWidth" />
        <if-not-empty field="productWidth">
             <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isFloat" ret-field="widthVaild">
                <field field="productWidth"/>
             </call-class-method>
             <if-compare operator="equals" value="false" field="widthVaild" type="Boolean">
               <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidWidthError"/>
               <string-to-list string="${tempErrorMessage}" message-field="productWidth" list="error_list"/>
             </if-compare>
        </if-not-empty>
        <set field="productDepth" from-field="parameters.productDepth" />
        <if-not-empty field="productDepth">
             <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isFloat" ret-field="depthVaild">
                <field field="productDepth"/>
             </call-class-method>
             <if-compare operator="equals" value="false" field="depthVaild" type="Boolean">
               <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidDepthError"/>
               <string-to-list string="${tempErrorMessage}" message-field="productDepth" list="error_list"/>
             </if-compare>
        </if-not-empty>
        <set field="weight" from-field="parameters.weight" />
        <if-not-empty field="weight">
             <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isFloat" ret-field="weightVaild">
                <field field="weight"/>
             </call-class-method>
             <if-compare operator="equals" value="false" field="weightVaild" type="Boolean">
               <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidWeightError"/>
               <string-to-list string="${tempErrorMessage}" message-field="weight" list="error_list"/>
             </if-compare>
        </if-not-empty>

        <if-not-empty field="parameters.selectableProductFeature">
            <set field="blankInputFeatureFound" value="false" type="Boolean"/>
            <iterate-map key="productFeatureKey" value="productFeatureValue" map="parameters.selectableProductFeature">
                <if-empty field="productFeatureValue">
                    <entity-one entity-name="ProductFeatureGroup" value-field="productFeatureGroup">
                        <field-map field-name="productFeatureGroupId" from-field="productFeatureKey"/>
                    </entity-one>
                    <clear-field field="argListNames"/>
                    <set field="argListNames[]" from-field="productFeatureGroup.description" default-value="productFeatureKey"/>
                    <property-to-field resource="OSafeAdminUiLabels" property="ProductFeatureRequiredError" field="tempErrorMessage" arg-list-name="argListNames"/>
                    <string-to-list string="${tempErrorMessage}" message-field="selectableProductFeature" list="error_list"/>
                    <set field="blankInputFeatureFound" value="true"/>
                </if-empty>
            </iterate-map>
           <!--  check existing varint with same selectable feature      -->
           <if-compare field="blankInputFeatureFound" operator="equals" value="false" type="Boolean">
                <set field="sameFeatureVariantFound" value="false" type="Boolean"/>
                <set field="sameFeatureVariantFoundError" value=""/>
                <set field="selectableFeatureCount" value="1" type="Integer"/>
                <iterate-map key="productFeatureKey" value="productFeatureValue" map="parameters.selectableProductFeature">
                     <!-- productFeature request parameter value contains "@" symbol
                         between "productFeatureId" and "productFeatureApplTypeId".-->
                    <call-bsh><![CDATA[
                        if (productFeatureValue != null) {
                           parameters.put("productFeatureId", productFeatureValue.substring(0, productFeatureValue.indexOf("@")));
                           parameters.put("productFeatureApplTypeId", productFeatureValue.substring(productFeatureValue.indexOf("@")+1));
                        }
                    ]]></call-bsh>
                    <!--   make virtual SELECTABLE_FEATURE ids list  -->
                    <if-compare field="parameters.productFeatureApplTypeId" operator="equals" value="SELECTABLE_FEATURE" type="String">
                        <set field="selectableFeatureIds[]" from-field="parameters.productFeatureId"/>
                    </if-compare>
                    <entity-one entity-name="ProductFeatureGroup" value-field="productFeatureGroup">
                        <field-map field-name="productFeatureGroupId" from-field="productFeatureKey"/>
                    </entity-one>
                    <entity-one entity-name="ProductFeature" value-field="productFeature">
                        <field-map field-name="productFeatureId" from-field="parameters.productFeatureId"/>
                    </entity-one>
                    <call-object-method method-name="size" obj-field="parameters.selectableProductFeature" ret-field="passedSelectableFeatureSize"/>
                    <if-compare-field field="selectableFeatureCount" operator="less" to-field="passedSelectableFeatureSize" type="Integer">
                        <string-append field="sameFeatureVariantFoundError" string="${productFeatureGroup.description} = ${productFeature.description} and " />
                    <else>
                        <string-append field="sameFeatureVariantFoundError" string="${productFeatureGroup.description} = ${productFeature.description}" />
                    </else>
                    </if-compare-field>
                    <calculate field="selectableFeatureCount">
                        <calcop operator="add" >
                            <calcop operator="get" field="selectableFeatureCount"/>
                            <number value="1"/>
                        </calcop>
                    </calculate>
                </iterate-map>
                <entity-and entity-name="ProductAssoc" list="productAssocList" filter-by-date="true">
                    <field-map field-name="productId" from-field="parameters.productId"/>
                    <field-map field-name="productAssocTypeId" value="PRODUCT_VARIANT"/>
                </entity-and>
                <if-validate-method field="productAssocList" method="isNotEmpty">
                    <if-validate-method field="selectableFeatureIds" method="isNotEmpty">
                        <iterate list="productAssocList" entry="productAssocVariant">
                            <if-compare field="sameFeatureVariantFound" operator="equals" value="false" >
                                <clear-field field="tempSelectableFeatureIds"/>
                                <list-to-list to-list="tempSelectableFeatureIds" list="selectableFeatureIds"/>
                                <entity-and entity-name="ProductFeatureAppl" list="productFeatureApplList">
                                    <field-map field-name="productId" from-field="productAssocVariant.productIdTo"/>
                                    <field-map field-name="productFeatureApplTypeId" value="STANDARD_FEATURE"/>
                                </entity-and>
                                <if-validate-method field="productFeatureApplList" method="isNotEmpty">
                                    <iterate list="productFeatureApplList" entry="productFeatureApplVariant">
                                        <call-bsh><![CDATA[
                                            if (tempSelectableFeatureIds.contains(productFeatureApplVariant.getString("productFeatureId"))) {
                                               tempSelectableFeatureIds.remove(productFeatureApplVariant.getString("productFeatureId"));
                                            }
                                        ]]></call-bsh>
                                    </iterate>
                                </if-validate-method>
                                <call-object-method method-name="size" obj-field="tempSelectableFeatureIds" ret-field="reaminFeatureSize"/>
                                <if-compare field="reaminFeatureSize" operator="equals" value="0" type="Integer">
                                    <set field="sameFeatureVariantFound" value="true"/>
                                </if-compare>
                            </if-compare>
                        </iterate>
                    </if-validate-method>
                </if-validate-method>
                <if-compare field="sameFeatureVariantFound" operator="equals" value="true" type="Boolean">
                    <clear-field field="argListNames"/>
                    <set field="argListNames[]" from-field="sameFeatureVariantFoundError" set-if-null="true"/>
                    <property-to-field resource="OSafeAdminUiLabels" property="SameVariantExistError" field="tempErrorMessage" arg-list-name="argListNames"/>
                    <string-to-list string="${tempErrorMessage}"  message-field="selectableProductFeature" list="error_list"/>
                </if-compare>
           </if-compare>
        <else>
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankProductFeturesError"/>
            <string-to-list string="${tempErrorMessage}"   message-field="selectableProductFeature" list="error_list"/>
        </else>
        </if-not-empty>
        
        <set field="pdpQuantityMinMaxSetCount" value="0" type="Integer"/>
        <if-not-empty field="parameters.pdpQuantityMin">
        	<call-class-method class-name="com.osafe.util.OsafeAdminUtil" method-name="isNumber" ret-field="isNumber">
	            <field field="parameters.pdpQuantityMin"/>
	        </call-class-method>
	        <if-compare field="isNumber" operator="equals" value="false">
	            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidPdpQtyMinError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="pdpQuantityMin" list="error_list"/>
		        <else>
		        	<if-compare field="parameters.pdpQuantityMin" operator="greater" value="0" type="Long">
		        		<set field="pdpQuantityMinSet" value="Y"/>
		        		<calculate field="pdpQuantityMinMaxSetCount">
		        			<calcop operator="add" >
		        				<calcop operator="get" field="pdpQuantityMinMaxSetCount"/>
               					<number value="1"/>
		        			</calcop>
		        		</calculate>
		        		<else>
		        			<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="PdpQtyMinGreaterThanZeroError"/>
	            			<string-to-list string="${tempErrorMessage}" message-field="pdpQuantityMin" list="error_list"/>
		        		</else>
		        	</if-compare>
		        </else>
	        </if-compare>
        </if-not-empty>
        
        <if-not-empty field="parameters.pdpQuantityMax">
        	<call-class-method class-name="com.osafe.util.OsafeAdminUtil" method-name="isNumber" ret-field="isNumber">
	            <field field="parameters.pdpQuantityMax"/>
	        </call-class-method>
	        <if-compare field="isNumber" operator="equals" value="false">
	            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidPdpQtyMaxError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="pdpQuantityMax" list="error_list"/>
	            <else>
	            	<calculate field="pdpQuantityMinMaxSetCount">
	        			<calcop operator="add" >
	        				<calcop operator="get" field="pdpQuantityMinMaxSetCount"/>
              				<number value="1"/>
	        			</calcop>
	        		</calculate>
	            </else>
	        </if-compare>
        </if-not-empty>
        
        <if-compare field="pdpQuantityMinMaxSetCount" operator="greater" value="0" type="Integer">
        	<if-compare field="pdpQuantityMinMaxSetCount" operator="equals" value="1" type="Integer">
        		<!-- if only one is entered -->
        		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BothSetPdpQtyMinMaxError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="pdpQuantityMax" list="error_list"/>
	            <else>
	            	<if-compare field="pdpQuantityMinMaxSetCount" operator="equals" value="2" type="Integer">
	            		<!-- if both are entered -->
	            		<if-compare-field field="parameters.pdpQuantityMax" operator="greater-equals" to-field="parameters.pdpQuantityMin" type="Integer">
	            			<!-- both min and max are set and they both passed validation pdpQuantityMinMaxSetCount = 3 -->
			            	<calculate field="pdpQuantityMinMaxSetCount">
			        			<calcop operator="add" >
			        				<calcop operator="get" field="pdpQuantityMinMaxSetCount"/>
		              				<number value="1"/>
			        			</calcop>
			        		</calculate>
	            			<else>
	            				<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="PdpQtyMaxNotGreaterThanMinError"/>
	           					 <string-to-list string="${tempErrorMessage}" message-field="pdpQuantityMax" list="error_list"/>
	            			</else>
        				</if-compare-field>
	            	</if-compare>
	            </else>
        	</if-compare>
		</if-compare>
		
		<if-not-empty field="parameters.pdpQuantityDefault">
			<call-class-method class-name="com.osafe.util.OsafeAdminUtil" method-name="isNumber" ret-field="isNumber">
	            <field field="parameters.pdpQuantityDefault"/>
	        </call-class-method>
	        <if-compare field="isNumber" operator="equals"  value="false">
	            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidPdpQtyDefaultError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="pdpQuantityDefault" list="error_list"/>
	            <else>
	            	<if-compare field="pdpQuantityMinMaxSetCount" operator="equals" value="3" type="Integer">
	            		<if-compare-field field="parameters.pdpQuantityDefault" operator="greater"  to-field="parameters.pdpQuantityMax" type="Integer">
	            			<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="PdpQtyDefaultWithinMinMaxError"/>
	           				<string-to-list string="${tempErrorMessage}" message-field="pdpQuantityDefault" list="error_list"/>
	           				<else>
	           					<if-compare-field field="parameters.pdpQuantityDefault" operator="less" to-field="parameters.pdpQuantityMin" type="Integer">
	           						<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="PdpQtyDefaultWithinMinMaxError"/>
	           						<string-to-list string="${tempErrorMessage}" message-field="pdpQuantityDefault" list="error_list"/>
	           					</if-compare-field>
	           				</else>
	            		</if-compare-field>
	            	</if-compare>
	            </else>
	        </if-compare>
		</if-not-empty>

        <check-errors/>
        <now-timestamp field="nowStamp"/>
        
        <!-- create Product -->
        <set-service-fields service-name="createProduct" map="parameters" to-map="createProductCtx"/>
        <set field="createProductCtx.productId" from-field="parameters.productIdTo"/>
        <set field="createProductCtx.isVirtual" value="N"/>
        <set field="createProductCtx.isVariant" value="Y"/>
        <call-service service-name="createProduct" in-map-name="createProductCtx"/>

        <!-- remove virtual selectable feture if virtual have not any varaint-->
        <entity-and entity-name="ProductAssoc" list="productAssocList">
            <field-map field-name="productId" from-field="parameters.productId"/>
            <field-map field-name="productAssocTypeId" value="PRODUCT_VARIANT"/>
        </entity-and>
        <if-empty field="productAssocList">
            <entity-and entity-name="ProductFeatureAppl" list="productFeatureApplList">
                <field-map field-name="productId" from-field="parameters.productId"/>
                <field-map field-name="productFeatureApplTypeId" value="SELECTABLE_FEATURE"/>
            </entity-and>
            <if-not-empty field="productFeatureApplList">
                <remove-list list="productFeatureApplList"/>
            </if-not-empty>
        </if-empty>

        <!-- create Product Assoc-->
        <set-service-fields service-name="createProductAssoc" map="parameters" to-map="createProductAssocCtx"/>
        <set field="createProductAssocCtx.productAssocTypeId" value="PRODUCT_VARIANT"/>
        <set field="createProductAssocCtx.fromDate" from-field="nowStamp"/>
        <call-service service-name="createProductAssoc" in-map-name="createProductAssocCtx"/>

        <!-- create Product Feature Appl-->
        <iterate-map key="productFeatureKey" value="productFeatureValue" map="parameters.selectableProductFeature">
            <if-not-empty field="productFeatureValue">
                 <!-- productFeature request parameter value contains "@" symbol
                     between "productFeatureId" and "productFeatureApplTypeId".-->
                <call-bsh><![CDATA[
                    if (productFeatureValue != null) {
                       parameters.put("productFeatureId", productFeatureValue.substring(0, productFeatureValue.indexOf("@")));
                       parameters.put("productFeatureApplTypeId", productFeatureValue.substring(productFeatureValue.indexOf("@")+1));
                    }
                ]]></call-bsh>
                <!--   make virtual product associtation if not exist  -->
                <entity-and entity-name="ProductFeatureAppl" list="productFeatureApplList" filter-by-date="true">
                    <field-map field-name="productFeatureId" from-field="parameters.productFeatureId"/>
                    <field-map field-name="productId" from-field="parameters.productId"/>
                    <field-map field-name="productFeatureApplTypeId" from-field="parameters.productFeatureApplTypeId"/>
                </entity-and>
                <if-empty field="productFeatureApplList">
	                <set-service-fields service-name="createProductFeatureAppl" map="parameters" to-map="createVirtualProductFeatureApplCtx"/>
	                <set field="createVirtualProductFeatureApplCtx.fromDate" from-field="nowStamp"/>
	                <call-service service-name="createProductFeatureAppl" in-map-name="createVirtualProductFeatureApplCtx"/>
                </if-empty>
                <!--   make virtual SELECTABLE_FEATURE to variant STANDARD_FEATURE  -->
                <if-compare field="parameters.productFeatureApplTypeId" operator="equals" value="SELECTABLE_FEATURE" type="String">
                    <set field="parameters.productFeatureApplTypeId" value="STANDARD_FEATURE"/>
                </if-compare>
                <set-service-fields service-name="createProductFeatureAppl" map="parameters" to-map="createProductFeatureApplCtx"/>
                <set field="createProductFeatureApplCtx.productId" from-field="parameters.productIdTo"/>
                <set field="createProductFeatureApplCtx.fromDate" from-field="nowStamp"/>
                <call-service service-name="createProductFeatureAppl" in-map-name="createProductFeatureApplCtx"/>
            </if-not-empty>
        </iterate-map>
        <iterate-map key="productFeatureKey" value="productFeatureValue" map="parameters.distinguishProductFeature">
            <if-not-empty field="productFeatureValue">
                 <!-- productFeature request parameter value contains "@" symbol
                     between "productFeatureId" and "productFeatureApplTypeId".-->
                <call-bsh><![CDATA[
                    if (productFeatureValue != null) {
                       parameters.put("productFeatureId", productFeatureValue.substring(0, productFeatureValue.indexOf("@")));
                       parameters.put("productFeatureApplTypeId", productFeatureValue.substring(productFeatureValue.indexOf("@")+1));
                    }
                ]]></call-bsh>
                <!--   make virtual product associtation if not exist  -->
                <entity-and entity-name="ProductFeatureAppl" list="productFeatureApplList" filter-by-date="true">
                    <field-map field-name="productFeatureId" from-field="parameters.productFeatureId"/>
                    <field-map field-name="productId" from-field="parameters.productId"/>
                    <field-map field-name="productFeatureApplTypeId" from-field="parameters.productFeatureApplTypeId"/>
                </entity-and>
                <if-empty field="productFeatureApplList">
                    <set-service-fields service-name="createProductFeatureAppl" map="parameters" to-map="createVirtualProductFeatureApplCtx"/>
                    <set field="createVirtualProductFeatureApplCtx.fromDate" from-field="nowStamp"/>
                    <call-service service-name="createProductFeatureAppl" in-map-name="createVirtualProductFeatureApplCtx"/>
                </if-empty>
                <set-service-fields service-name="createProductFeatureAppl" map="parameters" to-map="createProductFeatureApplCtx"/>
                <set field="createProductFeatureApplCtx.productId" from-field="parameters.productIdTo"/>
                <set field="createProductFeatureApplCtx.fromDate" from-field="nowStamp"/>
                <call-service service-name="createProductFeatureAppl" in-map-name="createProductFeatureApplCtx"/>
            </if-not-empty>
        </iterate-map>
        
        <!-- SET MULTIPLE DESCRIPTIVE FEATURE  -->
	        <iterate-map key="productFeatureKey" value="productFeatureValue" map="parameters.distinguishProductFeatureMulti">
	            <if-not-empty field="productFeatureValue">
	                <call-class-method class-name="org.ofbiz.base.util.StringUtil" method-name="split" ret-field="productFeatureValueList">
                        <field field="productFeatureValue" type="String"/>
                        <string value="," />
                    </call-class-method>
                    <iterate entry="productFeatureValue" list="productFeatureValueList">
	                 <!-- productFeature request parameter value contains "@" symbol
	                     between "productFeatureId" and "productFeatureApplTypeId".-->
		                <call-bsh><![CDATA[
		                    if (productFeatureValue != null) {
		                       parameters.put("productFeatureId", productFeatureValue.substring(0, productFeatureValue.indexOf("@")));
		                       parameters.put("productFeatureApplTypeId", productFeatureValue.substring(productFeatureValue.indexOf("@")+1));
		                    }
		                ]]></call-bsh>
		                <!--   make virtual product associtation if not exist  -->
		                <entity-and entity-name="ProductFeatureAppl" list="productFeatureApplList" filter-by-date="true">
		                    <field-map field-name="productFeatureId" from-field="parameters.productFeatureId"/>
		                    <field-map field-name="productId" from-field="parameters.productId"/>
		                    <field-map field-name="productFeatureApplTypeId" from-field="parameters.productFeatureApplTypeId"/>
		                </entity-and>
		                <if-empty field="productFeatureApplList">
		                    <set-service-fields service-name="createProductFeatureAppl" map="parameters" to-map="createVirtualProductFeatureApplCtx"/>
		                    <set field="createVirtualProductFeatureApplCtx.productId" from-field="parameters.productId"/>
		                    <set field="createVirtualProductFeatureApplCtx.fromDate" from-field="nowStamp"/>
		                    <call-service service-name="createProductFeatureAppl" in-map-name="createVirtualProductFeatureApplCtx"/>
		                </if-empty>
		                <set-service-fields service-name="createProductFeatureAppl" map="parameters" to-map="createProductFeatureApplCtx"/>
		                <set field="createProductFeatureApplCtx.productId" from-field="parameters.productIdTo"/>
		                <set field="createProductFeatureApplCtx.fromDate" from-field="nowStamp"/>
		                <call-service service-name="createProductFeatureAppl" in-map-name="createProductFeatureApplCtx"/>
		            </iterate>
	            </if-not-empty>
	        </iterate-map>

        <!--  create variant list price      -->
        <if-not-empty field="parameters.variantListPrice">
            <set field="createProductVariantListPriceCtx.price" from-field="parameters.variantListPrice" type="BigDecimal"/>
            <set field="createProductVariantListPriceCtx.productId" from-field="parameters.productIdTo"/>
            <set field="createProductVariantListPriceCtx.currencyUomId" from-field="parameters.currencyUomId"/>
            <set field="createProductVariantListPriceCtx.productPriceTypeId" value="LIST_PRICE"/>
            <set field="createProductVariantListPriceCtx.productPricePurposeId" value="PURCHASE"/>
            <set field="createProductVariantListPriceCtx.productStoreGroupId" value="_NA_"/>
            <set field="createProductVariantListPriceCtx.fromDate" from-field="nowStamp" type="Timestamp"/>
            <call-service service-name="createProductPrice" in-map-name="createProductVariantListPriceCtx"/>
        </if-not-empty>
        
        <!--  create variant sales price      -->
        <if-not-empty field="parameters.variantSalePrice">
            <set field="createProductVariantSalePriceCtx.price" from-field="parameters.variantSalePrice" type="BigDecimal"/>
            <set field="createProductVariantSalePriceCtx.productId" from-field="parameters.productIdTo"/>
            <set field="createProductVariantSalePriceCtx.currencyUomId" from-field="parameters.currencyUomId"/>
            <set field="createProductVariantSalePriceCtx.productPriceTypeId" value="DEFAULT_PRICE"/>
            <set field="createProductVariantSalePriceCtx.productPricePurposeId" value="PURCHASE"/>
            <set field="createProductVariantSalePriceCtx.productStoreGroupId" value="_NA_"/>
            <set field="createProductVariantSalePriceCtx.fromDate" from-field="nowStamp" type="Timestamp"/>
            <call-service service-name="createProductPrice" in-map-name="createProductVariantSalePriceCtx"/>
        </if-not-empty>

        <!-- Manage Bigfish Inventory Product Attribute -->
        <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
        <set field="manageProductAttributeCtx.productId" from-field="parameters.productIdTo"/>
        <set field="manageProductAttributeCtx.attrName" value="BF_INVENTORY_TOT"/>
        <set field="manageProductAttributeCtx.attrValue" from-field="bfTotalInventory"/>
        <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
        <clear-field field="manageProductAttributeCtx"/>
        
        <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
        <set field="manageProductAttributeCtx.productId" from-field="parameters.productIdTo"/>
        <set field="manageProductAttributeCtx.attrName" value="BF_INVENTORY_WHS"/>
        <set field="manageProductAttributeCtx.attrValue" from-field="bfWHInventory"/>
        <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>

        <if-not-empty field="parameters.pdpInStoreOnly">
            <set field="pdpInStoreOnly" from-field="parameters.pdpInStoreOnly"/>
        <else>
            <set field="pdpInStoreOnly" value="N"/>
        </else>
        </if-not-empty>
        <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
        <set field="manageProductAttributeCtx.productId" from-field="parameters.productIdTo"/>
        <set field="manageProductAttributeCtx.attrName" value="PDP_IN_STORE_ONLY"/>
        <set field="manageProductAttributeCtx.attrValue" from-field="pdpInStoreOnly"/>
        <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
        <clear-field field="manageProductAttributeCtx"/>

        <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
        <set field="manageProductAttributeCtx.productId" from-field="parameters.productIdTo"/>
        <set field="manageProductAttributeCtx.attrName" value="CHECKOUT_GIFT_MESSAGE"/>
        <set field="manageProductAttributeCtx.attrValue" from-field="parameters.checkoutGiftMessage"/>
        <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
        <clear-field field="manageProductAttributeCtx"/>
        
        <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
        <set field="manageProductAttributeCtx.attrName" value="PDP_QTY_MIN"/>
        <set field="manageProductAttributeCtx.attrValue" from-field="parameters.pdpQuantityMin"/>
        <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
        <clear-field field="manageProductAttributeCtx"/>
        <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
        <set field="manageProductAttributeCtx.attrName" value="PDP_QTY_MAX"/>
        <set field="manageProductAttributeCtx.attrValue" from-field="parameters.pdpQuantityMax"/>
        <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
        <clear-field field="manageProductAttributeCtx"/>
        <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
        <set field="manageProductAttributeCtx.attrName" value="PDP_QTY_DEFAULT"/>
        <set field="manageProductAttributeCtx.attrValue" from-field="parameters.pdpQuantityDefault"/>
        <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
        <clear-field field="manageProductAttributeCtx"/>

        <!-- For LONG_DESCRIPTION Product Content -->
		<set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductLongText"/>
        <set field="updateProductLongText.productId" from-field="parameters.productIdTo"/>
		<set field="updateProductLongText.text" from-field="parameters.longDescription"/>
		<set field="updateProductLongText.productContentTypeId" value="LONG_DESCRIPTION"/>
		<call-service service-name="updateProductContentText" in-map-name="updateProductLongText"/>
		
		<!-- For SHORT_SALES_PITCH Product Content -->
		<set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductSalesText"/>
        <set field="updateProductSalesText.productId" from-field="parameters.productIdTo"/>
		<set field="updateProductSalesText.text" from-field="parameters.shortSalesPitch"/>
		<set field="updateProductSalesText.productContentTypeId" value="SHORT_SALES_PITCH"/>
		<call-service service-name="updateProductContentText" in-map-name="updateProductSalesText"/>
		            
		<!-- For SPECIALINSTRUCTIONS Product Content -->
		<set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductInstText"/>
        <set field="updateProductInstText.productId" from-field="parameters.productIdTo"/>
        <set field="updateProductInstText.text" from-field="parameters.specialInstruction"/>
        <set field="updateProductInstText.productContentTypeId" value="SPECIALINSTRUCTIONS"/>
        <call-service service-name="updateProductContentText" in-map-name="updateProductInstText"/>
            
        <!-- For DELIVERY_INFO Product Content -->
        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductDelivText"/>
              <set field="updateProductDelivText.productId" from-field="parameters.productIdTo"/>
        <set field="updateProductDelivText.text" from-field="parameters.deliveryInfo"/>
        <set field="updateProductDelivText.productContentTypeId" value="DELIVERY_INFO"/>
        <call-service service-name="updateProductContentText" in-map-name="updateProductDelivText"/>
            
        <!-- For DIRECTIONS Product Content -->
        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductDirectText"/>
              <set field="updateProductDirectText.productId" from-field="parameters.productIdTo"/>
        <set field="updateProductDirectText.text" from-field="parameters.directions"/>
        <set field="updateProductDirectText.productContentTypeId" value="DIRECTIONS"/>
        <call-service service-name="updateProductContentText" in-map-name="updateProductDirectText"/>
            
        <!-- For TERMS_AND_CONDS Product Content -->
        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductTermsText"/>
              <set field="updateProductTermsText.productId" from-field="parameters.productIdTo"/>
        <set field="updateProductTermsText.text" from-field="parameters.termsAndConds"/>
        <set field="updateProductTermsText.productContentTypeId" value="TERMS_AND_CONDS"/>
        <call-service service-name="updateProductContentText" in-map-name="updateProductTermsText"/>
            
        <!-- For INGREDIENTS Product Content -->
        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductIngredText"/>
              <set field="updateProductIngredText.productId" from-field="parameters.productIdTo"/>
        <set field="updateProductIngredText.text" from-field="parameters.ingredients"/>
        <set field="updateProductIngredText.productContentTypeId" value="INGREDIENTS"/>
        <call-service service-name="updateProductContentText" in-map-name="updateProductIngredText"/>
            
        <!-- For WARNINGS Product Content -->
        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductWarnText"/>
              <set field="updateProductWarnText.productId" from-field="parameters.productIdTo"/>
        <set field="updateProductWarnText.text" from-field="parameters.warnings"/>
        <set field="updateProductWarnText.productContentTypeId" value="WARNINGS"/>
        <call-service service-name="updateProductContentText" in-map-name="updateProductWarnText"/>
        
        <set field="idValueMap" from-field="parameters.idValue"/>
        <iterate-map key="goodIdentificationTypeIdKey" value="goodIdentificationTypeIdValue" map="parameters.goodIdentificationTypeId">
            <set field="idValue" from-field="idValueMap.${goodIdentificationTypeIdKey}"/>
            <set field="manageGoodIdentificationCtx.productId" from-field="parameters.productIdTo"/>
            <set field="manageGoodIdentificationCtx.idValue" from-field="idValue"/>
            <set field="manageGoodIdentificationCtx.goodIdentificationTypeId" from-field="goodIdentificationTypeIdValue"/>
            <call-service service-name="manageGoodIdentification" in-map-name="manageGoodIdentificationCtx"/>
            <clear-field field="manageGoodIdentificationCtx"/>
        </iterate-map>
        
        <set field="argListNames[]" from-field="parameters.productIdTo"/>
	    <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="htmlSpecialChars" ret-field="productDetailNamehtml">
            <field field="parameters.productDetailName"/>
        </call-class-method>
	    <set field="argListNames[]" from-field="productDetailNamehtml"/>
        <property-to-field resource="OSafeAdminUiLabels" property="ProductSavedSuccess" field="productSavedSuccess" arg-list-name="argListNames"/>
        <string-to-list string="${productSavedSuccess}" list="successMessageList"/>
        
        <field-to-result field="parameters.productId" result-name="productId"/>
        <field-to-result field="parameters.productIdTo" result-name="productIdTo"/>
    </simple-method>

    <simple-method method-name="updateProductVariants" short-description="update product variant detail in group">
        <if-not-empty field="parameters.variantListPrice">
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="checkFloatResult">
                <field field="parameters.variantListPrice"/>
            </call-class-method>
            <if-compare field="checkFloatResult" operator="equals" value="false" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductVariantListPriceError"/>
                <string-to-list string="${tempErrorMessage}" message-field="variantListPrice" list="error_list"/>
            </if-compare>
        </if-not-empty>

        <if-not-empty field="parameters.variantSalePrice">
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="checkFloatResult">
                <field field="parameters.variantSalePrice"/>
            </call-class-method>
            <if-compare field="checkFloatResult" operator="equals" value="false" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductVariantSalePriceError"/>
                <string-to-list string="${tempErrorMessage}" message-field="variantSalePrice" list="error_list"/>
            </if-compare>
        </if-not-empty>

        <if-not-empty field="parameters.introductionDate">
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isDateTime" ret-field="checkDateValidResult">
                <field field="parameters.introductionDate"/>
                <field field="parameters.entryDateTimeFormat"/>
            </call-class-method>
            <if-compare field="checkDateValidResult" operator="equals" value="false" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidProductIntroDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="introductionDate" list="error_list"/>
                <else>
                    <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="toTimestamp" ret-field="parameters.introductionDate">
                        <field field="parameters.introductionDate"/>
                        <field field="parameters.entryDateTimeFormat"/>
                    </call-class-method>
                </else>
            </if-compare>
        </if-not-empty>

        <if-not-empty field="parameters.salesDiscontinuationDate">
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isDateTime" ret-field="checkDateValidResult">
                <field field="parameters.salesDiscontinuationDate"/>
                <field field="parameters.entryDateTimeFormat"/>
            </call-class-method>
            <if-compare field="checkDateValidResult" operator="equals" value="false" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidProductDiscontDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="salesDiscontinuationDate" list="error_list"/>
                <else>
                    <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="toTimestamp" ret-field="parameters.salesDiscontinuationDate">
                        <field field="parameters.salesDiscontinuationDate"/>
                        <field field="parameters.entryDateTimeFormat"/>
                    </call-class-method>
                </else>
            </if-compare>
        </if-not-empty>
        
        <if-not-empty field="parameters.introductionDate">
            <if-not-empty field="parameters.salesDiscontinuationDate">
                <if-compare-field field="parameters.introductionDate" operator="greater" to-field="parameters.salesDiscontinuationDate" type="Timestamp">
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductIntroDiscCompareError"/>
                    <string-to-list string="${tempErrorMessage}"  message-field="introductionDate" list="error_list"/>
                </if-compare-field>
            </if-not-empty>
        </if-not-empty>
        
        <set field="bfTotalInventory" from-field="parameters.bfTotalInventory" default-value="0"/>
        <set field="bfWHInventory" from-field="parameters.bfWHInventory" default-value="0"/>
        
        <if-not-empty field="bfTotalInventory"> 
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isSignedInteger" ret-field="bfTotalInventoryVaild">
               <string value="${bfTotalInventory}"></string>
            </call-class-method>
            <if-compare operator="equals" value="false" field="bfTotalInventoryVaild" type="Boolean">
                <set field="bfTotalInventory" value="0" type="Long"/>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidBFTotalInventoryError"/>
                <string-to-list string="${tempErrorMessage}" message-field="bfTotalInventory" list="error_list"/>
            <else>
                <if>
                    <condition>
                    <and>
                        <if-compare operator="greater-equals" value="-9999" field="bfTotalInventory" type="Long"/>
                        <if-compare operator="less-equals" value="99999" field="bfTotalInventory" type="Long"/>
                    </and>
                    </condition>
                <then>
                </then>
                <else>
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidBFTotalInventoryError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="bfTotalInventory" list="error_list"/>
                </else>
                </if>
            </else>
            </if-compare>
        </if-not-empty>
        
        <if-not-empty field="bfWHInventory"> 
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isSignedInteger" ret-field="bfWHInventoryVaild">
               <string value="${bfWHInventory}"></string>
            </call-class-method>
            <if-compare operator="equals" value="false" field="bfWHInventoryVaild" type="Boolean">
                <set field="bfWHInventory" value="0" type="Long"/>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidBFWHInventoryError"/>
                <string-to-list string="${tempErrorMessage}" message-field="bfWHInventory" list="error_list"/>
            <else>
                <if>
                    <condition>
                    <and>
                        <if-compare operator="greater-equals" value="-9999" field="bfWHInventory" type="Long"/>
                        <if-compare operator="less-equals" value="99999" field="bfWHInventory" type="Long"/>
                    </and>
                    </condition>
                <then>
                </then>
                <else>
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidBFWHInventoryError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="bfWHInventory" list="error_list"/>
                </else>
                </if>
            </else>
            </if-compare>
        </if-not-empty>
        
        <set field="productHeight" from-field="parameters.productHeight" />
        <if-not-empty field="productHeight">
             <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isFloat" ret-field="heightVaild">
                <field field="productHeight"/>
             </call-class-method>
             <if-compare operator="equals" value="false" field="heightVaild" type="Boolean">
               <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidHeightError"/>
               <string-to-list string="${tempErrorMessage}" message-field="productHeight" list="error_list"/>
             </if-compare>
        </if-not-empty>
        <set field="productWidth" from-field="parameters.productWidth" />
        <if-not-empty field="productWidth">
             <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isFloat" ret-field="widthVaild">
                <field field="productWidth"/>
             </call-class-method>
             <if-compare operator="equals" value="false" field="widthVaild" type="Boolean">
               <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidWidthError"/>
               <string-to-list string="${tempErrorMessage}" message-field="productWidth" list="error_list"/>
             </if-compare>
        </if-not-empty>
        <set field="productDepth" from-field="parameters.productDepth" />
        <if-not-empty field="productDepth">
             <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isFloat" ret-field="depthVaild">
                <field field="productDepth"/>
             </call-class-method>
             <if-compare operator="equals" value="false" field="depthVaild" type="Boolean">
               <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidDepthError"/>
               <string-to-list string="${tempErrorMessage}" message-field="productDepth" list="error_list"/>
             </if-compare>
        </if-not-empty>
        <set field="weight" from-field="parameters.weight" />
        <if-not-empty field="weight">
             <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isFloat" ret-field="weightVaild">
                <field field="weight"/>
             </call-class-method>
             <if-compare operator="equals" value="false" field="weightVaild" type="Boolean">
               <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidWeightError"/>
               <string-to-list string="${tempErrorMessage}" message-field="weight" list="error_list"/>
             </if-compare>
        </if-not-empty>
               
        <check-errors/>
        
        <if-not-empty field="parameters.variantProductIds">
            <call-class-method class-name="org.ofbiz.base.util.StringUtil" method-name="split" ret-field="variantProductIdList">
                   <field field="parameters.variantProductIds" type="String"/>
                   <string value="|" />
            </call-class-method>
            <iterate entry="variantProductId" list="variantProductIdList">
		        <set-service-fields service-name="updateProduct" map="parameters" to-map="updateProductCtx"/>
                <set field="updateProductCtx.productId" from-field="variantProductId"/>
		        <call-service service-name="updateProduct" in-map-name="updateProductCtx"/>
		        
	        	<set field="createUpdateProdPriceCtx.productId" from-field="variantProductId"/>
	            <set field="createUpdateProdPriceCtx.newPrice" from-field="parameters.variantListPrice" type="BigDecimal"/>
	            <set field="createUpdateProdPriceCtx.productPriceTypeId" value="LIST_PRICE"/>
	            <set field="createUpdateProdPriceCtx.isVariant" value="Y"/>
	            <set field="createUpdateProdPriceCtx.currencyUomId" from-field="parameters.currencyUomId"/>
	            <set field="createUpdateProdPriceCtx.productPricePurposeId" value="PURCHASE"/>
	            <set field="createUpdateProdPriceCtx.productStoreGroupId" value="_NA_"/>
	            <call-service service-name="createUpdateProdPrice" in-map-name="createUpdateProdPriceCtx"/>
	            
	            <set field="createUpdateProdPriceCtx.productId" from-field="variantProductId"/>
	            <set field="createUpdateProdPriceCtx.newPrice" from-field="parameters.variantSalePrice" type="BigDecimal"/>
	            <set field="createUpdateProdPriceCtx.productPriceTypeId" value="DEFAULT_PRICE"/>
	            <set field="createUpdateProdPriceCtx.isVariant" value="Y"/>
	            <set field="createUpdateProdPriceCtx.currencyUomId" from-field="parameters.currencyUomId"/>
	            <set field="createUpdateProdPriceCtx.productPricePurposeId" value="PURCHASE"/>
	            <set field="createUpdateProdPriceCtx.productStoreGroupId" value="_NA_"/>
	            <call-service service-name="createUpdateProdPrice" in-map-name="createUpdateProdPriceCtx"/>

		        <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
                <set field="manageProductAttributeCtx.productId" from-field="variantProductId"/>
		        <set field="manageProductAttributeCtx.attrName" value="BF_INVENTORY_TOT"/>
		        <set field="manageProductAttributeCtx.attrValue" from-field="bfTotalInventory"/>
		        <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
		        <clear-field field="manageProductAttributeCtx"/>
		        
		        <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
                <set field="manageProductAttributeCtx.productId" from-field="variantProductId"/>
		        <set field="manageProductAttributeCtx.attrName" value="BF_INVENTORY_WHS"/>
		        <set field="manageProductAttributeCtx.attrValue" from-field="bfWHInventory"/>
		        <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
		        <clear-field field="manageProductAttributeCtx"/>
        
                <if-not-empty field="parameters.pdpInStoreOnly">
		            <set field="pdpInStoreOnly" from-field="parameters.pdpInStoreOnly"/>
		        <else>
		            <set field="pdpInStoreOnly" value="N"/>
		        </else>
		        </if-not-empty>
                <set-service-fields service-name="manageProductAttribute" to-map="manageProductAttributeCtx" map="parameters"/>
                <set field="manageProductAttributeCtx.productId" from-field="variantProductId"/>
		        <set field="manageProductAttributeCtx.attrName" value="PDP_IN_STORE_ONLY"/>
		        <set field="manageProductAttributeCtx.attrValue" from-field="pdpInStoreOnly"/>
		        <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
		        <clear-field field="manageProductAttributeCtx"/>
                
		        <!-- For LONG_DESCRIPTION Product Content -->
		        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductLongText"/>
                <set field="updateProductLongText.productId" from-field="variantProductId"/>
		        <set field="updateProductLongText.text" from-field="parameters.longDescription"/>
		        <set field="updateProductLongText.productContentTypeId" value="LONG_DESCRIPTION"/>
		        <call-service service-name="updateProductContentText" in-map-name="updateProductLongText"/>
		
		        <!-- For SHORT_SALES_PITCH Product Content -->
		        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductSalesText"/>
                <set field="updateProductSalesText.productId" from-field="variantProductId"/>
		        <set field="updateProductSalesText.text" from-field="parameters.shortSalesPitch"/>
		        <set field="updateProductSalesText.productContentTypeId" value="SHORT_SALES_PITCH"/>
		        <call-service service-name="updateProductContentText" in-map-name="updateProductSalesText"/>
		            
		        <!-- For SPECIALINSTRUCTIONS Product Content -->
		        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductInstText"/>
                <set field="updateProductInstText.productId" from-field="variantProductId"/>
		        <set field="updateProductInstText.text" from-field="parameters.specialInstruction"/>
		        <set field="updateProductInstText.productContentTypeId" value="SPECIALINSTRUCTIONS"/>
		        <call-service service-name="updateProductContentText" in-map-name="updateProductInstText"/>
		            
		        <!-- For DELIVERY_INFO Product Content -->
		        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductDelivText"/>
                <set field="updateProductDelivText.productId" from-field="variantProductId"/>
		        <set field="updateProductDelivText.text" from-field="parameters.deliveryInfo"/>
		        <set field="updateProductDelivText.productContentTypeId" value="DELIVERY_INFO"/>
		        <call-service service-name="updateProductContentText" in-map-name="updateProductDelivText"/>
		            
		        <!-- For DIRECTIONS Product Content -->
		        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductDirectText"/>
                <set field="updateProductDirectText.productId" from-field="variantProductId"/>
		        <set field="updateProductDirectText.text" from-field="parameters.directions"/>
		        <set field="updateProductDirectText.productContentTypeId" value="DIRECTIONS"/>
		        <call-service service-name="updateProductContentText" in-map-name="updateProductDirectText"/>
		            
		        <!-- For TERMS_AND_CONDS Product Content -->
		        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductTermsText"/>
                <set field="updateProductTermsText.productId" from-field="variantProductId"/>
		        <set field="updateProductTermsText.text" from-field="parameters.termsAndConds"/>
		        <set field="updateProductTermsText.productContentTypeId" value="TERMS_AND_CONDS"/>
		        <call-service service-name="updateProductContentText" in-map-name="updateProductTermsText"/>
		            
		        <!-- For INGREDIENTS Product Content -->
		        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductIngredText"/>
                <set field="updateProductIngredText.productId" from-field="variantProductId"/>
		        <set field="updateProductIngredText.text" from-field="parameters.ingredients"/>
		        <set field="updateProductIngredText.productContentTypeId" value="INGREDIENTS"/>
		        <call-service service-name="updateProductContentText" in-map-name="updateProductIngredText"/>
		            
		        <!-- For WARNINGS Product Content -->
		        <set-service-fields service-name="updateProductContentText" map="parameters" to-map="updateProductWarnText"/>
                <set field="updateProductWarnText.productId" from-field="variantProductId"/>
		        <set field="updateProductWarnText.text" from-field="parameters.warnings"/>
		        <set field="updateProductWarnText.productContentTypeId" value="WARNINGS"/>
		        <call-service service-name="updateProductContentText" in-map-name="updateProductWarnText"/>
		        
		        <set field="idValueMap" from-field="parameters.idValue"/>
		        <iterate-map key="goodIdentificationTypeIdKey" value="goodIdentificationTypeIdValue" map="parameters.goodIdentificationTypeId">
		            <set field="idValue" from-field="idValueMap.${goodIdentificationTypeIdKey}"/>
		            <set field="manageGoodIdentificationCtx.productId" from-field="variantProductId"/>
		            <set field="manageGoodIdentificationCtx.idValue" from-field="idValue"/>
		            <set field="manageGoodIdentificationCtx.goodIdentificationTypeId" from-field="goodIdentificationTypeIdValue"/>
		            <call-service service-name="manageGoodIdentification" in-map-name="manageGoodIdentificationCtx"/>
		            <clear-field field="manageGoodIdentificationCtx"/>
		        </iterate-map>
            </iterate>
            <!-- Clear the Product Content Rendered Cache -->
            <call-class-method class-name="org.ofbiz.base.util.cache.UtilCache"  method-name="clearCache">
                <string value="product.content.rendered"/>
            </call-class-method>
        </if-not-empty>
        <field-to-result field="parameters.productId" result-name="productId"/>
        
        <property-to-field resource="OSafeAdminUiLabels" property="ProductGenericSavedSuccess" field="productGenericSavedSuccessMessage"/>
	    <string-to-list string="${productGenericSavedSuccessMessage}" list="successMessageList"/>
	    
    </simple-method>
    
    <simple-method method-name="manageProductCategoryMemberships" short-description="Update product category member">
        <if-not-empty field="parameters.productCategoryMemberId">
            <iterate-map key="productCategoryMemberIdKey" value="productCategoryMemberIdValue" map="parameters.productCategoryMemberId">
                <field-to-list field="productCategoryMemberIdValue" list="newCategoryMemberIdList"/>
            </iterate-map>
        <else>
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankCategoryMemberIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="productCategoryMemberId" list="error_list"/>
        </else>
        </if-not-empty>
        <if-not-empty field="newCategoryMemberIdList">
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="findDuplicates" ret-field="dupCategoryMemberIdList">
                <field field="newCategoryMemberIdList" type="List"/>
            </call-class-method>
        </if-not-empty>
        <if-not-empty field="dupCategoryMemberIdList">
            <iterate entry="dupCategoryMemberId" list="dupCategoryMemberIdList">
                <clear-field field="argListNames"/>
                <entity-one value-field="productCategory" entity-name="ProductCategory">
                    <field-map field-name="productCategoryId" from-field="dupCategoryMemberId"/>
                </entity-one>
                <entity-one value-field="primaryParentCategory" entity-name="ProductCategory">
                    <field-map field-name="productCategoryId" from-field="productCategory.primaryParentCategoryId"/>
                </entity-one>
                <set field="argListNames[]" value="${primaryParentCategory.categoryName} / ${productCategory.categoryName}"/>
                <property-to-field resource="OSafeAdminUiLabels" property="DuplicateCategoryMemberIdError" field="tempErrorMessage" arg-list-name="argListNames"/>
                <string-to-list string="${tempErrorMessage}"  message-field="productCategoryId" list="error_list"/>
            </iterate>
        </if-not-empty>
        <check-errors/>
        
        <entity-and entity-name="ProductCategoryMember" list="productCategoryMemberList" filter-by-date="true">
            <field-map field-name="productId" from-field="parameters.productId"/>
        </entity-and>
        
        <call-bsh><![CDATA[
            List existingCategoryMemberIds = org.ofbiz.entity.util.EntityUtil.getFieldListFromEntityList(productCategoryMemberList, "productCategoryId", true);
            parameters.put("existingCategoryMemberIds",existingCategoryMemberIds);
        ]]></call-bsh>
        
        <set field="existingCategoryMemberIds" from-field="parameters.existingCategoryMemberIds"/>
        
        <if-not-empty field="newCategoryMemberIdList">
            <call-bsh><![CDATA[
                List allCategoryMemberIds = javolution.util.FastList.newInstance();
                allCategoryMemberIds.addAll(existingCategoryMemberIds);
                
                for(String newCategoryMemberId : newCategoryMemberIdList)
                {
                    if(!allCategoryMemberIds.contains(newCategoryMemberId)) {
                        allCategoryMemberIds.add(newCategoryMemberId);
                    }
                }
                parameters.put("allCategoryMemberIds",allCategoryMemberIds);
            ]]></call-bsh>
        <else>
            <call-bsh><![CDATA[
                List allCategoryMemberIds = javolution.util.FastList.newInstance();
                allCategoryMemberIds.addAll(existingCategoryMemberIds);
                
                parameters.put("allCategoryMemberIds",allCategoryMemberIds);
            ]]></call-bsh>
        </else>
        </if-not-empty>
        <now-timestamp field="nowStamp"/>
        <set field="allCategoryMemberIds" from-field="parameters.allCategoryMemberIds"/>
        <iterate entry="allCategoryMemberId" list="allCategoryMemberIds">
            
            <if>
                <condition>
                    <and>
                        <if-compare-field field="existingCategoryMemberIds" to-field="allCategoryMemberId" operator="contains"/>
                        <if-compare-field field="newCategoryMemberIdList" to-field="allCategoryMemberId" operator="contains"/>
                    </and>
                </condition>
                <!-- do nothing -->
                <then></then>
            <else-if>
                <condition>
                    <and>
                        <if-compare-field field="existingCategoryMemberIds" to-field="allCategoryMemberId" operator="contains"/>
                        <not><if-compare-field field="newCategoryMemberIdList" to-field="allCategoryMemberId" operator="contains"/></not>
                    </and>
                </condition>
                <!-- Perform EXPIRE -->
                <then>
                <entity-and entity-name="ProductCategoryMember" list="productCategoryMemberList" filter-by-date="true">
                    <field-map field-name="productCategoryId" from-field="allCategoryMemberId"/>
                    <field-map field-name="productId" from-field="parameters.productId"/>
                </entity-and>
                <iterate entry="productCategoryMember" list="productCategoryMemberList">
		            <set field="updateProductToCategoryCtx.productCategoryId" from-field="productCategoryMember.productCategoryId"/>
		            <set field="updateProductToCategoryCtx.productId" from-field="parameters.productId"/>
		            <set field="updateProductToCategoryCtx.fromDate" from-field="productCategoryMember.fromDate" type="Timestamp"/>
                    <set field="updateProductToCategoryCtx.thruDate" from-field="nowStamp" type="Timestamp"/>
		            <call-service service-name="updateProductToCategory" in-map-name="updateProductToCategoryCtx"/>
                </iterate>
                </then>
            </else-if>
            <else-if>
                <condition>
                    <and>
                        <not><if-compare-field field="existingCategoryMemberIds" to-field="allCategoryMemberId" operator="contains"/></not>
                        <if-compare-field field="newCategoryMemberIdList" to-field="allCategoryMemberId" operator="contains"/>
                    </and>
                </condition>
                <!-- Perform CREATE -->
                <then>
                    <set field="callCreateProductCategoryMemberMap.productId" from-field="parameters.productId"/>
                    <set field="callCreateProductCategoryMemberMap.productCategoryId" from-field="allCategoryMemberId"/>
                    <call-service service-name="addProductToCategory" in-map-name="callCreateProductCategoryMemberMap"/>
                </then>
            </else-if>
            </if>
        </iterate>
        <set field="argListNames[]" from-field="parameters.productId"/>
        <property-to-field resource="OSafeAdminUiLabels" property="ManageProductCategoryMembershipMsgSuccess" field="manageProductCategoryMembershipMsgSuccess" arg-list-name="argListNames"/>
        <string-to-list string="${manageProductCategoryMembershipMsgSuccess}" list="successMessageList"/>
    </simple-method>
    
    
    <simple-method method-name="manageProductFeature" short-description="make product feature association">
    
        <now-timestamp field="nowStamp"/>
        <iterate-map key="productFeatureGroupIdKey" value="productFeatureGroupIdValue" map="parameters.productFeatureGroupIds">
            <iterate-map key="productFeatureApplTypeIdKey" value="productFeatureApplTypeIdValue" map="parameters.productFeatureApplTypeIds">
                <if-compare-field field="productFeatureGroupIdKey" to-field="productFeatureApplTypeIdKey" operator="equals">
                    <!-- check if feature group is distinguish then feature id should be select -->
                    <if-compare field="productFeatureApplTypeIdValue" operator="equals" value="DISTINGUISHING_FEAT">
                        <iterate-map key="productFeatureIdKey" value="productFeatureIdValue" map="parameters.productFeatureIds">
                            <if-compare-field field="productFeatureGroupIdKey" to-field="productFeatureIdKey" operator="equals">
                                <if-not-empty field="productFeatureIdValue">
				                    <set field="createVirtualProductFeatureApplCtx.productId" from-field="parameters.productId"/>
                                    <set field="createVirtualProductFeatureApplCtx.productFeatureId" from-field="productFeatureIdValue"/>
                                    <set field="createVirtualProductFeatureApplCtx.productFeatureApplTypeId" value="DISTINGUISHING_FEAT"/>
                                    <set field="createVirtualProductFeatureApplCtx.fromDate" from-field="nowStamp"/>
				                    <call-service service-name="createProductFeatureAppl" in-map-name="createVirtualProductFeatureApplCtx"/>
                                </if-not-empty>
                            </if-compare-field>
                        </iterate-map>
                        
                        <!-- SET MULTIPLE DESCRIPTIVE FEATURE  -->
	                        
	                        <iterate-map key="productFeatureKey" value="productFeatureValue" map="parameters.distinguishProductFeatureMulti">
	                            <if-compare-field field="productFeatureKey" to-field="productFeatureGroupIdValue" operator="equals">
						            <if-not-empty field="productFeatureValue">
						                <call-class-method class-name="org.ofbiz.base.util.StringUtil" method-name="split" ret-field="productFeatureValueList">
					                        <field field="productFeatureValue" type="String"/>
					                        <string value="," />
					                    </call-class-method>
					                    <iterate entry="productFeatureValue" list="productFeatureValueList">
						                 <!-- productFeature request parameter value contains "@" symbol
						                     between "productFeatureId" and "productFeatureApplTypeId".-->
							                <call-bsh><![CDATA[
							                    if (productFeatureValue != null) {
							                       parameters.put("productFeatureId", productFeatureValue.substring(0, productFeatureValue.indexOf("@")));
							                       parameters.put("productFeatureApplTypeId", productFeatureValue.substring(productFeatureValue.indexOf("@")+1));
							                    }
							                ]]></call-bsh>
							                
							                <set field="createVirtualProductFeatureApplCtx.productId" from-field="parameters.productId"/>
		                                    <set field="createVirtualProductFeatureApplCtx.productFeatureId" from-field="parameters.productFeatureId"/>
		                                    <set field="createVirtualProductFeatureApplCtx.productFeatureApplTypeId" value="DISTINGUISHING_FEAT"/>
		                                    <set field="createVirtualProductFeatureApplCtx.fromDate" from-field="nowStamp"/>
						                    <call-service service-name="createProductFeatureAppl" in-map-name="createVirtualProductFeatureApplCtx"/>
							                
							            </iterate>
						            </if-not-empty>
						        </if-compare-field>
	                        </iterate-map>
                        
                    <else>
                        <if-compare field="parameters.isVirtual" operator="equals" value="Y">
	                        <!-- check if feature group is selectable  -->
		                    <if-compare field="productFeatureApplTypeIdValue" operator="equals" value="SELECTABLE_FEATURE">
		                        <entity-and list="productFeatureGroupApplList" entity-name="ProductFeatureGroupAppl" filter-by-date="true">
		                            <field-map field-name="productFeatureGroupId" from-field="productFeatureGroupIdValue"/>
		                            <order-by field-name="sequenceNum"/>
		                        </entity-and>
		                        <if-not-empty field="productFeatureGroupApplList">
		                            <first-from-list entry="productFeatureGroupAppl" list="productFeatureGroupApplList"/>
		                            <set field="createVirtualProductFeatureApplCtx.productId" from-field="parameters.productId"/>
		                            <set field="createVirtualProductFeatureApplCtx.productFeatureId" from-field="productFeatureGroupAppl.productFeatureId"/>
		                            <set field="createVirtualProductFeatureApplCtx.productFeatureApplTypeId" value="SELECTABLE_FEATURE"/>
		                            <set field="createVirtualProductFeatureApplCtx.fromDate" from-field="nowStamp"/>
		                            <call-service service-name="createProductFeatureAppl" in-map-name="createVirtualProductFeatureApplCtx"/>
		                        </if-not-empty>
		                    </if-compare>
                        </if-compare>
                    </else>
                    </if-compare>
                </if-compare-field>
            </iterate-map>
        </iterate-map>
    </simple-method>


    <!-- remove an existing ProductFeatureAppl -->
    <simple-method method-name="removeProductFeatureAppl" short-description="Remove an existing ProductFeatureAppl">
        <entity-one entity-name="ProductFeatureAppl" value-field="productFeatureAppl" auto-field-map="true"/>
        <check-errors/>
        <remove-value value-field="productFeatureAppl"/>
        <check-errors/>
    </simple-method>
    
    <simple-method method-name="createManufacturer" short-description="create Manufacturer">
        <if-empty field="parameters.manufacturerPartyId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankProductStoreShipMethIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="productStoreShipMethId" list="error_list"/>
            <else>
            	<set field="parameters.partyId" from-field="parameters.manufacturerPartyId"/>
                <set field="maxLength" value="20" type="Integer"/>
                <set field="spaceReplacement" value=" " type="String"/>
                <set field="makeUpCase" value="true" type="Boolean"/>
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="makeValidId" ret-field="partyId">
                    <field field="parameters.partyId" type="String"/>
                    <field field="maxLength" type="Integer"/>
                    <field field="spaceReplacement" type="String"/>
                    <field field="makeUpCase" type="boolean"/>
                </call-class-method>
                <if-empty field="partyId">
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ManufacturerPartyIdLengthError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="manufacturerPartyId"  list="error_list"/>
                <else>
                    <set from-field="partyId" field="existingPartyValue.partyId"/>
                    <find-by-primary-key entity-name="Party" map="existingPartyValue" value-field="existingParty"/>
                    <if-not-empty field="existingParty">
                            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ManufacturerPartyIdExistError"/>
                            <string-to-list string="${tempErrorMessage}" message-field="manufacturerPartyId"  list="error_list"/>
                            <else>
                                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidId" ret-field="isValidId">
					                <field field="parameters.partyId"/>
					            </call-class-method>
					            <if-compare field="isValidId" operator="equals" value="false">
					            	<set field="errorKey" from-field="parameters.partyId"/>
					                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidIdError"/>
					                <string-to-list string="${tempErrorMessage}" message-field="manufacturerPartyId"  list="error_list"/>
					            </if-compare>
					            <set field="parameters.partyId" from-field="partyId"/>
                            </else>
                     </if-not-empty>
                </else>
                </if-empty>
            </else>
        </if-empty>
        
        <if-empty field="parameters.profileName">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidProfileNameError"/>
            <string-to-list string="${tempErrorMessage}" message-field="profileName" list="error_list"/>
        </if-empty>
        <if-empty field="parameters.description">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidDescriptionError"/>
            <string-to-list string="${tempErrorMessage}" message-field="description" list="error_list"/>
        </if-empty>
        
        <!-- Validate Profile image section -->
        <property-to-field resource="OsafeProperties" property="osafeThemeServer" field="osafeThemeServerPath"/>
        <if-compare operator="equals" value="file" field="parameters.largeImageResourceType">
            <if-not-empty field="parameters._largeImage_fileName">
                <set field="largeImageTargetPath" value="${osafeThemeServerPath}${parameters.largeImageFilePath}"/>
                <create-object class-name="java.io.File" field="largeImageTargetPathFile">
                    <field field="largeImageTargetPath" type="String"/>
                </create-object>
                <if-not-empty field="parameters.largeImageFilePath">
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
	                    <field field="parameters.largeImageFilePath"/>
	                </call-class-method>
	                <if-compare operator="equals" value="false" field="isValidURL">
	                    <call-object-method method-name="exists" obj-field="largeImageTargetPathFile" ret-field="islargeImageTargetPathFile"/>
		                <if-compare operator="equals" value="false" field="islargeImageTargetPathFile" type="Boolean">
		                    <clear-field field="argListNames"/>
		                    <set field="argListNames[]" from-field="parameters.largeImageFilePath"/>
		                    <set field="argListNames[]" value="Large"/>
		                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathNotExistError" arg-list-name="argListNames"/>
		                    <string-to-list string="${tempErrorMessage}" message-field="largeImageFilePath" list="error_list"/>
		                </if-compare>
		            <else>
		                <clear-field field="argListNames"/>
		                <set field="argListNames[]" from-field="parameters.largeImageFilePath"/>
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathURLError" arg-list-name="argListNames"/>
		                <string-to-list string="${tempErrorMessage}" message-field="largeImageFilePath" list="error_list"/>
		            </else>
	                </if-compare>
	            <else>
	                <clear-field field="argListNames"/>
	                <set field="argListNames[]" value="Large"/>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathBlankError" arg-list-name="argListNames"/>
		            <string-to-list string="${tempErrorMessage}" message-field="largeImageFilePath" list="error_list"/>
	            </else>
                </if-not-empty>
            </if-not-empty>
        <else>
            <if-not-empty field="parameters.largeImageUrlRef">
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
                    <field field="parameters.largeImageUrlRef"/>
                </call-class-method>
                <if-compare operator="equals" value="false" field="isValidURL">
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	                <string-to-list string="${tempErrorMessage}" message-field="largeImageUrlRef" list="error_list"/>
                </if-compare>
            <else>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	            <string-to-list string="${tempErrorMessage}" message-field="largeImageUrlRef" list="error_list"/>
            </else>
            </if-not-empty>
        </else>
        </if-compare>
        
        <!-- Check address fields on the Postal Address -->
       
        <if-empty field="parameters.user_address1">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankAddress1Error"/>
            <string-to-list string="${tempErrorMessage}" message-field="user_address1" list="error_list"/>
        </if-empty>
        <if-empty field="parameters.user_postalCode">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankPostalCodeError"/>
            <string-to-list string="${tempErrorMessage}" message-field="user_postalCode" list="error_list"/>
        </if-empty>
        <if-empty field="parameters.user_city">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankCityError"/>
            <string-to-list string="${tempErrorMessage}" message-field="user_city" list="error_list"/>
        </if-empty>

        <!--Check for countries other than US and Canada that Two of either Address-2, Address-3, Zip/Postal, City/Town or State/Province must be entered -->
        <if>
                <condition>
                    <or>
                        <if-compare value="CAN" operator="equals" field="parameters.user_country"></if-compare>
                        <if-compare value="USA" operator="equals" field="parameters.user_country"></if-compare>
                    </or>
                </condition>
                <then>
                     <if-empty field="parameters.user_state">
                         <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankStateError"/>
                         <string-to-list string="${tempErrorMessage}" message-field="user_state" list="error_list"/>
                     </if-empty>
                    
                    <if-empty field="parameters.user_postalCode">
		            <else>
		                <if-compare value="USA" operator="equals" field="parameters.user_country">
		                    <call-class-method class-name="com.osafe.util.Util"  method-name="isZipCode" ret-field="isZipCode">
		                        <field field="parameters.user_postalCode"/>
		                    </call-class-method>
		                </if-compare>
		                <if-compare field="isZipCode" operator="equals"  value="false">
		                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidPostalCodeError"/>
		                    <string-to-list string="${tempErrorMessage}" message-field="user_country" list="error_list"/>
		                </if-compare>
		            </else>
                    </if-empty>
                </then>
                <else>
                    <set field="fieldCounter" value="0" type="Integer"/>
                    <if-not-empty field="parameters.user_address1">
                        <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                    </if-not-empty>
                    <if-compare field="parameters.user_state" operator="not-equals" value="_NA_">
                        <if-not-empty field="parameters.user_state">
                            <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                        </if-not-empty>
                    </if-compare>
                    <if-not-empty field="parameters.user_city">
                        <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                    </if-not-empty>
                    <if-not-empty field="parameters.user_postalCode">
                        <set field="fieldCounter" value="${fieldCounter+1}" type="Integer"/>
                    </if-not-empty>
                    <!-- <if-compare field="fieldCounter" operator="less"  value="2" type="Integer">
                        <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="AddressIncompleteError"/>
                        <string-to-list string="${tempErrorMessage}" list="error_list"/>
                    </if-compare> -->
                </else>
        </if>
        
        <check-errors/>
        
        <!-- Create Party -->
        <make-value value-field="newEntity" entity-name="Party"/>
        <set-nonpk-fields map="createCarrierCtx" value-field="newEntity"/>
        <set field="newEntity.partyId" from-field="parameters.partyId"/>
        <set field="newEntity.partyTypeId" from-field="partyTypeId"/>
        <set field="partyTypeId" value="PARTY_GROUP" type="String"/>
        <set field="newEntity.partyTypeId" from-field="partyTypeId"/>
        <set field="statusId" value="PARTY_ENABLED" type="String"/>
        <set field="newEntity.statusId" from-field="statusId"/>
        <create-value value-field="newEntity"/>
         
         <!-- Create Party Role -->
        <make-value value-field="anotherNewEntity" entity-name="PartyRole"/>
        <set from-field="parameters.partyId" field="anotherNewEntity.partyId" />
        <set field="roleTypeId" value="MANUFACTURER" type="String"/>
        <set from-field="roleTypeId" field="anotherNewEntity.roleTypeId"/>
        <create-value value-field="anotherNewEntity"/>
        
        <!-- Create Party Group -->
        <make-value value-field="partyGroupEntity" entity-name="PartyGroup"/>
        <set from-field="parameters.partyId" field="partyGroupEntity.partyId" />
        <set from-field="parameters.profileName" field="partyGroupEntity.groupName" />
        <create-value value-field="partyGroupEntity"/>
        
        <!-- Create Product Store Role -->
        <make-value value-field="productStoreRoleEntity" entity-name="ProductStoreRole"/>
        <set from-field="parameters.partyId" field="productStoreRoleEntity.partyId" />
        <set from-field="roleTypeId" field="productStoreRoleEntity.roleTypeId" />
        <set field="productStoreRoleEntity.productStoreId" from-field="parameters.productStoreId"/>
        <now-timestamp field="nowTimestamp"/>
        <set from-field="nowTimestamp" field="productStoreRoleEntity.fromDate"/>
        <create-value value-field="productStoreRoleEntity"/>
        
       <!-- For PROFILE_NAME Party Content -->
        <set-service-fields service-name="updatePartyContentText" map="parameters" to-map="updatePartyNameText"/>
        <set field="updatePartyNameText.text" from-field="parameters.profileName"/>
        <set field="updatePartyNameText.partyContentTypeId" value="PROFILE_NAME"/>
        <call-service service-name="updatePartyContentText" in-map-name="updatePartyNameText"/>
        
        <!-- For DESCRIPTION Party Content -->
        <set-service-fields service-name="updatePartyContentText" map="parameters" to-map="updatePartyDescriptionText"/>
        <set field="updatePartyDescriptionText.text" from-field="parameters.description"/>
        <set field="updatePartyDescriptionText.partyContentTypeId" value="DESCRIPTION"/>
        <call-service service-name="updatePartyContentText" in-map-name="updatePartyDescriptionText"/>
        
        <!-- For LONG_DESCRIPTION Party Content -->
        <set-service-fields service-name="updatePartyContentText" map="parameters" to-map="updatePartyLongDescriptionText"/>
        <set field="updatePartyLongDescriptionText.text" from-field="parameters.longDescription"/>
        <set field="updatePartyLongDescriptionText.partyContentTypeId" value="LONG_DESCRIPTION"/>
        <call-service service-name="updatePartyContentText" in-map-name="updatePartyLongDescriptionText"/>
        
        <!-- Update Party Profile Image -->        
        <set field="addPartyImageAndContentMap.partyId" from-field="parameters.partyId"/>
	    <set field="addPartyImageAndContentMap.partyContentTypeId" value="PROFILE_IMAGE_URL"/>
	    <set field="addPartyImageAndContentMap.imageResourceType" from-field="parameters.largeImageResourceType"/>
        <if-compare operator="equals" value="file" field="parameters.largeImageResourceType">
	        <if-not-empty field="parameters._largeImage_fileName">
	            <set field="addPartyImageAndContentMap.uploadedFile" from-field="parameters.largeImage"/>
	            <set field="addPartyImageAndContentMap.imageFilePath" from-field="parameters.largeImageFilePath"/>
	            <set field="addPartyImageAndContentMap._uploadedFile_fileName" from-field="parameters._largeImage_fileName"/>
	            <set field="addPartyImageAndContentMap._uploadedFile_contentType" from-field="parameters._largeImage_contentType"/>
	            <call-service service-name="addPartyImageAndContent" in-map-name="addPartyImageAndContentMap"/>
	        </if-not-empty>
	    <else>
	        <set field="addPartyImageAndContentMap.imageUrlRef" from-field="parameters.largeImageUrlRef"/>
	        <call-service service-name="addPartyImageAndContent" in-map-name="addPartyImageAndContentMap"/>
	    </else>
        </if-compare>
        <clear-field field="addPartyImageAndContentMap"/>
        
        
        <!--Set the Value for City and Postal Code if they are empty as they are required fields by the service -->
        <if>
                <condition>
                    <or>
                        <if-compare value="CAN" operator="equals" field="parameters.user_country"></if-compare>
                        <if-compare value="USA" operator="equals" field="parameters.user_country"></if-compare>
                    </or>
                </condition>
                <then></then>
                <else>
                    <if-empty field="parameters.user_city">
                        <set field="parameters.user_city" value="_NA_"/>
                    </if-empty>
                    <if-empty field="parameters.user_postalCode">
                        <set field="parameters.user_postalCode" value="_NA_"/>
                    </if-empty>
                </else>
        </if>
        
        <set-service-fields service-name="createUpdatePartyPostalAddress" to-map="createUpdatePartyPostalAddressctx" map="parameters"/>
        <set field="createUpdatePartyPostalAddressctx.countryGeoId" from-field="parameters.user_country"/>
        <set field="createUpdatePartyPostalAddressctx.attnName" from-field="parameters.user_attnName"/>
        <set field="createUpdatePartyPostalAddressctx.address1" from-field="parameters.user_address1"/>
        <set field="createUpdatePartyPostalAddressctx.address2" from-field="parameters.user_address2"/>
        <set field="createUpdatePartyPostalAddressctx.city" from-field="parameters.user_city"/>
        <set field="createUpdatePartyPostalAddressctx.stateProvinceGeoId" from-field="parameters.user_state"/>
        <set field="createUpdatePartyPostalAddressctx.postalCode" from-field="parameters.user_postalCode"/>
        <call-service service-name="createUpdatePartyPostalAddress" in-map-name="createUpdatePartyPostalAddressctx">
                <result-to-field result-name="contactMechId" field="addressPurposeContext.contactMechId"/>
        </call-service> 
        <if-empty field="parameters.contactMechId">
	        <!-- create the shipping location -->
	        <set field="addressPurposeContext.contactMechPurposeTypeId" value="GENERAL_LOCATION"/>
	        <set field="addressPurposeContext.partyId" from-field="parameters.partyId" />
	        <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>
        </if-empty>
        
        <set field="editManufacturer" from-field="parameters.partyId"/>
        <property-to-field resource="OSafeAdminUiLabels" property="ManufacturerSaveSuccess" field="manufacturerSaveSuccessMessage"/>
        <string-to-list string="${manufacturerSaveSuccessMessage}" list="successMessageList"/>
        
    </simple-method>
        
    <simple-method method-name="updateManufacturer" short-description="update Manufacturer">
        <if-empty field="parameters.manufacturerPartyId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankProductStoreShipMethIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="productStoreShipMethId" list="error_list"/>
            <else>
            	<set field="parameters.partyId" from-field="parameters.manufacturerPartyId"/>
                <set field="maxLength" value="20" type="Integer"/>
                <set field="spaceReplacement" value=" " type="String"/>
                <set field="makeUpCase" value="true" type="Boolean"/>
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="makeValidId" ret-field="partyId">
                    <field field="parameters.partyId" type="String"/>
                    <field field="maxLength" type="Integer"/>
                    <field field="spaceReplacement" type="String"/>
                    <field field="makeUpCase" type="boolean"/>
                </call-class-method>
                <if-empty field="partyId">
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ManufacturerPartyIdLengthError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="manufacturerPartyId"  list="error_list"/>
                <else>
                    <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidId" ret-field="isValidId">
		                <field field="parameters.partyId"/>
		            </call-class-method>
		            <if-compare field="isValidId" operator="equals" value="false">
		            	<set field="errorKey" from-field="parameters.partyId"/>
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidIdError"/>
		                <string-to-list string="${tempErrorMessage}" message-field="manufacturerPartyId"  list="error_list"/>
		            </if-compare>
		            <set field="parameters.partyId" from-field="partyId"/>
                </else>
                </if-empty>
            </else>
        </if-empty>
        
        <if-empty field="parameters.profileName">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidProfileNameError"/>
            <string-to-list string="${tempErrorMessage}" message-field="profileName" list="error_list"/>
        </if-empty>
        <if-empty field="parameters.description">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidDescriptionError"/>
            <string-to-list string="${tempErrorMessage}" message-field="description" list="error_list"/>
        </if-empty>
        
        <!-- Validate Profile image section -->
        <property-to-field resource="OsafeProperties" property="osafeThemeServer" field="osafeThemeServerPath"/>
        <if-compare operator="equals" value="file" field="parameters.largeImageResourceType">
            <if-not-empty field="parameters._largeImage_fileName">
                <set field="largeImageTargetPath" value="${osafeThemeServerPath}${parameters.largeImageFilePath}"/>
                <create-object class-name="java.io.File" field="largeImageTargetPathFile">
                    <field field="largeImageTargetPath" type="String"/>
                </create-object>
                <if-not-empty field="parameters.largeImageFilePath">
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
	                    <field field="parameters.largeImageFilePath"/>
	                </call-class-method>
	                <if-compare operator="equals" value="false" field="isValidURL">
	                    <call-object-method method-name="exists" obj-field="largeImageTargetPathFile" ret-field="islargeImageTargetPathFile"/>
		                <if-compare operator="equals" value="false" field="islargeImageTargetPathFile" type="Boolean">
		                    <clear-field field="argListNames"/>
		                    <set field="argListNames[]" from-field="parameters.largeImageFilePath"/>
		                    <set field="argListNames[]" value="Large"/>
		                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathNotExistError" arg-list-name="argListNames"/>
		                    <string-to-list string="${tempErrorMessage}" message-field="largeImageFilePath" list="error_list"/>
		                </if-compare>
		            <else>
		                <clear-field field="argListNames"/>
		                <set field="argListNames[]" from-field="parameters.largeImageFilePath"/>
		                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathURLError" arg-list-name="argListNames"/>
		                <string-to-list string="${tempErrorMessage}" message-field="largeImageFilePath" list="error_list"/>
		            </else>
	                </if-compare>
	            <else>
	                <clear-field field="argListNames"/>
	                <set field="argListNames[]" value="Large"/>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ImagePathBlankError" arg-list-name="argListNames"/>
		            <string-to-list string="${tempErrorMessage}" message-field="largeImageFilePath" list="error_list"/>
	            </else>
                </if-not-empty>
            </if-not-empty>
        <else>
            <if-not-empty field="parameters.largeImageUrlRef">
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidURL" ret-field="isValidURL">
                    <field field="parameters.largeImageUrlRef"/>
                </call-class-method>
                <if-compare operator="equals" value="false" field="isValidURL">
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	                <string-to-list string="${tempErrorMessage}" message-field="largeImageUrlRef" list="error_list"/>
                </if-compare>
            <else>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidURLRefError" />
	            <string-to-list string="${tempErrorMessage}" message-field="largeImageUrlRef" list="error_list"/>
            </else>
            </if-not-empty>
        </else>
        </if-compare>
        
        
        <!-- Check address fields on the Postal Address -->
        
        
        <if-empty field="parameters.user_address1">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankAddress1Error"/>
            <string-to-list string="${tempErrorMessage}" message-field="user_address1" list="error_list"/>
        </if-empty>
        
        <if-empty field="parameters.user_city">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankCityError"/>
            <string-to-list string="${tempErrorMessage}" message-field="user_city" list="error_list"/>
        </if-empty>
        
        <!-- if a country has States than state is mandatory. -->
         <call-class-method class-name="org.ofbiz.common.CommonWorkers"  method-name="getAssociatedStateList" ret-field="statesList">
             <field field="delegator" type="org.ofbiz.entity.Delegator"/>
             <field field="parameters.user_country"/>
         </call-class-method>
         <if-not-empty field="statesList">
          <if-empty field="parameters.user_state">
              <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankStateError"/>
              <string-to-list string="${tempErrorMessage}" message-field="user_state" list="error_list"/>
          </if-empty>
         </if-not-empty>
        
        <if-empty field="parameters.user_postalCode">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankPostalCodeError"/>
            <string-to-list string="${tempErrorMessage}" message-field="user_postalCode" list="error_list"/>
        </if-empty>
        
        <if-not-empty field="parameters.user_postalCode">
            <if-compare value="USA" operator="equals" field="parameters.user_country">
                <call-class-method class-name="com.osafe.util.Util"  method-name="isZipCode" ret-field="isZipCode">
                    <field field="parameters.user_postalCode"/>
                </call-class-method>
            </if-compare>
            <if-compare field="isZipCode" operator="equals"  value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidPostalCodeError"/>
                <string-to-list string="${tempErrorMessage}" message-field="user_postalCode" list="error_list"/>
            </if-compare>
        </if-not-empty>
        
        <check-errors/>
        
        <!-- update record in entity: PartyCroup -->     
        <make-value entity-name="PartyGroup" value-field="lookupPKMap"/>
        <set field="parameters.groupName" from-field="parameters.profileName" type="String"/>
        <set-pk-fields map="parameters" value-field="lookupPKMap"/>
        <find-by-primary-key map="lookupPKMap" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <store-value value-field="lookedUpValue"/>
        
        <!-- For PROFILE_NAME Party Content -->
        <set-service-fields service-name="updatePartyContentText" map="parameters" to-map="updatePartyNameText"/>
        <set field="updatePartyNameText.text" from-field="parameters.profileName"/>
        <set field="updatePartyNameText.partyContentTypeId" value="PROFILE_NAME"/>
        <call-service service-name="updatePartyContentText" in-map-name="updatePartyNameText"/>
        
        <!-- For DESCRIPTION Party Content -->
        <set-service-fields service-name="updatePartyContentText" map="parameters" to-map="updatePartyDescriptionText"/>
        <set field="updatePartyDescriptionText.text" from-field="parameters.description"/>
        <set field="updatePartyDescriptionText.partyContentTypeId" value="DESCRIPTION"/>
        <call-service service-name="updatePartyContentText" in-map-name="updatePartyDescriptionText"/>
        
        <!-- For LONG_DESCRIPTION Party Content -->
        <set-service-fields service-name="updatePartyContentText" map="parameters" to-map="updatePartyLongDescriptionText"/>
        <set field="updatePartyLongDescriptionText.text" from-field="parameters.longDescription"/>
        <set field="updatePartyLongDescriptionText.partyContentTypeId" value="LONG_DESCRIPTION"/>
        <call-service service-name="updatePartyContentText" in-map-name="updatePartyLongDescriptionText"/>
        
        <!-- Update Party Profile Image -->        
        <set field="addPartyImageAndContentMap.partyId" from-field="parameters.partyId"/>
	    <set field="addPartyImageAndContentMap.partyContentTypeId" value="PROFILE_IMAGE_URL"/>
	    <set field="addPartyImageAndContentMap.imageResourceType" from-field="parameters.largeImageResourceType"/>
        <if-compare operator="equals" value="file" field="parameters.largeImageResourceType">
	        <if-not-empty field="parameters._largeImage_fileName">
	            <set field="addPartyImageAndContentMap.uploadedFile" from-field="parameters.largeImage"/>
	            <set field="addPartyImageAndContentMap.imageFilePath" from-field="parameters.largeImageFilePath"/>
	            <set field="addPartyImageAndContentMap._uploadedFile_fileName" from-field="parameters._largeImage_fileName"/>
	            <set field="addPartyImageAndContentMap._uploadedFile_contentType" from-field="parameters._largeImage_contentType"/>
	            <call-service service-name="addPartyImageAndContent" in-map-name="addPartyImageAndContentMap"/>
	        </if-not-empty>
	    <else>
	        <set field="addPartyImageAndContentMap.imageUrlRef" from-field="parameters.largeImageUrlRef"/>
	        <call-service service-name="addPartyImageAndContent" in-map-name="addPartyImageAndContentMap"/>
	    </else>
        </if-compare>
        <clear-field field="addPartyImageAndContentMap"/>
        
        <!--Set the Value for City and Postal Code if they are empty as they are required fields by the service -->
        <if>
                <condition>
                    <or>
                        <if-compare value="CAN" operator="equals" field="parameters.user_country"></if-compare>
                        <if-compare value="USA" operator="equals" field="parameters.user_country"></if-compare>
                    </or>
                </condition>
                <then></then>
                <else>
                    <if-empty field="parameters.user_city">
                        <set field="parameters.user_city" value="_NA_"/>
                    </if-empty>
                    <if-empty field="parameters.user_postalCode">
                        <set field="parameters.user_postalCode" value="_NA_"/>
                    </if-empty>
                </else>
        </if>
        
        <set-service-fields service-name="createUpdatePartyPostalAddress" to-map="createUpdatePartyPostalAddressctx" map="parameters"/>
        <set field="createUpdatePartyPostalAddressctx.countryGeoId" from-field="parameters.user_country"/>
        <set field="createUpdatePartyPostalAddressctx.attnName" from-field="parameters.user_attnName"/>
        <set field="createUpdatePartyPostalAddressctx.address1" from-field="parameters.user_address1"/>
        <set field="createUpdatePartyPostalAddressctx.address2" from-field="parameters.user_address2"/>
        <set field="createUpdatePartyPostalAddressctx.city" from-field="parameters.user_city"/>
        <set field="createUpdatePartyPostalAddressctx.stateProvinceGeoId" from-field="parameters.user_state"/>
        <set field="createUpdatePartyPostalAddressctx.postalCode" from-field="parameters.user_postalCode"/>
        <call-service service-name="createUpdatePartyPostalAddress" in-map-name="createUpdatePartyPostalAddressctx">
                <result-to-field result-name="contactMechId" field="addressPurposeContext.contactMechId"/>
        </call-service> 
        <if-empty field="parameters.contactMechId">
	        <!-- create the shipping location -->
	        <set field="addressPurposeContext.contactMechPurposeTypeId" value="GENERAL_LOCATION"/>
	        <set field="addressPurposeContext.partyId" from-field="parameters.partyId" />
	        <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>
        </if-empty>
        
        <set field="editManufacturer" from-field="parameters.partyId"/>
        <property-to-field resource="OSafeAdminUiLabels" property="ManufacturerSaveSuccess" field="manufacturerSaveSuccessMessage"/>
        <string-to-list string="${manufacturerSaveSuccessMessage}" list="successMessageList"/>
        
    </simple-method>
    
    <simple-method method-name="updatePartyContentText" short-description="Update Party Content Text">
        <entity-and entity-name="PartyContent" list="partyContentList">
            <field-map field-name="partyId" from-field="parameters.partyId"/>
            <field-map field-name="partyContentTypeId" from-field="parameters.partyContentTypeId"/>
        </entity-and>
        <filter-list-by-date list="partyContentList" to-list="partyContents"/>
        <if-not-empty field="partyContents">
            <first-from-list list="partyContents" entry="partyContent"/>
            <entity-one entity-name="Content" value-field="content">
                <field-map field-name="contentId" from-field="partyContent.contentId"/>
            </entity-one>
        </if-not-empty>
        <if-not-empty field="content">
            <get-related-one value-field="content" relation-name="DataResource" to-value-field="textDr"/>
            <if-not-empty field="textDr">
                <get-related-one value-field="textDr" relation-name="ElectronicText" to-value-field="text"/>
                <if-not-empty field="text">
                    <set-service-fields service-name="updateSimpleTextContent" map="text" to-map="updateSimpleText"/>
                    <set field="updateSimpleText.text" from-field="parameters.text"/>
                    <set field="updateSimpleText.textDataResourceId" from-field="text.dataResourceId"/>
                    <if-not-empty field="parameters.text">
                        <!-- Update product content electronic text -->
                        <call-service service-name="updateSimpleTextContent" in-map-name="updateSimpleText"/>
                    <else>
                        <!-- Remove Party content if content is exists and the text is left blank -->
                        <set-service-fields service-name="deletePartyContentAndText" map="partyContent" to-map="deletePartyContentCtx"/>
                        <call-service service-name="deletePartyContentAndText" in-map-name="deletePartyContentCtx"/>
                    </else>
                    </if-not-empty>
                </if-not-empty>
            </if-not-empty>
        <else>
            <if-not-empty field="parameters.text">
                <!-- Create Party Content if it is not exist -->
                <set-service-fields service-name="createSimpleTextContent" map="parameters" to-map="createSimpleTextMap"/>
                <set field="createSimpleTextMap.text" from-field="parameters.text"/>
                <call-service service-name="createSimpleTextContent" in-map-name="createSimpleTextMap">
                    <result-to-field result-name="contentId" field="createPartyContentMap.contentId"/>
                </call-service>
                <set-service-fields service-name="createPartyContent" map="parameters" to-map="createPartyContentMap"/>
                <set field="createPartyContentMap.partyContentTypeId" from-field="parameters.partyContentTypeId"/>
                <set field="createPartyContentMap.partyId" from-field="parameters.partyId"/>
                <call-service service-name="createPartyContent" in-map-name="createPartyContentMap"/>
            </if-not-empty>
        </else>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="deleteManufacturerImageAndContent" short-description="Method to Delete Manufacturer Image And Content">
    	<set field="parameters.partyContentTypeId" value="PROFILE_IMAGE_URL"/>
    	<if-not-empty field="parameters.manufacturerPartyId">
            <set field="parameters.partyId" from-field="parameters.manufacturerPartyId"/>
        </if-not-empty>
        <entity-and entity-name="PartyContent" list="partyContentList" filter-by-date="true">
            <field-map field-name="partyId" from-field="parameters.partyId"/>
            <field-map field-name="partyContentTypeId" from-field="parameters.partyContentTypeId"/>
        </entity-and>
        <if-not-empty field="partyContentList">
            <first-from-list entry="partyContent" list="partyContentList"/>
        </if-not-empty>
        <if-not-empty field="partyContent">
            <set-service-fields service-name="removePartyContent" map="partyContent" to-map="removePartyContentCtx"/>
            <set field="removePartyContentCtx.partyId" from-field="partyContent.partyId"/>
            <set field="removePartyContentCtx.partyContentTypeId" from-field="parameters.partyContentTypeId"/>
            <set field="removePartyContentCtx.contentId" from-field="partyContent.contentId"/>
            <set field="removePartyContentCtx.fromDate" from-field="partyContent.fromDate"/>
            <call-service service-name="removePartyContent" in-map-name="removePartyContentCtx">
            </call-service>
            
            <set-service-fields service-name="removeContentAndRelated" map="partyContent" to-map="removeContentAndRelatedMap"/>
        	<call-service service-name="removeContentAndRelated" in-map-name="removeContentAndRelatedMap"/>
        
            <field-to-result field="parameters.manufacturerPartyId" result-name="manufacturerPartyId"/>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="deletePartyContent" short-description="Delete PartyContent And Text">
        <!-- Remove Party content if content is exists and the text is left blank -->
        <set-service-fields service-name="removePartyContent" map="parameters" to-map="removePartyContentMap"/>
        <call-service service-name="removePartyContent" in-map-name="removePartyContentMap"/>
        
        <set-service-fields service-name="removeContentAndRelated" map="parameters" to-map="removeContentAndRelatedMap"/>
        <call-service service-name="removeContentAndRelated" in-map-name="removeContentAndRelatedMap"/>
    </simple-method>

    <simple-method method-name="createPriceRule" short-description="Create the Price Rule">

        <call-simple-method method-name="validatePriceRule"/>
        <check-errors/>

        <!-- update product price rule -->
        <set-service-fields service-name="createProductPriceRule" to-map="createProductPriceRuleCtx" map="parameters"/>
        <call-service service-name="createProductPriceRule" in-map-name="createProductPriceRuleCtx">
            <result-to-field result-name="productPriceRuleId" field="parameters.productPriceRuleId"/>
        </call-service>

        <!-- create product price action -->
        <set-service-fields service-name="createProductPriceAction" map="parameters" to-map="createProductPriceActionCtx"/>
        <call-service service-name="createProductPriceAction" in-map-name="createProductPriceActionCtx"/>

        <!-- create product price cond base on parameters -->
        <iterate-map key="inputParamEnumKey" value="inputParamEnumValue" map="parameters.inputParamEnumIds">
            <clear-field field="createProductPriceCondCtx"/>
            <set field="createProductPriceCondCtx.productPriceRuleId" from-field="parameters.productPriceRuleId"/>
            <set field="createProductPriceCondCtx.inputParamEnumId" from-field="inputParamEnumValue"/>
            <clear-field field="operatorEnumKey"/>
            <clear-field field="operatorEnumValue"/>
            <iterate-map key="operatorEnumKey" value="operatorEnumValue" map="parameters.operatorEnumIds">
                <if-compare-field field="operatorEnumKey" operator="equals" to-field="inputParamEnumKey">
                    <set field="createProductPriceCondCtx.operatorEnumId" from-field="operatorEnumValue"/>
                </if-compare-field>
            </iterate-map>
            <clear-field field="condValueKey"/>
            <clear-field field="condValue"/>
            <iterate-map key="condValueKey" value="condValue" map="parameters.condValues">
                <if-compare-field field="condValueKey" operator="equals" to-field="inputParamEnumKey">
                    <set field="createProductPriceCondCtx.condValue" from-field="condValue"/>
                </if-compare-field>
            </iterate-map>
            <call-service service-name="createProductPriceCond" in-map-name="createProductPriceCondCtx"/>
        </iterate-map>

        <set field="argListNames[]" from-field="parameters.ruleName"/>
        <property-to-field resource="OSafeAdminUiLabels" property="PriceRuleSavedSuccess" field="priceRuleSavedSuccess" arg-list-name="argListNames"/>
        <string-to-list string="${priceRuleSavedSuccess}" list="successMessageList"/>
    </simple-method>

    <simple-method method-name="updatePriceRule" short-description="update the Price Rule">

        <call-simple-method method-name="validatePriceRule"/>
        <check-errors/>

        <!-- update product price rule -->
        <set-service-fields service-name="updateProductPriceRule" to-map="updateProductPriceRuleCtx" map="parameters"/>
        <call-service service-name="updateProductPriceRule" in-map-name="updateProductPriceRuleCtx"/>

        <!-- create/update product price action base on seq id -->
        <if-empty field="parameters.productPriceActionSeqId">
            <set-service-fields service-name="createProductPriceAction" map="parameters" to-map="createProductPriceActionCtx"/>
            <call-service service-name="createProductPriceAction" in-map-name="createProductPriceActionCtx"/>
        <else>
            <set-service-fields service-name="updateProductPriceAction" map="parameters" to-map="updateProductPriceActionCtx"/>
            <call-service service-name="updateProductPriceAction" in-map-name="updateProductPriceActionCtx"/>
        </else>
        </if-empty>

        <!-- Fisrt delete all product price cond and then create new base on parameters -->
        <entity-and entity-name="ProductPriceCond" list="productPriceCondList">
            <field-map field-name="productPriceRuleId" from-field="parameters.productPriceRuleId"/>
        </entity-and>
        <iterate entry="productPriceCond" list="productPriceCondList">
            <set-service-fields service-name="deleteProductPriceCond" map="productPriceCond" to-map="deleteProductPriceCondCtx"/>
            <call-service service-name="deleteProductPriceCond" in-map-name="deleteProductPriceCondCtx"/>
        </iterate>

        <iterate-map key="inputParamEnumKey" value="inputParamEnumValue" map="parameters.inputParamEnumIds">
            <set field="createProductPriceCondCtx.productPriceRuleId" from-field="parameters.productPriceRuleId"/>
            <set field="createProductPriceCondCtx.inputParamEnumId" from-field="inputParamEnumValue"/>
            <clear-field field="operatorEnumKey"/>
            <clear-field field="operatorEnumValue"/>
            <iterate-map key="operatorEnumKey" value="operatorEnumValue" map="parameters.operatorEnumIds">
                <if-compare-field field="operatorEnumKey" operator="equals" to-field="inputParamEnumKey">
                    <set field="createProductPriceCondCtx.operatorEnumId" from-field="operatorEnumValue"/>
                </if-compare-field>
            </iterate-map>
            <clear-field field="condValueKey"/>
            <clear-field field="condValue"/>
            <iterate-map key="condValueKey" value="condValue" map="parameters.condValues">
                <if-compare-field field="condValueKey" operator="equals" to-field="inputParamEnumKey">
                    <set field="createProductPriceCondCtx.condValue" from-field="condValue"/>
                </if-compare-field>
            </iterate-map>
            <call-service service-name="createProductPriceCond" in-map-name="createProductPriceCondCtx"/>
        </iterate-map>

        <set field="argListNames[]" from-field="parameters.ruleName"/>
        <property-to-field resource="OSafeAdminUiLabels" property="PriceRuleSavedSuccess" field="priceRuleSavedSuccess" arg-list-name="argListNames"/>
        <string-to-list string="${priceRuleSavedSuccess}" list="successMessageList"/>
    </simple-method>

    <simple-method method-name="validatePriceRule" short-description="validate the Price Rule">

        <if-empty field="parameters.productPriceRuleId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankProductPriceRuleIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="productPriceRuleId" list="error_list"/>
        </if-empty>
        <if-empty field="parameters.ruleName">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankPriceRuleNameError"/>
            <string-to-list string="${tempErrorMessage}" message-field="ruleName" list="error_list"/>
        </if-empty>
        <if-empty field="parameters.description">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankPriceRuleDescriptionError"/>
            <string-to-list string="${tempErrorMessage}" message-field="description" list="error_list"/>
        </if-empty>
        <if-not-empty field="parameters.fromDate">
            <call-class-method class-name="com.osafe.util.Util"  method-name="isDateTime" ret-field="checkDateValidResult">
                <field field="parameters.fromDate"/>
                <field field="parameters.entryDateTimeFormat"/>
            </call-class-method>
            <if-compare field="checkDateValidResult" operator="equals" value="false" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidActiveFromDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="fromDate" list="error_list"/>
                <else>
                    <call-class-method class-name="com.osafe.util.Util"  method-name="toTimestamp" ret-field="parameters.fromDate">
                        <field field="parameters.fromDate"/>
                        <field field="parameters.entryDateTimeFormat"/>
                    </call-class-method>
                </else>
            </if-compare>
        </if-not-empty>
        <if-not-empty field="parameters.thruDate">
            <call-class-method class-name="com.osafe.util.Util"  method-name="isDateTime" ret-field="checkDateValidResult">
                <field field="parameters.thruDate"/>
                <field field="parameters.entryDateTimeFormat"/>
            </call-class-method>
            <if-compare field="checkDateValidResult" operator="equals" value="false" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidActiveThruDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="thruDate" list="error_list"/>
                <else>
                    <call-class-method class-name="com.osafe.util.Util"  method-name="toTimestamp" ret-field="parameters.thruDate">
                        <field field="parameters.thruDate"/>
                        <field field="parameters.entryDateTimeFormat"/>
                    </call-class-method>
                </else>
            </if-compare>
        </if-not-empty>
        <if-empty field="parameters.amount">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankPriceRuleActionValueError"/>
            <string-to-list string="${tempErrorMessage}" message-field="amount"  list="error_list"/>
            <else>
                <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isSignedFloat" ret-field="isSignedFloat">
                    <field field="parameters.amount"/>
                </call-class-method>
                <if-compare field="isSignedFloat" operator="equals" value="false">
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidPriceRuleActionValueError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="amount" list="error_list"/>
                </if-compare>
            </else>
        </if-empty>

        <if-empty field="parameters.condValues">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankPriceRuleConditionError"/>
            <string-to-list string="${tempErrorMessage}" message-field="condValue"  list="error_list"/>
        </if-empty>

        <iterate-map key="condValueKey" value="condValue" map="parameters.condValues">
            <if-empty field="condValue">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankPriceRuleConditionValueError"/>
                <string-to-list string="${tempErrorMessage}" message-field="condValue"  list="error_list"/>
            </if-empty>
        </iterate-map>

    </simple-method>
    
    <simple-method method-name="createUpdateProductAttributes" short-description="update product attributes">
    	<if-not-empty field="parameters.productId">
    		<set field="productId" from-field="parameters.productId"/>
		    <set field="productAttributMap" from-field="parameters.productAttrValue"/>
    		<iterate-map key="attrName" value="attrValue" map="parameters.productAttrValue">
       			<!-- Do Specific validations here for specific Product Attributes -->
        		<call-simple-method method-name="validateProductAttributes" xml-resource="component://osafeadmin/script/com/osafeadmin/events/OsafeAdminValidationEvents.xml"/>
	        </iterate-map>
	        <check-errors/>
	        
	        <!-- Iterate product attributes again and store the new values if they have passed validation -->
	        <iterate-map key="attrName" value="attrValue" map="parameters.productAttrValue">
       			<!-- Store new values -->
       			<set field="manageProductAttributeCtx.productId" from-field="productId"/>
		        <set field="manageProductAttributeCtx.attrName" from-field="attrName"/>
		        <set field="manageProductAttributeCtx.attrValue" from-field="attrValue"/>
		        <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
		        <clear-field field="manageProductAttributeCtx"/>       			
	        </iterate-map>
    	</if-not-empty>
    
    </simple-method>
    
    <simple-method method-name="updateProductVariantList" short-description="update variant Prices and Inventory on Variant List">
    	<if-not-empty field="parameters.productId">
	        
	        <if-not-empty field="parameters.variantListPrice">
	        	<iterate-map key="listPriceProductId" value="listPriceValue" map="parameters.variantListPrice">
	        		<if-not-empty field="listPriceValue">
		                <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="checkFloatResult">
		                    <field field="listPriceValue"/>
		                </call-class-method>
		                <if-compare field="checkFloatResult" operator="equals" value="false" type="Boolean">
		                	<clear-field field="argListNames"/>
	                    	<set field="argListNames[]" from-field="listPriceProductId"/>
		                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductVariantGroupListPriceError" arg-list-name="argListNames"/>
		                    <string-to-list string="${tempErrorMessage}" message-field="listPrice" list="error_list"/>
		                </if-compare>
			        </if-not-empty>
	        	</iterate-map>
	        </if-not-empty>
	        
	        <if-not-empty field="parameters.variantDefaultPrice">
	        	<iterate-map key="defaultPriceProductId" value="defaultPriceValue" map="parameters.variantDefaultPrice">
	        		<if-not-empty field="defaultPriceValue">
		                <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="checkFloatResult">
		                    <field field="defaultPriceValue"/>
		                </call-class-method>
		                <if-compare field="checkFloatResult" operator="equals" value="false" type="Boolean">
		                	<clear-field field="argListNames"/>
	                    	<set field="argListNames[]" from-field="defaultPriceProductId"/>
		                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductVariantGroupDefaultPriceError" arg-list-name="argListNames"/>
		                    <string-to-list string="${tempErrorMessage}" message-field="defaultPrice" list="error_list"/>
		                </if-compare>
			        </if-not-empty>
	        	</iterate-map>
	        </if-not-empty>
	        
	        <if-not-empty field="parameters.bfTotalInventory">
	        	<iterate-map key="bfTotalInventoryProductId" value="bfTotalInventoryValue" map="parameters.bfTotalInventory">
	        		<if-not-empty field="bfTotalInventoryValue"> 
			            <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isSignedInteger" ret-field="bfTotalInventoryVaild">
			               <string value="${bfTotalInventoryValue}"></string>
			            </call-class-method>
			            <if-compare operator="equals" value="false" field="bfTotalInventoryVaild" type="Boolean">
			            	<clear-field field="argListNames"/>
	                    	<set field="argListNames[]" from-field="bfTotalInventoryProductId"/>
			                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidBFTotalInventoryGroupError" arg-list-name="argListNames"/>
			                <string-to-list string="${tempErrorMessage}" message-field="bfTotalInventory" list="error_list"/>
			            <else>
			                <if>
			                    <condition>
			                    <and>
			                        <if-compare operator="greater-equals" value="-9999" field="bfTotalInventoryValue" type="Long"/>
			                        <if-compare operator="less-equals" value="99999" field="bfTotalInventoryValue" type="Long"/>
			                    </and>
			                    </condition>
			                <then>
			                </then>
			                <else>
			                	<clear-field field="argListNames"/>
	                    		<set field="argListNames[]" from-field="bfTotalInventoryProductId"/>
			                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidBFTotalInventoryGroupError" arg-list-name="argListNames"/>
			                    <string-to-list string="${tempErrorMessage}" message-field="bfTotalInventory" list="error_list"/>
			                </else>
			                </if>
			            </else>
			            </if-compare>
			        </if-not-empty>
	        	</iterate-map>
	        </if-not-empty>
	        
	        <if-not-empty field="parameters.bfWHInventory">
	        	<iterate-map key="bfWHInventoryProductId" value="bfWHInventoryValue" map="parameters.bfWHInventory">
	        		<if-not-empty field="bfWHInventoryValue"> 
			            <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isSignedInteger" ret-field="bfWHInventoryVaild">
			               <string value="${bfWHInventoryValue}"></string>
			            </call-class-method>
			            <if-compare operator="equals" value="false" field="bfWHInventoryVaild" type="Boolean">
			            	<clear-field field="argListNames"/>
	                    	<set field="argListNames[]" from-field="bfWHInventoryProductId"/>
			                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidBFWHInventoryGroupError" arg-list-name="argListNames"/>
			                <string-to-list string="${tempErrorMessage}" message-field="bfWHInventory" list="error_list"/>
			            <else>
			                <if>
			                    <condition>
			                    <and>
			                        <if-compare operator="greater-equals" value="-9999" field="bfWHInventoryValue" type="Long"/>
			                        <if-compare operator="less-equals" value="99999" field="bfWHInventoryValue" type="Long"/>
			                    </and>
			                    </condition>
			                <then>
			                </then>
			                <else>
			                	<clear-field field="argListNames"/>
	                    		<set field="argListNames[]" from-field="bfWHInventoryProductId"/>
			                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidBFWHInventoryGroupError" arg-list-name="argListNames"/>
			                    <string-to-list string="${tempErrorMessage}" message-field="bfWHInventory" list="error_list"/>
			                </else>
			                </if>
			            </else>
			            </if-compare>
			        </if-not-empty>
	        	</iterate-map>
	        </if-not-empty>
	        
	        <check-errors/>
	        
	        
	        <!-- Process Variant LIST PRICE -->
	        <if-not-empty field="parameters.variantListPrice">
	        	<!-- get the virtual list price -->
	        	<set field="virtualListPriceVal" value="" type="BigDecimal"/>
		        <entity-and entity-name="ProductPrice" list="virtualProductListPriceList" filter-by-date="true">
	                <field-map field-name="productId" from-field="parameters.productId"/>
	                <field-map field-name="productPriceTypeId" value="LIST_PRICE"/>
	                <field-map field-name="productPricePurposeId" value="PURCHASE"/>
		            <field-map field-name="currencyUomId" from-field="parameters.currencyUomId"/>
		            <field-map field-name="productStoreGroupId" value="_NA_"/>
	                <order-by field-name="-fromDate"/>
	            </entity-and>
	            <if-not-empty field="virtualProductListPriceList">
	            	<first-from-list entry="virtualProductListPrice" list="virtualProductListPriceList"/>
	           		<set field="virtualListPriceVal" from-field="virtualProductListPrice.price" type="BigDecimal"/>
	            </if-not-empty>
	            
	            <!-- iterate through variant list price inputs -->
	        	<iterate-map key="listPriceProductId" value="listPriceValue" map="parameters.variantListPrice">
	        		<set field="newListPrice" from-field="listPriceValue" type="BigDecimal"/>
	        		<!-- if we are changing the value of the LIST PRICE on the variant and it is different thant he Virtual List Price then save that price -->
	        		<if-compare-field operator="equals" field="virtualListPriceVal" to-field="listPriceValue" type="BigDecimal">
		            	<!-- if the variant price in the input is equal to the virtual price then we will need to determine if a price was previously saved to the variant or if it was pulling this price from the virtual -->
		            	<entity-and entity-name="ProductPrice" list="variantProductListPriceList" filter-by-date="true">
			                <field-map field-name="productId" from-field="listPriceProductId"/>
			                <field-map field-name="productPriceTypeId" value="LIST_PRICE"/>
			                <field-map field-name="productPricePurposeId" value="PURCHASE"/>
				            <field-map field-name="currencyUomId" from-field="parameters.currencyUomId"/>
				            <field-map field-name="productStoreGroupId" value="_NA_"/>
			                <order-by field-name="-fromDate"/>
			            </entity-and>
			            <!-- If the Variant has an existing Product Price, then update this price -->
			            <if-empty field="variantProductListPriceList">
			            	<!-- If the Variant does not have an existing Product Price, then do not set a new price on variant.  keep using the virtual -->
			           		<clear-field field="newListPrice"/>
			            </if-empty>
		            </if-compare-field>
		            
		            <clear-field field="createUpdateProdPriceCtx"/>
		            <set field="createUpdateProdPriceCtx.productId" from-field="listPriceProductId"/>
		            <set field="createUpdateProdPriceCtx.newPrice" from-field="newListPrice" type="BigDecimal"/>
		            <set field="createUpdateProdPriceCtx.productPriceTypeId" value="LIST_PRICE"/>
		            <set field="createUpdateProdPriceCtx.isVariant" value="Y"/>
		            <set field="createUpdateProdPriceCtx.currencyUomId" from-field="parameters.currencyUomId"/>
		            <set field="createUpdateProdPriceCtx.productPricePurposeId" value="PURCHASE"/>
		            <set field="createUpdateProdPriceCtx.productStoreGroupId" value="_NA_"/>
		            <call-service service-name="createUpdateProdPrice" in-map-name="createUpdateProdPriceCtx"/>
		            
	        	</iterate-map>
	        </if-not-empty>
	        
	        <!-- Process Variant DEFAULT PRICE -->
	        <if-not-empty field="parameters.variantDefaultPrice">
	        	<!-- get the virtual default price -->
	        	<set field="virtualDefaultPriceVal" value="" type="BigDecimal"/>
		        <entity-and entity-name="ProductPrice" list="virtualProductDefaultPriceList" filter-by-date="true">
	                <field-map field-name="productId" from-field="parameters.productId"/>
	                <field-map field-name="productPriceTypeId" value="DEFAULT_PRICE"/>
	                <field-map field-name="productPricePurposeId" value="PURCHASE"/>
		            <field-map field-name="currencyUomId" from-field="parameters.currencyUomId"/>
		            <field-map field-name="productStoreGroupId" value="_NA_"/>
	                <order-by field-name="-fromDate"/>
	            </entity-and>
	            <if-not-empty field="virtualProductDefaultPriceList">
	            	<first-from-list entry="virtualProductDefaultPrice" list="virtualProductDefaultPriceList"/>
	           		<set field="virtualDefaultPriceVal" from-field="virtualProductDefaultPrice.price" type="BigDecimal"/>
	            </if-not-empty>
	            
	            <!-- iterate through variant default price inputs -->
	        	<iterate-map key="defaultPriceProductId" value="defaultPriceValue" map="parameters.variantDefaultPrice">
	        		<set field="newDefaultPrice" from-field="defaultPriceValue" type="BigDecimal"/>
	        		<!-- if we are changing the value of the DEFAULT PRICE on the variant and it is different thant he Virtual Default Price then save that price -->
	        		<if-compare-field operator="equals" field="virtualDefaultPriceVal" to-field="defaultPriceValue" type="BigDecimal">
		            	<!-- if the variant price in the input is equal to the virtual price then we will need to determine if a price was previously saved to the variant or if it was pulling this price from the virtual -->
		            	<entity-and entity-name="ProductPrice" list="variantProductDefaultPriceList" filter-by-date="true">
			                <field-map field-name="productId" from-field="defaultPriceProductId"/>
			                <field-map field-name="productPriceTypeId" value="DEFAULT_PRICE"/>
			                <field-map field-name="productPricePurposeId" value="PURCHASE"/>
				            <field-map field-name="currencyUomId" from-field="parameters.currencyUomId"/>
				            <field-map field-name="productStoreGroupId" value="_NA_"/>
			                <order-by field-name="-fromDate"/>
			            </entity-and>
			            <!-- If the Variant has an existing Product Price, then update this price -->
			            <if-empty field="variantProductDefaultPriceList">
			            	<!-- If the Variant does not have an existing Product Price, then do not set a new price on variant.  keep using the virtual -->
			           		<clear-field field="newDefaultPrice"/>
			            </if-empty>
		            </if-compare-field>
		            
		            <clear-field field="createUpdateProdDefaultPriceCtx"/>
		            <set field="createUpdateProdDefaultPriceCtx.productId" from-field="defaultPriceProductId"/>
		            <set field="createUpdateProdDefaultPriceCtx.newPrice" from-field="newDefaultPrice" type="BigDecimal"/>
		            <set field="createUpdateProdDefaultPriceCtx.productPriceTypeId" value="DEFAULT_PRICE"/>
		            <set field="createUpdateProdDefaultPriceCtx.isVariant" value="Y"/>
		            <set field="createUpdateProdDefaultPriceCtx.currencyUomId" from-field="parameters.currencyUomId"/>
		            <set field="createUpdateProdDefaultPriceCtx.productPricePurposeId" value="PURCHASE"/>
		            <set field="createUpdateProdDefaultPriceCtx.productStoreGroupId" value="_NA_"/>
		            <call-service service-name="createUpdateProdPrice" in-map-name="createUpdateProdDefaultPriceCtx"/>
		            
	        	</iterate-map>
	        </if-not-empty>
	        
	        <if-not-empty field="parameters.bfTotalInventory">
	        	<iterate-map key="bfTotalInventoryProductId" value="bfTotalInventoryValue" map="parameters.bfTotalInventory">
	        		<clear-field field="manageProductAttributeCtx"/>
			        <set field="manageProductAttributeCtx.productId" from-field="bfTotalInventoryProductId"/>
			        <set field="manageProductAttributeCtx.attrName" value="BF_INVENTORY_TOT"/>
			        <if-not-empty field="bfTotalInventoryValue"> 
				        <set field="manageProductAttributeCtx.attrValue" from-field="bfTotalInventoryValue"/>
				        <else>
				        	<set field="manageProductAttributeCtx.attrValue" value="0"/>
				        </else>
			        </if-not-empty>
			        <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
			        <clear-field field="manageProductAttributeCtx"/>
	        	</iterate-map>
	        </if-not-empty>
	        
	        <if-not-empty field="parameters.bfWHInventory">
	        	<iterate-map key="bfWHInventoryProductId" value="bfWHInventoryValue" map="parameters.bfWHInventory">
	        		<if-empty field="bfWHInventoryValue"> 
			            <set field="bfWHInventoryValue" value="0" type="BigDecimal"/>
			        </if-empty>
			        <clear-field field="manageProductAttributeCtx"/>
			        <set field="manageProductAttributeCtx.productId" from-field="bfWHInventoryProductId"/>
			        <set field="manageProductAttributeCtx.attrName" value="BF_INVENTORY_WHS"/>
			        <if-not-empty field="bfTotalInventoryValue"> 
				        <set field="manageProductAttributeCtx.attrValue" from-field="bfWHInventoryValue"/>
				        <else>
				        	<set field="manageProductAttributeCtx.attrValue" value="0"/>
				        </else>
			        </if-not-empty>
			        <call-service service-name="manageProductAttribute" in-map-name="manageProductAttributeCtx"/>
			        <clear-field field="manageProductAttributeCtx"/>
	        	</iterate-map>
	        </if-not-empty>
	        
	        <field-to-result field="parameters.productId" result-name="productId"/>
	        
	        <property-to-field resource="OSafeAdminUiLabels" property="ProductGenericSavedSuccess" field="productGenericSavedSuccessMessage"/>
	        <string-to-list string="${productGenericSavedSuccessMessage}" list="successMessageList"/>
	       
    	</if-not-empty>
    
    </simple-method>
    
    
    
</simple-methods>