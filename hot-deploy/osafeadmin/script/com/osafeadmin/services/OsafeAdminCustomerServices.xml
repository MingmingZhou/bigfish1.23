<?xml version="1.0" encoding="UTF-8"?>

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:noNamespaceSchemaLocation="http://www.ofbiz.org/dtds/simple-methods.xsd">

    <simple-method method-name="updateCustomer" short-description="Update Customer">
        <set field="request" from-field="parameters.request"/>
        <call-class-method method-name="getParameterMap" class-name="org.ofbiz.base.util.UtilHttp" ret-field="paramMap">
            <field field="request" type="javax.servlet.http.HttpServletRequest"/>
        </call-class-method>
        <!-- validating first name and last name -->
        <if-compare field="parameters.firstName_mandatory" operator="equals" value="Y">
	        <if-empty field="parameters.firstName">
	            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="FirstNameMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="firstName" list="error_list"/>
	        </if-empty>
        </if-compare>
        <if-compare field="parameters.lastName_mandatory" operator="equals" value="Y">
	        <if-empty field="parameters.lastName">
	            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="LastNameMissingError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="lastName" list="error_list"/>
	        </if-empty>
        </if-compare>
        <!-- validating E-mail if entered -->
        <if-not-empty field="parameters.emailAddress">
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isEmail" ret-field="isEmail">
                <field field="parameters.emailAddress"/>
            </call-class-method>
            <if-compare field="isEmail" operator="equals" value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="EmailAddressNotFormattedCorrectlyError"/>
                <string-to-list string="${tempErrorMessage}" message-field="emailAddress" list="error_list"/>
            </if-compare>
        </if-not-empty>

        <!-- validating Phones -->
        <if>
            <condition>
                <or>
                    <if-compare value="CAN" operator="equals" field="parameters.USER_country"></if-compare>
                    <if-compare value="USA" operator="equals" field="parameters.USER_country"></if-compare>
                </or>
            </condition>
            <then>
                <!-- validating Home Phone -->
                 <call-simple-method method-name="validatePhoneHome"/>

                <!-- Check the Mobile Phone -->
                <call-simple-method method-name="validatePhoneMobile"/>

                <!-- Check the work Phone -->
                <call-simple-method method-name="validatePhoneWork"/>
            </then>
        <else>
            <!-- validating Home Phone -->
              <call-simple-method method-name="validatePhoneHomeOther"/>

            <!-- Check the Mobile Phone -->
                <call-simple-method method-name="validatePhoneMobileOther"/>

            <!-- Check the Work Phone -->
                <call-simple-method method-name="validatePhoneWorkOther"/>
        </else>
        </if>

        <!-- validating Title -->
        <if-compare field="parameters.personalTitle_mandatory" operator="equals" value="Y">
            <if-empty field="parameters.personalTitle">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="TitleMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="personalTitle" list="error_list"/>
            </if-empty>
        </if-compare>
        <!-- validating Gender -->
        <if-compare field="parameters.gender_mandatory" operator="equals" value="Y">
            <if-empty field="parameters.gender">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="GenderMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="gender" list="error_list"/>
            </if-empty>
        </if-compare>

        <!-- DOB Short(MMDD) validation -->
        <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
            <field field="parameters.dobShortDayUs"/>
            <field field="parameters.dobShortMonthUs"/>
            <string value="1972"/>
            <string value="MMDD"/>
            <field field="parameters.DOB_MMDD_MANDATORY"/>
        </call-class-method>
        <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
            <if-compare field="checkDateOfBirthResult" operator="equals" value="missing">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MissingDobDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="dobShortDayUs" list="error_list"/>
                <string-to-list string="" message-field="dobShortMonthUs" list="error_list"/>
            </if-compare>
            <if-compare field="checkDateOfBirthResult" operator="equals" value="invalid">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidDobDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="dobShortDayUs" list="error_list"/>
                <string-to-list string="" message-field="dobShortMonthUs" list="error_list"/>
            </if-compare>
        </if-compare>

         <!-- DOB Long(MMDDYYYY) validation -->
        <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
            <field field="parameters.dobLongDayUs"/>
            <field field="parameters.dobLongMonthUs"/>
            <field field="parameters.dobLongYearUs"/>
            <string value="MMDDYYYY"/>
            <field field="parameters.DOB_MMDDYYYY_MANDATORY"/>
        </call-class-method>
        <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
            <if-compare field="checkDateOfBirthResult" operator="equals" value="missing">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MissingDobDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="dobLongDayUs" list="error_list"/>
                <string-to-list string="" message-field="dobLongMonthUs" list="error_list"/>
                <string-to-list string="" message-field="dobLongYearUs" list="error_list"/>
            </if-compare>
            <if-compare field="checkDateOfBirthResult" operator="equals" value="invalid">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidDobDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="dobLongDayUs" list="error_list"/>
                <string-to-list string="" message-field="dobLongMonthUs" list="error_list"/>
                <string-to-list string="" message-field="dobLongYearUs" list="error_list"/>
            </if-compare>
        </if-compare>
        
        <!-- DOB Short(DDMM) validation -->
        <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
            <field field="parameters.dobShortDayUk"/>
            <field field="parameters.dobShortMonthUk"/>
            <string value="1972"/>
            <string value="DDMM"/>
            <field field="parameters.DOB_DDMM_MANDATORY"/>
        </call-class-method>
        <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
            <if-compare field="checkDateOfBirthResult" operator="equals" value="missing">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MissingDobDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="dobShortDayUk" list="error_list"/>
                <string-to-list string="" message-field="dobShortMonthUk" list="error_list"/>
            </if-compare>
            <if-compare field="checkDateOfBirthResult" operator="equals" value="invalid">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidDobDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="dobShortDayUk" list="error_list"/>
                <string-to-list string="" message-field="dobShortMonthUk" list="error_list"/>
            </if-compare>
        </if-compare>
        
        <!-- DOB Long(DDMMYYYY) validation -->
        <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
            <field field="parameters.dobLongDayUk"/>
            <field field="parameters.dobLongMonthUk"/>
            <field field="parameters.dobLongYearUk"/>
            <string value="DDMMYYYY"/>
            <field field="parameters.DOB_DDMMYYYY_MANDATORY"/>
        </call-class-method>
        <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
            <if-compare field="checkDateOfBirthResult" operator="equals" value="missing">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MissingDobDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="dobLongDayUk" list="error_list"/>
                <string-to-list string="" message-field="dobLongMonthUk" list="error_list"/>
                <string-to-list string="" message-field="dobLongYearUk" list="error_list"/>
            </if-compare>
            <if-compare field="checkDateOfBirthResult" operator="equals" value="invalid">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidDobDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="dobLongDayUk" list="error_list"/>
                <string-to-list string="" message-field="dobLongMonthUk" list="error_list"/>
                <string-to-list string="" message-field="dobLongYearUk" list="error_list"/>
            </if-compare>
        </if-compare>

        <!-- Validate Custom Party Attributes -->
            <property-to-field resource="OsafeProperties" property="ecommerceUiSequenceXmlFile" field="XmlFileStr"/>
            <set field="XmlFilePath" value="${groovy: org.ofbiz.base.util.string.FlexibleStringExpander.expandString(XmlFileStr, context)}" type="String"/>
            
            <set field="searchRestrictionMap" type="NewMap"/>
            <set field="searchRestrictionMap.screen" value="Y" />
            <set field="searchIgnoreCase" value="true" type="Boolean"/>
            <set field="searchPartial" value="false" type="Boolean"/>
            <set field="useCache" value="false" type="Boolean"/>
            <set field="uiSequenceScreen" value="PersonalInfo" type="String"/>
            
            <call-class-method class-name="com.osafe.services.OsafeManageXml" method-name="getSearchListFromXmlFile" ret-field="uiSequenceSearchList">
                <field field="XmlFilePath" type="String"/>
                <field field="searchRestrictionMap" type="Map"/>
                <field field="uiSequenceScreen" type="String"/>
                <field field="searchIgnoreCase"  type="boolean" />
                <field field="searchPartial"  type="boolean" />
                <field field="useCache"  type="boolean" />
            </call-class-method>
            <set field="partyCustomAttributeActive" value="false"/>
            <iterate entry="uiSequenceSearchScreen" list="uiSequenceSearchList">
                <if-compare operator="equals" value="personalInfoCustomAttributes" field="uiSequenceSearchScreen.key">
                    <if-compare operator="not-equals" value="0" field="uiSequenceSearchScreen.value">
                        <set field="partyCustomAttributeActive" value="true"/>
                    </if-compare>
                </if-compare>
            </iterate> 
            
            
            <if-compare operator="equals" value="true" field="partyCustomAttributeActive">
                <set field="getPartyCustomAttributeListCtx" type="NewMap"/>
                <set field="getPartyCustomAttributeListCtx.useCache" value="false" type="String"/>
                <call-service service-name="getPartyCustomAttributeList" in-map-name="getPartyCustomAttributeListCtx">
                    <result-to-field result-name="customPartyAttributeList" field="customPartyAttributeList"/>
                </call-service>
	            
	            <set field="attrNo" value="0" type="Integer"/>
	            
	            <iterate entry="customPartyAttributeMap" list="customPartyAttributeList">
	                
	                <set field="errorOnField" value="false"/>
	                <set field="requiredMessage" from-field="customPartyAttributeMap.ReqMessage"/>
	                <property-to-field field="dateCompletionErrorMessage" resource="OSafeAdminUiLabels" property="DateCompletionError"/>
	                <if>
                    <condition>
                        <or>
                            <if-compare operator="equals" value="Y" field="customPartyAttributeMap.Mandatory"/>
			                <if-compare operator="equals" value="Yes" field="customPartyAttributeMap.Mandatory"/>
                            <if-compare operator="equals" value="DATE_MMDD" field="customPartyAttributeMap.Type"/>
                            <if-compare operator="equals" value="DATE_MMDDYYYY" field="customPartyAttributeMap.Type"/>
                            <if-compare operator="equals" value="DATE_DDMM" field="customPartyAttributeMap.Type"/>
                            <if-compare operator="equals" value="DATE_DDMMYYYY" field="customPartyAttributeMap.Type"/>
                        </or>
                    </condition>
                    <then>
                        <if>
		                <condition> 
		                    <if-compare operator="equals" value="DATE_MMDD" field="customPartyAttributeMap.Type"/>
		                </condition>
		                <then>
		                    <!-- DOB Short(MMDD) validation -->
					        <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
					            <field field="paramMap.${customPartyAttributeMap.AttrName}_DD"/>
					            <field field="paramMap.${customPartyAttributeMap.AttrName}_MM"/>
					            <string value="1972"/>
					            <string value="MMDD"/>
					            <field field="customPartyAttributeMap.Mandatory"/>
					        </call-class-method>
					        <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
					            <if-compare field="checkDateOfBirthResult" operator="equals" value="missing">
					                <set field="errorOnField" value="true"/>
					                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MissingDobDateError"/>
					                <string-to-list string="${tempErrorMessage}" message-field="" list="error_list"/>
					            </if-compare>
					            <if-compare field="checkDateOfBirthResult" operator="equals" value="invalid">
					                <set field="errorOnField" value="true"/>
					                <if-compare operator="not-equals" value="Y" field="customPartyAttributeMap.Mandatory">
				                        <set field="requiredMessage" from-field="dateCompletionErrorMessage"/>
				                    </if-compare>
					            </if-compare>
					        </if-compare>
		                </then>
		                <else-if>
		                    <condition>
		                        <if-compare operator="equals" value="DATE_MMDDYYYY" field="customPartyAttributeMap.Type"/>
		                    </condition>
		                <then>
		                    <!-- DOB Long(MMDDYYYY) validation -->
					        <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
					            <field field="paramMap.${customPartyAttributeMap.AttrName}_DD"/>
					            <field field="paramMap.${customPartyAttributeMap.AttrName}_MM"/>
					            <field field="paramMap.${customPartyAttributeMap.AttrName}_YYYY"/>
					            <string value="MMDDYYYY"/>
					            <field field="customPartyAttributeMap.Mandatory"/>
					        </call-class-method>
					        <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
					            <if-compare field="checkDateOfBirthResult" operator="equals" value="missing">
					                <set field="errorOnField" value="true"/>
					                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MissingDobDateError"/>
					                <string-to-list string="${tempErrorMessage}" message-field="" list="error_list"/>
					            </if-compare>
					            <if-compare field="checkDateOfBirthResult" operator="equals" value="invalid">
					                <set field="errorOnField" value="true"/>
					                <if-compare operator="not-equals" value="Y" field="customPartyAttributeMap.Mandatory">
				                        <set field="requiredMessage" from-field="dateCompletionErrorMessage"/>
				                    </if-compare>
					            </if-compare>
					        </if-compare>
		                </then>
		                </else-if>
		                <else-if>
		                    <condition>
		                        <if-compare operator="equals" value="DATE_DDMM" field="customPartyAttributeMap.Type"/>
		                    </condition>
		                <then>
		                    <!-- DOB Short(DDMM) validation -->
					        <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
					            <field field="paramMap.${customPartyAttributeMap.AttrName}_DD"/>
					            <field field="paramMap.${customPartyAttributeMap.AttrName}_MM"/>
					            <string value="1972"/>
					            <string value="DDMM"/>
					            <field field="customPartyAttributeMap.Mandatory"/>
					        </call-class-method>
					        <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
					            <if-compare field="checkDateOfBirthResult" operator="equals" value="missing">
					                <set field="errorOnField" value="true"/>
					                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MissingDobDateError"/>
					                <string-to-list string="${tempErrorMessage}" message-field="" list="error_list"/>
					            </if-compare>
					            <if-compare field="checkDateOfBirthResult" operator="equals" value="invalid">
					                <set field="errorOnField" value="true"/>
					                <if-compare operator="not-equals" value="Y" field="customPartyAttributeMap.Mandatory">
				                        <set field="requiredMessage" from-field="dateCompletionErrorMessage"/>
				                    </if-compare>
					            </if-compare>
					        </if-compare>
		                </then>
		                </else-if>
		                <else-if>
		                    <condition>
		                        <if-compare operator="equals" value="DATE_DDMMYYYY" field="customPartyAttributeMap.Type"/>
		                    </condition>
		                <then>
		                    <!-- DOB Long(DDMMYYYY) validation -->
					        <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
					            <field field="paramMap.${customPartyAttributeMap.AttrName}_DD"/>
					            <field field="paramMap.${customPartyAttributeMap.AttrName}_MM"/>
					            <field field="paramMap.${customPartyAttributeMap.AttrName}_YYYY"/>
					            <string value="DDMMYYYY"/>
					            <field field="customPartyAttributeMap.Mandatory"/>
					        </call-class-method>
					        <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
					            <if-compare field="checkDateOfBirthResult" operator="equals" value="missing">
					                <set field="errorOnField" value="true"/>
					                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MissingDobDateError"/>
					                <string-to-list string="${tempErrorMessage}" message-field="" list="error_list"/>
					            </if-compare>
					            <if-compare field="checkDateOfBirthResult" operator="equals" value="invalid">
					                <set field="errorOnField" value="true"/>
					                <if-compare operator="not-equals" value="Y" field="customPartyAttributeMap.Mandatory">
				                        <set field="requiredMessage" from-field="dateCompletionErrorMessage"/>
				                    </if-compare>
					            </if-compare>
					        </if-compare>
		                </then>
		                </else-if>
		                <else>
		                    <set field="attrValue" from-field="paramMap.${customPartyAttributeMap.AttrName}"/>
		                    <if-empty field="paramMap.${customPartyAttributeMap.AttrName}">
		                        <set field="errorOnField" value="true"/>
		                    </if-empty>
		                </else>
		                </if>
		                <if-compare operator="equals" value="true" field="errorOnField">
		                    <if>
		                        <condition> 
		                            <if-compare operator="equals" value="0" field="attrNo"/>
		                        </condition>
		                        <then>
		                            <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_0" list="error_list"/>
		                        </then>
		                        <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="1" field="attrNo"/>
				                    </condition>
			                    <then>
			                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_1" list="error_list"/>
			                    </then>
				                </else-if>
		                        <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="2" field="attrNo"/>
				                    </condition>
			                    <then>
			                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_2" list="error_list"/>
			                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="3" field="attrNo"/>
				                    </condition>
				                <then>
				                    <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_3" list="error_list"/>
				                </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="4" field="attrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_4" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="5" field="attrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_5" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="6" field="attrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_6" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="7" field="attrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_7" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="8" field="attrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_8" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="9" field="attrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_9" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="10" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_10" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="11" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_11" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="12" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_12" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="13" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_13" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="14" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_14" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="15" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_15" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="16" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_16" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="17" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_17" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="18" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_18" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="19" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_19" list="error_list"/>
				                    </then>
				                </else-if>
		                    </if>
		                </if-compare>
                    </then>
                    </if>
	                
	                <calculate field="attrNo">
                        <calcop operator="add" >
                            <calcop operator="get" field="attrNo"/>
                            <number value="1"/>
                        </calcop>
                    </calculate>
	            </iterate>
            </if-compare>
        
        <!-- Validate Website Login -->
        <call-simple-method method-name="validateWebsiteLogin" xml-resource="component://osafeadmin/script/com/osafeadmin/events/OsafeAdminValidationEvents.xml"/>
        
        <check-errors/>

        <!-- update person -->
        <set-service-fields service-name="updatePerson" to-map="updatePersonCtx" map="parameters"/>
        <call-service service-name="updatePerson" in-map-name="updatePersonCtx"/>
        
        <!-- create/Update party attribute -->
        <call-simple-method method-name="createUpdatePartyAttributes"/>
        
        <call-simple-method method-name="createUpdateCustomPartyAttributes"/>
        <property-to-field field="tempSuccessMessage" resource="OSafeAdminUiLabels" property="UpdatedSuccess"/>
        <string-to-list string="${tempSuccessMessage}"  list="successMessageList"/>
        <field-to-request field="successMessageList" request-name="osafeSuccessMessageList"/>
        
        <!-- create Website  login -->
        <if-not-empty field="parameters.loginEmail">
        	<property-to-field resource="security" property="username.lowercase" default="false" field="username_lowercase"/>
	        <property-to-field resource="security" property="password.lowercase" default="false" field="password_lowercase"/>
	        <!-- if username and/or password should be lowercased, do that now -->
	        <if-compare field="username_lowercase" operator="equals" value="true">
	            <call-object-method obj-field="parameters.loginEmail" method-name="toLowerCase" ret-field="parameters.loginEmail"/>
	        </if-compare>
	        <if-compare field="password_lowercase" operator="equals" value="true">
	            <call-object-method obj-field="parameters.password" method-name="toLowerCase" ret-field="parameters.password"/>
	        </if-compare>
	        
	        <set-service-fields service-name="createUserLogin" to-map="createUserLoginContext" map="parameters"/>
	        <set field="createUserLoginContext.userLoginId" from-field="parameters.loginEmail"/>
	        <set field="createUserLoginContext.currentPassword" from-field="parameters.password"/>
	        <set field="createUserLoginContext.currentPasswordVerify" from-field="parameters.passwordConfirm"/>
	        <if-compare operator="equals" value="PARTY_DISABLED" field="parameters.statusId">
	            <set field="createUserLoginContext.enabled" value="N"/>
	        <else>
	            <set field="createUserLoginContext.enabled" value="Y"/>
	        </else>
	        </if-compare>
	        <call-service service-name="createUserLogin" in-map-name="createUserLoginContext"/>
        </if-not-empty>

        <!-- update phone contact -->
        <!-- home phone -->
        <if-not-empty field="parameters.homePhoneContactMechId">
            <set-service-fields service-name="updatePartyTelecomNumber" to-map="homePhoneContext" map="parameters"/>
            <set field="homePhoneContext.contactMechId" from-field="parameters.homePhoneContactMechId"/>
            <set field="homePhoneContext.areaCode" from-field="parameters.phoneHomeArea"/>
            <set field="homePhoneContext.contactNumber" from-field="parameters.phoneHomeContact"/>
            <call-service service-name="updatePartyTelecomNumber" in-map-name="homePhoneContext"/>
        <else>
            <set-service-fields service-name="createPartyTelecomNumber" to-map="homePhoneContext" map="parameters"/>
            <set field="homePhoneContext.areaCode" from-field="parameters.phoneHomeArea"/>
            <set field="homePhoneContext.contactNumber" from-field="parameters.phoneHomeContact"/>
            <call-service service-name="createPartyTelecomNumber" in-map-name="homePhoneContext">
                <result-to-field result-name="contactMechId" field="homePhoneContext.contactMechId"/>
            </call-service>
            <set-service-fields service-name="createPartyContactMechPurpose" to-map="homePhonePurposeContext" map="parameters"/>
            <set field="homePhonePurposeContext.contactMechId" from-field="homePhoneContext.contactMechId"/>

            <set value="PHONE_HOME" field="homePhonePurposeContext.contactMechPurposeTypeId"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="homePhonePurposeContext"/>
            <set value="PRIMARY_PHONE" field="homePhonePurposeContext.contactMechPurposeTypeId"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="homePhonePurposeContext"/>
        </else>
        </if-not-empty>

        <!-- mobile phone -->
        <if-not-empty field="parameters.mobilePhoneContactMechId">
            <set-service-fields service-name="updatePartyTelecomNumber" to-map="mobilePhoneContext" map="parameters"/>
            <set field="mobilePhoneContext.contactMechId" from-field="parameters.mobilePhoneContactMechId"/>
            <set field="mobilePhoneContext.areaCode" from-field="parameters.phoneMobileArea"/>
            <set field="mobilePhoneContext.contactNumber" from-field="parameters.phoneMobileContact"/>
            <if-not-empty field="mobilePhoneContext.contactNumber">
                <call-service service-name="updatePartyTelecomNumber" in-map-name="mobilePhoneContext"/>
            <else>
                <call-service service-name="deletePartyContactMech" in-map-name="mobilePhoneContext"/>
            </else>
            </if-not-empty>
        <else>
            <if-not-empty field="parameters.phoneMobileContact">
                <set-service-fields service-name="createPartyTelecomNumber" to-map="mobilePhoneContext" map="parameters"/>
                <set field="mobilePhoneContext.areaCode" from-field="parameters.phoneMobileArea"/>
                <set field="mobilePhoneContext.contactNumber" from-field="parameters.phoneMobileContact"/>
                <call-service service-name="createPartyTelecomNumber" in-map-name="mobilePhoneContext">
                    <result-to-field result-name="contactMechId" field="mobilePhoneContext.contactMechId"/>
                </call-service>

                <set-service-fields service-name="createPartyContactMechPurpose" to-map="mobilePhonePurposeContext" map="parameters"/>
                <set field="mobilePhonePurposeContext.contactMechId" from-field="mobilePhoneContext.contactMechId"/>
                <set value="PHONE_MOBILE" field="mobilePhonePurposeContext.contactMechPurposeTypeId"/>
                <call-service service-name="createPartyContactMechPurpose" in-map-name="mobilePhonePurposeContext"/>
            </if-not-empty>
        </else>
        </if-not-empty>

        <!-- work phone -->
        <if-not-empty field="parameters.workPhoneContactMechId">
            <set-service-fields service-name="updatePartyTelecomNumber" to-map="workPhoneContext" map="parameters"/>
            <set field="workPhoneContext.contactMechId" from-field="parameters.workPhoneContactMechId"/>
            <set field="workPhoneContext.areaCode" from-field="parameters.phoneWorkArea"/>
            <set field="workPhoneContext.contactNumber" from-field="parameters.phoneWorkContact"/>
            <set field="workPhoneContext.extension" from-field="parameters.phoneWorkExt"/>
            <if-not-empty field="workPhoneContext.contactNumber">
                <call-service service-name="updatePartyTelecomNumber" in-map-name="workPhoneContext"/>
            <else>
                <call-service service-name="deletePartyContactMech" in-map-name="workPhoneContext"/>
            </else>
            </if-not-empty>
        <else>
            <if-not-empty field="parameters.phoneWorkContact">
	            <set-service-fields service-name="createPartyTelecomNumber" to-map="workPhoneContext" map="parameters"/>
	            <set field="workPhoneContext.areaCode" from-field="parameters.phoneWorkArea"/>
	            <set field="workPhoneContext.contactNumber" from-field="parameters.phoneWorkContact"/>
                <set field="workPhoneContext.extension" from-field="parameters.phoneWorkExt"/>
                <call-service service-name="createPartyTelecomNumber" in-map-name="workPhoneContext">
                    <result-to-field result-name="contactMechId" field="workPhoneContext.contactMechId"/>
                </call-service>

	            <set-service-fields service-name="createPartyContactMechPurpose" to-map="workPhonePurposeContext" map="parameters"/>
	            <set field="workPhonePurposeContext.contactMechId" from-field="workPhoneContext.contactMechId"/>
                <set value="PHONE_WORK" field="workPhonePurposeContext.contactMechPurposeTypeId"/>
                <call-service service-name="createPartyContactMechPurpose" in-map-name="workPhonePurposeContext"/>
            </if-not-empty>
        </else>
        </if-not-empty>

        <!-- create/Update user's email address -->
        <if-not-empty field="parameters.emailAddressContactMechId">
            <if-not-empty field="parameters.emailAddress">
	            <set-service-fields service-name="updatePartyEmailAddress" to-map="emailAddressContext" map="parameters"/>
	            <set field="emailAddressContext.contactMechId" from-field="parameters.emailAddressContactMechId"/>
	            <call-service service-name="updatePartyEmailAddress" in-map-name="emailAddressContext"/>
            </if-not-empty>
        <else>
            <if-not-empty field="parameters.emailAddress">
	            <set-service-fields service-name="createPartyEmailAddress" to-map="emailAddressContext" map="parameters"/>
	            <set value="PRIMARY_EMAIL" field="emailAddressContext.contactMechPurposeTypeId"/>
                <call-service service-name="createPartyEmailAddress" in-map-name="emailAddressContext"/>
            </if-not-empty>
        </else>
        </if-not-empty>
        
        <!-- REMOVE EXISTING PARTY RELATIONSHIP -->
        <entity-one entity-name="Party" value-field="party">
            <field-map field-name="partyId" from-field="parameters.partyId"/>
        </entity-one>
        
        <get-related relation-name="ToPartyRelationship" list="partyRelationships" value-field="party"/>
        <set field="filterMap.roleTypeIdFrom" value="INTERNAL_ORGANIZATIO"/>
        <filter-list-by-and list="partyRelationships" to-list="partyRelationships" map="filterMap"/>
        
        <iterate entry="partyRelationship" list="partyRelationships">
            <set field="deletePartyRelationshipContext.partyIdFrom" from-field="partyRelationship.partyIdFrom"/>
            <set field="deletePartyRelationshipContext.partyIdTo" from-field="partyRelationship.partyIdTo"/>
            <set field="deletePartyRelationshipContext.roleTypeIdFrom" from-field="partyRelationship.roleTypeIdFrom"/>
            <set field="deletePartyRelationshipContext.roleTypeIdTo" from-field="partyRelationship.roleTypeIdTo"/>
            <set field="deletePartyRelationshipContext.fromDate" from-field="partyRelationship.fromDate" type="Timestamp"/>
            <call-service service-name="deletePartyRelationship" in-map-name="deletePartyRelationshipContext"/>
        </iterate>
        <if-not-empty field="parameters.organizationPartyId">
            <set-service-fields service-name="createPartyRelationship" to-map="createPartyRelationshipContext" map="parameters"/>
            <set field="createPartyRelationshipContext.partyIdFrom" from-field="parameters.organizationPartyId"/>
            <set field="createPartyRelationshipContext.partyIdTo" from-field="parameters.partyId"/>
            <set field="createPartyRelationshipContext.roleTypeIdFrom" value="INTERNAL_ORGANIZATIO"/>
            <set field="createPartyRelationshipContext.roleTypeIdTo" value="CUSTOMER"/>
            <set field="createPartyRelationshipContext.partyRelationshipTypeId" value="GROUP_ROLLUP"/>
            <call-service service-name="createPartyRelationship" in-map-name="createPartyRelationshipContext"/>
            
        </if-not-empty>
        <if-not-empty field="parameters.existingOrganizationId">
            <field-to-request field="parameters.existingOrganizationId" request-name="partyId"/>
        </if-not-empty>
    </simple-method>

    <simple-method method-name="createUpdateCustomPartyAttributes" short-description="Update Custom Party Attributes" login-required="false" >
        <if-compare operator="equals" value="true" field="partyCustomAttributeActive">
            
                <set field="getPartyCustomAttributeListCtx" type="NewMap"/>
                <set field="getPartyCustomAttributeListCtx.useCache" value="false" type="String"/>
                <call-service service-name="getPartyCustomAttributeList" in-map-name="getPartyCustomAttributeListCtx">
                    <result-to-field result-name="customPartyAttributeList" field="customPartyAttributeList"/>
                </call-service>
                
	            <iterate entry="customPartyAttribute" list="customPartyAttributeList">
	                <set field ="attrValueStr" value="" />
	                <if>
                    <condition>
                        <or>
                            <if-compare value="CHECKBOX" operator="equals" field="customPartyAttribute.Type"></if-compare>
                            <if-compare value="DROP_DOWN_MULTI" operator="equals" field="customPartyAttribute.Type"></if-compare>
                        </or>
                    </condition>
                    <then>
                              <set field ="attrValueList" from-field="paramMap.${customPartyAttribute.AttrName}" />
                              
		                            <iterate list="attrValueList" entry="attrValue">
								           <string-append string="${attrValue}," field="attrValueStr" /> 
						              </iterate>

						              <if-compare operator="contains" value="," field="attrValueList">
						              <if-not-empty field="attrValueStr">
								            <call-object-method obj-field="attrValueStr" method-name="length" ret-field="attrValueStrLength"/>
								            <calculate field="attrValueStrLength">
								                <calcop operator="subtract" >
								                    <calcop operator="get" field="attrValueStrLength"/>
								                    <number value="1"/>
								                </calcop>
								            </calculate>
								            <set field="startIndex" value="0" type="Integer"/>
								            <set field="endIndex" from-field="attrValueStrLength" type="Integer"/>
								            <call-object-method obj-field="attrValueStr" method-name="substring" ret-field="attrValueStr">
								                <field field="startIndex" type="int"/>
								                <field field="endIndex" type="int"/>
								            </call-object-method>
	                                  </if-not-empty>
	                                  <else>
	                                      <set field="attrValueStr" from-field="attrValueList" type="String"/>
	                                  </else>
	                                  </if-compare>
                    </then>
                    <else-if>
                        <condition> 
		                    <if-compare operator="equals" value="DATE_MMDD" field="customPartyAttribute.Type"/>
		                </condition>
                    <then>
                        <clear-field field="shortDateString"/>
                        <if-not-empty field="paramMap.${customPartyAttribute.AttrName}_MM">
			                <if-not-empty field="paramMap.${customPartyAttribute.AttrName}_DD">
			                    <set field="shortMonth" from-field="paramMap.${customPartyAttribute.AttrName}_MM"/>
			                    <set field="shortDay" from-field="paramMap.${customPartyAttribute.AttrName}_DD"/>
			                    <string-append string="${shortMonth}" field="shortDateString"/>
			                    <string-append string="/" field="shortDateString"/>
			                    <string-append string="${shortDay}" field="shortDateString"/>
			                </if-not-empty>
			            </if-not-empty>
			            <set field="attrValueStr" from-field="shortDateString" set-if-null="true" set-if-empty="true"/>
                    </then>
                    </else-if>
                    <else-if>
                        <condition> 
		                    <if-compare operator="equals" value="DATE_MMDDYYYY" field="customPartyAttribute.Type"/>
		                </condition>
                    <then>
                        <clear-field field="dateString"/>
                        <if-not-empty field="paramMap.${customPartyAttribute.AttrName}_MM">
			                <if-not-empty field="paramMap.${customPartyAttribute.AttrName}_DD">
			                    <if-not-empty field="paramMap.${customPartyAttribute.AttrName}_YYYY">
				                    <set field="month" from-field="paramMap.${customPartyAttribute.AttrName}_MM"/>
				                    <set field="day" from-field="paramMap.${customPartyAttribute.AttrName}_DD"/>
				                    <set field="year" from-field="paramMap.${customPartyAttribute.AttrName}_YYYY"/>
				                    <string-append string="${month}" field="dateString"/>
				                    <string-append string="/" field="dateString"/>
				                    <string-append string="${day}" field="dateString"/>
				                    <string-append string="/" field="dateString"/>
				                    <string-append string="${year}" field="dateString"/>
				                </if-not-empty>
			                </if-not-empty>
			            </if-not-empty>
			            <set field="attrValueStr" from-field="dateString" set-if-null="true"/>
                    </then>
                    </else-if>
                    <else-if>
                        <condition> 
		                    <if-compare operator="equals" value="DATE_DDMM" field="customPartyAttribute.Type"/>
		                </condition>
                    <then>
                        <clear-field field="shortDateString"/>
                        <if-not-empty field="paramMap.${customPartyAttribute.AttrName}_DD">
			                <if-not-empty field="paramMap.${customPartyAttribute.AttrName}_MM">
			                    <set field="shortDay" from-field="paramMap.${customPartyAttribute.AttrName}_DD"/>
			                    <set field="shortMonth" from-field="paramMap.${customPartyAttribute.AttrName}_MM"/>
			                    <string-append string="${shortDay}" field="shortDateString"/>
			                    <string-append string="/" field="shortDateString"/>
			                    <string-append string="${shortMonth}" field="shortDateString"/>
			                </if-not-empty>
			            </if-not-empty>
			            <set field="attrValueStr" from-field="shortDateString" set-if-null="true"/>
                    </then>
                    </else-if>
                    <else-if>
                        <condition> 
		                    <if-compare operator="equals" value="DATE_DDMMYYYY" field="customPartyAttribute.Type"/>
		                </condition>
                    <then>
                        <clear-field field="dateString"/>
                        <if-not-empty field="paramMap.${customPartyAttribute.AttrName}_DD">
			                <if-not-empty field="paramMap.${customPartyAttribute.AttrName}_MM">
			                    <if-not-empty field="paramMap.${customPartyAttribute.AttrName}_YYYY">
			                        <set field="day" from-field="paramMap.${customPartyAttribute.AttrName}_DD"/>
				                    <set field="month" from-field="paramMap.${customPartyAttribute.AttrName}_MM"/>
				                    <set field="year" from-field="paramMap.${customPartyAttribute.AttrName}_YYYY"/>
				                    <string-append string="${day}" field="dateString"/>
				                    <string-append string="/" field="dateString"/>
				                    <string-append string="${month}" field="dateString"/>
				                    <string-append string="/" field="dateString"/>
				                    <string-append string="${year}" field="dateString"/>
				                </if-not-empty>
			                </if-not-empty>
			            </if-not-empty>
			            <set field="attrValueStr" from-field="dateString" set-if-null="true"/>
                    </then>
                    </else-if>
                    <else>
                        <set field="attrValueStr" from-field="paramMap.${customPartyAttribute.AttrName}"/>
                    </else>
                    </if>
                        <set field="createUpdateCustomPartyAttributeCtx.partyId" from-field="parameters.partyId"/>
                        <set field="createUpdateCustomPartyAttributeCtx.attrName" value="${customPartyAttribute.AttrName}"/>
                        <set field="createUpdateCustomPartyAttributeCtx.attrValue" from-field="attrValueStr" set-if-empty="true" set-if-null="true"/>
                        <call-service service-name="createUpdatePartyAttribute" in-map-name="createUpdateCustomPartyAttributeCtx"/>
                        <clear-field field="createUpdateCustomPartyAttributeCtx"/>
	            </iterate>
            </if-compare>
    </simple-method>

    <simple-method method-name="createUpdatePartyAttributes" short-description="Update Party Attributes" login-required="false" >
        <!-- Create/Update USER Gender -->
        <set field="genderStr" value="gender"/>
        <call-object-method method-name="containsKey" obj-field="parameters" ret-field="hasGenderInput">
            <field field="genderStr" type="Object"/>
        </call-object-method>
        <if-compare field="hasGenderInput" operator="equals" value="true" type="Boolean">
            <set field="createUpdateGenderCtx.partyId" from-field="parameters.partyId"/>
            <set field="createUpdateGenderCtx.attrName" value="GENDER"/>
            <set field="createUpdateGenderCtx.attrValue" from-field="parameters.gender"/>
            <call-service service-name="createUpdatePartyAttribute" in-map-name="createUpdateGenderCtx"/>
        </if-compare>

        <if-not-empty field="parameters.textPreference">
            <set field="createUpdateTextPreferenceCtx.partyId" from-field="parameters.partyId"/>
            <set field="createUpdateTextPreferenceCtx.attrName" value="PARTY_TEXT_PREFERENCE"/>
            <set field="createUpdateTextPreferenceCtx.attrValue" from-field="parameters.textPreference"/>
            <call-service service-name="createUpdatePartyAttribute" in-map-name="createUpdateTextPreferenceCtx"/>
        </if-not-empty>

        <!-- Create/Update USER Title -->
        <set field="titleStr" value="personalTitle"/>
        <call-object-method method-name="containsKey" obj-field="parameters" ret-field="hasTitleInput">
            <field field="titleStr" type="Object"/>
        </call-object-method>
        <if-compare field="hasTitleInput" operator="equals" value="true" type="Boolean">
            <set field="createUpdateTitleCtx.partyId" from-field="parameters.partyId"/>
            <set field="createUpdateTitleCtx.attrName" value="TITLE"/>
            <set field="createUpdateTitleCtx.attrValue" from-field="parameters.personalTitle"/>
            <call-service service-name="createUpdatePartyAttribute" in-map-name="createUpdateTitleCtx"/>
        </if-compare>

        <!-- Create/Update USER DOB (DDMM) -->
        <set field="dobShortMonthUkStr" value="dobShortMonthUk"/>
        <call-object-method method-name="containsKey" obj-field="parameters" ret-field="hasDobShortMonthUkInput">
            <field field="dobShortMonthUkStr" type="Object"/>
        </call-object-method>
        <if-compare field="hasDobShortMonthUkInput" operator="equals" value="true" type="Boolean">
	        <if-not-empty field="parameters.dobShortDayUk">
	            <string-append string="${parameters.dobShortDayUk}" field="DOB_DDMM"/>
	            <string-append string="/" field="DOB_DDMM"/>
	            <string-append string="${parameters.dobShortMonthUk}" field="DOB_DDMM"/>
	        </if-not-empty>
	        <set field="createUpdateDOBShortCtx.partyId" from-field="parameters.partyId"/>
	        <set field="createUpdateDOBShortCtx.attrName" value="DOB_DDMM"/>
	        <set field="createUpdateDOBShortCtx.attrValue" from-field="DOB_DDMM" set-if-null="true"/>
	        <call-service service-name="createUpdatePartyAttribute" in-map-name="createUpdateDOBShortCtx"/>
        </if-compare>

        <!-- Create/Update USER DOB (DDMMYYYY) -->
        <set field="dobLongMonthUkStr" value="dobLongMonthUk"/>
        <call-object-method method-name="containsKey" obj-field="parameters" ret-field="hasDobLongMonthUkInput">
            <field field="dobLongMonthUkStr" type="Object"/>
        </call-object-method>
        <if-compare field="hasDobLongMonthUkInput" operator="equals" value="true" type="Boolean">
	        <if-not-empty field="parameters.dobLongDayUk">
	            <string-append string="${parameters.dobLongDayUk}" field="DOB_DDMMYYYY"/>
	            <string-append string="/" field="DOB_DDMMYYYY"/>
	            <string-append string="${parameters.dobLongMonthUk}" field="DOB_DDMMYYYY"/>
	            <string-append string="/" field="DOB_DDMMYYYY"/>
	            <string-append string="${parameters.dobLongYearUk}" field="DOB_DDMMYYYY"/>
	        </if-not-empty>
	        <set field="createUpdateDOBLongCtx.partyId" from-field="parameters.partyId"/>
	        <set field="createUpdateDOBLongCtx.attrName" value="DOB_DDMMYYYY"/>
	        <set field="createUpdateDOBLongCtx.attrValue" from-field="DOB_DDMMYYYY" set-if-null="true"/>
            <call-service service-name="createUpdatePartyAttribute" in-map-name="createUpdateDOBLongCtx"/>
        </if-compare>

        <!-- Create/Update USER DOB (MMDD) -->
        <set field="dobShortMonthUsStr" value="dobShortMonthUs"/>
        <call-object-method method-name="containsKey" obj-field="parameters" ret-field="hasDobShortMonthUsInput">
            <field field="dobShortMonthUsStr" type="Object"/>
        </call-object-method>
        <if-compare field="hasDobShortMonthUsInput" operator="equals" value="true" type="Boolean">
	        <if-not-empty field="parameters.dobShortDayUs">
	            <string-append string="${parameters.dobShortMonthUs}" field="DOB_MMDD"/>
	            <string-append string="/" field="DOB_MMDD"/>
	            <string-append string="${parameters.dobShortDayUs}" field="DOB_MMDD"/>
	        </if-not-empty>
	        <set field="createUpdateDOBShortCtx.partyId" from-field="parameters.partyId"/>
	        <set field="createUpdateDOBShortCtx.attrName" value="DOB_MMDD"/>
	        <set field="createUpdateDOBShortCtx.attrValue" from-field="DOB_MMDD" set-if-null="true"/>
	        <call-service service-name="createUpdatePartyAttribute" in-map-name="createUpdateDOBShortCtx"/>
            <call-service service-name="createUpdatePartyAttribute" in-map-name="createUpdateDOBShortCtx"/>
        </if-compare>

        <!-- Create/Update USER DOB (MMDDYYYY) -->
        <set field="dobLongMonthUsStr" value="dobLongMonthUs"/>
        <call-object-method method-name="containsKey" obj-field="parameters" ret-field="hasDobLongMonthUsInput">
            <field field="dobLongMonthUsStr" type="Object"/>
        </call-object-method>
        <if-compare field="hasDobLongMonthUsInput" operator="equals" value="true" type="Boolean">
	        <if-not-empty field="parameters.dobLongDayUs">
	            <string-append string="${parameters.dobLongMonthUs}" field="DOB_MMDDYYYY"/>
	            <string-append string="/" field="DOB_MMDDYYYY"/>
	            <string-append string="${parameters.dobLongDayUs}" field="DOB_MMDDYYYY"/>
	            <string-append string="/" field="DOB_MMDDYYYY"/>
	            <string-append string="${parameters.dobLongYearUs}" field="DOB_MMDDYYYY"/>
	        </if-not-empty>
	        <set field="createUpdateDOBLongCtx.partyId" from-field="parameters.partyId"/>
	        <set field="createUpdateDOBLongCtx.attrName" value="DOB_MMDDYYYY"/>
	        <set field="createUpdateDOBLongCtx.attrValue" from-field="DOB_MMDDYYYY" set-if-null="true"/>
            <call-service service-name="createUpdatePartyAttribute" in-map-name="createUpdateDOBLongCtx"/>
        </if-compare>

        <!-- Create/Update email preference -->
        <set field="createUpdateEmailPreferenceCtx.partyId" from-field="parameters.partyId"/>
        <set field="createUpdateEmailPreferenceCtx.attrName" value="PARTY_EMAIL_PREFERENCE"/>
        <set field="createUpdateEmailPreferenceCtx.attrValue" from-field="parameters.emailPreference"/>
        <call-service service-name="createUpdatePartyAttribute" in-map-name="createUpdateEmailPreferenceCtx"/>

        <!-- Create/Update IS_DOWNLOADED  -->
        <set field="createUpdateIsDownloadedCtx.partyId" from-field="parameters.partyId"/>
        <set field="createUpdateIsDownloadedCtx.attrName" value="IS_DOWNLOADED"/>
        <set field="createUpdateIsDownloadedCtx.attrValue" from-field="parameters.exportStatus"/>
        <call-service service-name="createUpdatePartyAttribute" in-map-name="createUpdateIsDownloadedCtx"/>
        
        <!-- Create/Update USER Loyalty Points Id -->
        <set field="createUpdateLoyaltyPointsCtx.partyId" from-field="parameters.partyId"/>
        <set field="createUpdateLoyaltyPointsCtx.attrName" value="LOYALTY_POINT_ID"/>
        <set field="createUpdateLoyaltyPointsCtx.attrValue" from-field="parameters.userLoyaltyPointId"/>
        <call-service service-name="createUpdatePartyAttribute" in-map-name="createUpdateLoyaltyPointsCtx"/>
    </simple-method>

    <simple-method method-name="createUpdateCustomerAddress" short-description="create/Update Customer Address">
        <!-- Check address fields on the Postal Address -->
        
        <if-compare field="parameters.customer_fullName_mandatory" operator="equals" value="Y">
        	<if-empty field="parameters.customer_firstName">
        		<property-to-field field="field" resource="OSafeUiLabels" property="FirstNameCaption"/>
        		<call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
	                <field field="field"/>
	            </call-class-method>
        		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankGenericError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="customer_firstName" list="error_list"/>
        	</if-empty>
        	<if-empty field="parameters.customer_lastName">
        		<property-to-field field="field" resource="OSafeUiLabels" property="LastNameCaption"/>
        		<call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
	                <field field="field"/>
	            </call-class-method>
        		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankGenericError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="customer_lastName" list="error_list"/>
        	</if-empty>
        </if-compare>
        <if-not-empty field="parameters.customer_firstName">
            <set field="parameters.customer_fullName" value="${parameters.customer_firstName}"/>
        </if-not-empty>
        <if-not-empty field="parameters.customer_lastName">
            <if-not-empty field="parameters.customer_firstName">
                <set field="parameters.customer_fullName" value="${parameters.customer_firstName} ${parameters.customer_lastName}"/>
            <else>
                <set field="parameters.customer_fullName" value="${parameters.customer_lastName}"/>
            </else>
            </if-not-empty>
        </if-not-empty>
        
        <if-compare field="parameters.customer_attnName_mandatory" operator="equals" value="Y">
	        <if-empty field="parameters.customer_attnName">
	            <property-to-field field="field" resource="OSafeUiLabels" property="AddressNickNameCaption"/>
	            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
	                <field field="field"/>
	            </call-class-method>
        		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankGenericError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="customer_attnName" list="error_list"/>
	        </if-empty>
        </if-compare>
        
        <if-not-empty field="parameters.customer_attnName">
            <set from-field="parameters.partyId" field="customerPostalAddressMap.partyId"/>
            <find-by-and list="customerPostalAddressList" map="customerPostalAddressMap" entity-name="PartyAndPostalAddress"/>
            <call-class-method class-name="org.ofbiz.entity.util.EntityUtil" method-name="filterByDate" ret-field="customerPostalAddressList">
                <field field="customerPostalAddressList" type="List"/>
            </call-class-method>
            <!-- Check if ATTN_NAME already exists for this party -->
            <if-not-empty field="customerPostalAddressList">
           		<!-- Iterate all customers addresses, if we find a match, check if it is the same address we are updating before throwing error -->
           		<iterate entry="customerPostalAddress" list="customerPostalAddressList">
           			<if-not-empty field="customerPostalAddress.attnName">
           				<set field="customerPostalAddressAttnName" from-field="customerPostalAddress.attnName"/>
	           			<call-object-method method-name="toUpperCase" obj-field="customerPostalAddressAttnName" ret-field="customerPostalAddressAttnName"/>
	           			<call-object-method method-name="toUpperCase" obj-field="parameters.customer_attnName" ret-field="parameterCustomerAttnName"/>
	           			<if-compare-field operator="equals" field="customerPostalAddressAttnName" to-field="parameterCustomerAttnName">
	           				<!-- if we are updating, then we will already have a contactMechId, else if we are adding we will not have a contactMechId -->
	           				<if-not-empty field="parameters.contactMechId">
	            				<if-compare-field operator="not-equals" field="customerPostalAddress.contactMechId" to-field="parameters.contactMechId">
	            					<set from-field="parameters.customer_attnName" field="nickName"/>
	            					<property-to-field field="field" resource="OSafeUiLabels" property="AddressNickNameCaption"/>
	            					<call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
						                <field field="field"/>
						            </call-class-method>
				            		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="AddressNickNameUniqueError"/>
				            		<string-to-list string="${tempErrorMessage}" message-field="customer_attnName" list="error_list"/>
	            				</if-compare-field>
	            				<else>
	            					<!-- We are adding a new Address, error if ATTN_NAME exists -->
				            		<set from-field="parameters.customer_attnName" field="nickName"/>
				            		<property-to-field field="field" resource="OSafeUiLabels" property="AddressNickNameCaption"/>
				            		<call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
						                <field field="field"/>
						            </call-class-method>
				            		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="AddressNickNameUniqueError"/>
				            		<string-to-list string="${tempErrorMessage}" message-field="customer_attnName" list="error_list"/>
	            				</else>
	           				</if-not-empty>
	           			</if-compare-field>
           			</if-not-empty>
           		</iterate>
            </if-not-empty>
        </if-not-empty>
        
        <if-compare field="parameters.customer_address1_mandatory" operator="equals" value="Y">
	        <if-empty field="parameters.customer_address1">
	            <property-to-field field="field" resource="OSafeUiLabels" property="AddressLine1Caption"/>
	            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
	                <field field="field"/>
	            </call-class-method>
        		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankGenericError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="customer_address1" list="error_list"/>
	        </if-empty>
        </if-compare>

        <if-compare field="parameters.customer_city_mandatory" operator="equals" value="Y">
            <if-empty field="parameters.customer_city">
                <property-to-field field="field" resource="OSafeUiLabels" property="TownOrCityCaption"/>
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
	                <field field="field"/>
	            </call-class-method>
        		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankGenericError"/>
                <string-to-list string="${tempErrorMessage}" message-field="customer_city" list="error_list"/>
            </if-empty>
        </if-compare>
        <if-compare field="parameters.customer_postalCode_mandatory" operator="equals" value="Y">
            <if-empty field="parameters.customer_postalCode">
                <property-to-field field="field" resource="OSafeUiLabels" property="PostalCodeOrZipCaption"/>
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
	                <field field="field"/>
	            </call-class-method>
        		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankGenericError"/>
                <string-to-list string="${tempErrorMessage}" message-field="customer_postalCode" list="error_list"/>
            </if-empty>
        </if-compare>
        <if-not-empty field="parameters.customer_postalCode">
            <if-compare value="USA" operator="equals" field="parameters.customer_country">
                <call-class-method class-name="com.osafe.util.Util"  method-name="isZipCode" ret-field="isZipCode">
                    <field field="parameters.customer_postalCode"/>
                </call-class-method>
            </if-compare>
            <if-compare field="isZipCode" operator="equals"  value="false">
            	<property-to-field field="field" resource="OSafeUiLabels" property="PostalCodeOrZipCaption"/>
            	<call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
	                <field field="field"/>
	            </call-class-method>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidPostalCodeError"/>
                <string-to-list string="${tempErrorMessage}" message-field="customer_postalCode" list="error_list"/>
            </if-compare>
        </if-not-empty>
        <!-- if a country has States than state is mandatory. -->
         <call-class-method class-name="org.ofbiz.common.CommonWorkers"  method-name="getAssociatedStateList" ret-field="statesList">
             <field field="delegator" type="org.ofbiz.entity.Delegator"/>
             <field field="parameters.customer_country"/>
         </call-class-method>
        <if-compare field="parameters.customer_state_mandatory" operator="equals" value="Y">
            <if-not-empty field="statesList">
	            <if-empty field="parameters.customer_state">
	                <property-to-field field="field" resource="OSafeUiLabels" property="StateOrProvinceCaption"/>
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
		                <field field="field"/>
		            </call-class-method>
        			<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankGenericError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="customer_state" list="error_list"/>
	            </if-empty>
            </if-not-empty>
        </if-compare>
        <check-errors/>

        <!--Set the Value for City and Postal Code if they are empty as they are required fields by the service -->
        <if>
                <condition>
                    <or>
                        <if-compare value="CAN" operator="equals" field="parameters.customer_country"></if-compare>
                        <if-compare value="USA" operator="equals" field="parameters.customer_country"></if-compare>
                    </or>
                </condition>
                <then></then>
                <else>
                    <if-empty field="parameters.customer_city">
                        <set field="parameters.customer_city" value="_NA_"/>
                    </if-empty>
                    <if-empty field="parameters.customer_postalCode">
                        <set field="parameters.customer_postalCode" value="_NA_"/>
                    </if-empty>
                </else>
        </if>
        
        <set field="partyProfileDefaultCtx.partyId" from-field="parameters.partyId"/>
        <set field="partyProfileDefaultCtx.productStoreId" from-field="parameters.productStoreId"/>
        <set field="partyProfileDefaultCtx.defaultShipAddr" from-field="parameters.contactMechId"/>
        <find-by-and entity-name="PartyProfileDefault" list="partyProfileDefaultList" map="partyProfileDefaultCtx"/>
            
            
        <set-service-fields service-name="createUpdatePartyPostalAddress" to-map="createUpdatePartyPostalAddressctx" map="parameters"/>
        <set field="createUpdatePartyPostalAddressctx.countryGeoId" from-field="parameters.customer_country"/>
        <set field="createUpdatePartyPostalAddressctx.toName" from-field="parameters.customer_fullName"/>
        <set field="createUpdatePartyPostalAddressctx.attnName" from-field="parameters.customer_attnName"/>
        <set field="createUpdatePartyPostalAddressctx.address1" from-field="parameters.customer_address1"/>
        <set field="createUpdatePartyPostalAddressctx.address2" from-field="parameters.customer_address2"/>
        <set field="createUpdatePartyPostalAddressctx.address3" from-field="parameters.customer_address3"/>
        <set field="createUpdatePartyPostalAddressctx.city" from-field="parameters.customer_city"/>
        <set field="createUpdatePartyPostalAddressctx.stateProvinceGeoId" from-field="parameters.customer_state"/>
        <set field="createUpdatePartyPostalAddressctx.postalCode" from-field="parameters.customer_postalCode"/>
        <call-service service-name="createUpdatePartyPostalAddress" in-map-name="createUpdatePartyPostalAddressctx">
                <result-to-field result-name="contactMechId" field="addressPurposeContext.contactMechId"/>
        </call-service>
        
        <if-not-empty field="partyProfileDefaultList">
           	<set field="newContactMechId" from-field="addressPurposeContext.contactMechId"/>
	        <if-not-empty field="newContactMechId">
	           <set-service-fields service-name="setPartyProfileDefaults" map="parameters" to-map="partyProfileDefaultsCtx"/>
	           <set field="partyProfileDefaultsCtx.defaultShipAddr" from-field="newContactMechId"/>
	           <set field="partyProfileDefaultsCtx.partyId" from-field="parameters.partyId"/>
	           <set field="partyProfileDefaultsCtx.productStoreId" from-field="parameters.productStoreId"/>
	           <call-service service-name="setPartyProfileDefaults" in-map-name="partyProfileDefaultsCtx"/>
	        </if-not-empty>
       	</if-not-empty>
        
        <if-empty field="parameters.contactMechId">
	        <!-- create the shipping location -->
	        <set field="addressPurposeContext.contactMechPurposeTypeId" value="SHIPPING_LOCATION"/>
	        <set field="addressPurposeContext.partyId" from-field="parameters.partyId" />
	        <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>
        </if-empty>
    </simple-method>

    <simple-method method-name="createCustomer" short-description="create Customer">
        <set field="request" from-field="parameters.request"/>
        <call-class-method method-name="getParameterMap" class-name="org.ofbiz.base.util.UtilHttp" ret-field="paramMap">
            <field field="request" type="javax.servlet.http.HttpServletRequest"/>
        </call-class-method>
        <!-- validating customer id -->
        <if-empty field="parameters.partyId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankCustomerIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="partyId" list="error_list"/>
        <else>
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidId" ret-field="isValidId">
                <field field="parameters.partyId"/>
            </call-class-method>
            <if-compare field="isValidId" operator="equals" value="true">
                <entity-one entity-name="Party" value-field="existingParty">
                    <field-map field-name="partyId" from-field="parameters.partyId"/>
                </entity-one>
                <if-not-empty field="existingParty">
                    <set field="errorKey" from-field="parameters.partyId"/>
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="NewCustomerIdExistError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="partyId" list="error_list"/>
                </if-not-empty>
            <else>
                <set field="errorKey" from-field="parameters.partyId"/>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidIdError"/>
                <string-to-list string="${tempErrorMessage}" message-field="partyId" list="error_list"/>
            </else>
            </if-compare>
        </else>
        </if-empty>
        <!-- validating first name and last name -->
        <if-compare field="parameters.firstName_mandatory" operator="equals" value="Y">
            <if-empty field="parameters.firstName">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="FirstNameMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="firstName" list="error_list"/>
            </if-empty>
        </if-compare>
        <if-compare field="parameters.lastName_mandatory" operator="equals" value="Y">
            <if-empty field="parameters.lastName">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="LastNameMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="lastName" list="error_list"/>
            </if-empty>
        </if-compare>
        <!-- validating E-mail if entered -->
        <if-not-empty field="parameters.emailAddress">
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isEmail" ret-field="isEmail">
                <field field="parameters.emailAddress"/>
            </call-class-method>
            <if-compare field="isEmail" operator="equals" value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="EmailAddressNotFormattedCorrectlyError"/>
                <string-to-list string="${tempErrorMessage}" message-field="emailAddress" list="error_list"/>
            </if-compare>
        </if-not-empty>

        <!-- validating Phones -->
        <if>
            <condition>
                <or>
                    <if-compare value="CAN" operator="equals" field="parameters.USER_country"></if-compare>
                    <if-compare value="USA" operator="equals" field="parameters.USER_country"></if-compare>
                </or>
            </condition>
            <then>
                <!-- validating Home Phone -->
                 <call-simple-method method-name="validatePhoneHome"/>

                <!-- Check the Mobile Phone -->
                 <call-simple-method method-name="validatePhoneMobile"/>
                <!-- Check the work Phone -->
                 <call-simple-method method-name="validatePhoneWork"/>
            </then>
        <else>
                <!-- validating Home Phone -->
                 <call-simple-method method-name="validatePhoneHomeOther"/>

                <!-- Check the Mobile Phone -->
                 <call-simple-method method-name="validatePhoneMobileOther"/>
                <!-- Check the work Phone -->
                 <call-simple-method method-name="validatePhoneWorkOther"/>
        </else>
        </if>

        <!-- validating Title -->
        <if-compare field="parameters.personalTitle_mandatory" operator="equals" value="Y">
            <if-empty field="parameters.personalTitle">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="TitleMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="personalTitle" list="error_list"/>
            </if-empty>
        </if-compare>
        <!-- validating Gender -->
        <if-compare field="parameters.gender_mandatory" operator="equals" value="Y">
            <if-empty field="parameters.gender">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="GenderMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="gender" list="error_list"/>
            </if-empty>
        </if-compare>

        <!-- DOB Short(MMDD) validation -->
        <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
            <field field="parameters.dobShortDayUs"/>
            <field field="parameters.dobShortMonthUs"/>
            <string value="1972"/>
            <string value="MMDD"/>
            <field field="parameters.DOB_MMDD_MANDATORY"/>
        </call-class-method>
        <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
            <if-compare field="checkDateOfBirthResult" operator="equals" value="missing">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MissingDobDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="dobShortDayUs" list="error_list"/>
                <string-to-list string="" message-field="dobShortMonthUs" list="error_list"/>
            </if-compare>
            <if-compare field="checkDateOfBirthResult" operator="equals" value="invalid">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidDobDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="dobShortDayUs" list="error_list"/>
                <string-to-list string="" message-field="dobShortMonthUs" list="error_list"/>
            </if-compare>
        </if-compare>

        <!-- DOB Long(MMDDYYYY) validation -->
        <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
            <field field="parameters.dobLongDayUs"/>
            <field field="parameters.dobLongMonthUs"/>
            <field field="parameters.dobLongYearUs"/>
            <string value="MMDDYYYY"/>
            <field field="parameters.DOB_MMDDYYYY_MANDATORY"/>
        </call-class-method>
        <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
            <if-compare field="checkDateOfBirthResult" operator="equals" value="missing">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MissingDobDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="dobLongDayUs" list="error_list"/>
                <string-to-list string="" message-field="dobLongMonthUs" list="error_list"/>
                <string-to-list string="" message-field="dobLongYearUs" list="error_list"/>
            </if-compare>
            <if-compare field="checkDateOfBirthResult" operator="equals" value="invalid">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidDobDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="dobLongDayUs" list="error_list"/>
                <string-to-list string="" message-field="dobLongMonthUs" list="error_list"/>
                <string-to-list string="" message-field="dobLongYearUs" list="error_list"/>
            </if-compare>
        </if-compare>
        
        <!-- DOB Short(DDMM) validation -->
        <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
            <field field="parameters.dobShortDayUk"/>
            <field field="parameters.dobShortMonthUk"/>
            <string value="1972"/>
            <string value="DDMM"/>
            <field field="parameters.DOB_DDMM_MANDATORY"/>
        </call-class-method>
        <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
            <if-compare field="checkDateOfBirthResult" operator="equals" value="missing">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MissingDobDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="dobShortDayUk" list="error_list"/>
                <string-to-list string="" message-field="dobShortMonthUk" list="error_list"/>
            </if-compare>
            <if-compare field="checkDateOfBirthResult" operator="equals" value="invalid">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidDobDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="dobShortDayUk" list="error_list"/>
                <string-to-list string="" message-field="dobShortMonthUk" list="error_list"/>
            </if-compare>
        </if-compare>
        
         <!-- DOB Long(DDMMYYYY) validation -->
        <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
            <field field="parameters.dobLongDayUk"/>
            <field field="parameters.dobLongMonthUk"/>
            <field field="parameters.dobLongYearUk"/>
            <string value="DDMMYYYY"/>
            <field field="parameters.DOB_DDMMYYYY_MANDATORY"/>
        </call-class-method>
        <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
            <if-compare field="checkDateOfBirthResult" operator="equals" value="missing">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MissingDobDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="dobLongDayUk" list="error_list"/>
                <string-to-list string="" message-field="dobLongMonthUk" list="error_list"/>
                <string-to-list string="" message-field="dobLongYearUk" list="error_list"/>
            </if-compare>
            <if-compare field="checkDateOfBirthResult" operator="equals" value="invalid">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidDobDateError"/>
                <string-to-list string="${tempErrorMessage}" message-field="dobLongDayUk" list="error_list"/>
                <string-to-list string="" message-field="dobLongMonthUk" list="error_list"/>
                <string-to-list string="" message-field="dobLongYearUk" list="error_list"/>
            </if-compare>
        </if-compare>
                    
        <!-- Check address fields on the Billing Address -->
         <if-compare field="parameters.billing_fullName_mandatory" operator="equals" value="Y">
        	<if-empty field="parameters.billing_firstName">
        		<property-to-field field="field" resource="OSafeUiLabels" property="FirstNameCaption"/>
        		<call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
	                <field field="field"/>
	            </call-class-method>
        		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankBillingAddressGenericError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="billing_firstName" list="error_list"/>
        	</if-empty>
        	<if-empty field="parameters.billing_lastName">
        		<property-to-field field="field" resource="OSafeUiLabels" property="LastNameCaption"/>
        		<call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
	                <field field="field"/>
	            </call-class-method>
        		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankBillingAddressGenericError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="billing_lastName" list="error_list"/>
        	</if-empty>
        </if-compare>
        <if-not-empty field="parameters.billing_firstName">
            <set field="parameters.billing_fullName" value="${parameters.billing_firstName}"/>
        </if-not-empty>
        <if-not-empty field="parameters.billing_lastName">
            <if-not-empty field="parameters.billing_firstName">
                <set field="parameters.billing_fullName" value="${parameters.billing_firstName} ${parameters.billing_lastName}"/>
            <else>
                <set field="parameters.billing_fullName" value="${parameters.billing_lastName}"/>
            </else>
            </if-not-empty>
        </if-not-empty>

        <if-compare field="parameters.billing_attnName_mandatory" operator="equals" value="Y">
	        <if-empty field="parameters.billing_attnName">
	            <property-to-field field="field" resource="OSafeUiLabels" property="AddressNickNameCaption"/>
	            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
	                <field field="field"/>
	            </call-class-method>
        		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankBillingAddressGenericError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="billing_attnName" list="error_list"/>
	        </if-empty>
        </if-compare>

        <if-compare field="parameters.billing_address1_mandatory" operator="equals" value="Y">
            <if-empty field="parameters.billing_address1">
                <property-to-field field="field" resource="OSafeUiLabels" property="AddressLine1Caption"/>
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
	                <field field="field"/>
	            </call-class-method>
        		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankBillingAddressGenericError"/>
                <string-to-list string="${tempErrorMessage}" message-field="billing_address1" list="error_list"/>
            </if-empty>
        </if-compare>

        <if-compare field="parameters.billing_city_mandatory" operator="equals" value="Y">
            <if-empty field="parameters.billing_city">
                <property-to-field field="field" resource="OSafeUiLabels" property="TownOrCityCaption"/>
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
	                <field field="field"/>
	            </call-class-method>
        		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankBillingAddressGenericError"/>
                <string-to-list string="${tempErrorMessage}" message-field="billing_city" list="error_list"/>
            </if-empty>
        </if-compare>
        
        <if-compare field="parameters.billing_postalCode_mandatory" operator="equals" value="Y">
            <if-empty field="parameters.billing_postalCode">
                <property-to-field field="field" resource="OSafeUiLabels" property="PostalCodeOrZipCaption"/>
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
	                <field field="field"/>
	            </call-class-method>
        		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankBillingAddressGenericError"/>
                <string-to-list string="${tempErrorMessage}" message-field="billing_postalCode" list="error_list"/>
            </if-empty>
        </if-compare>
        <if-not-empty field="parameters.billing_postalCode">
            <if-compare value="USA" operator="equals" field="parameters.billing_country">
                <call-class-method class-name="com.osafe.util.Util"  method-name="isZipCode" ret-field="isZipCode">
                    <field field="parameters.billing_postalCode"/>
                </call-class-method>
            </if-compare>
            <if-compare field="isZipCode" operator="equals"  value="false">
            	<property-to-field field="field" resource="OSafeUiLabels" property="PostalCodeOrZipCaption"/>
            	<call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
	                <field field="field"/>
	            </call-class-method>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidBillingPostalCodeError"/>
                <string-to-list string="${tempErrorMessage}" message-field="billing_postalCode" list="error_list"/>
            </if-compare>
        </if-not-empty>
        
        <!-- if a country has States than state is mandatory. -->
         <call-class-method class-name="org.ofbiz.common.CommonWorkers"  method-name="getAssociatedStateList" ret-field="statesList">
             <field field="delegator" type="org.ofbiz.entity.Delegator"/>
             <field field="parameters.billing_country"/>
         </call-class-method>
        <if-compare field="parameters.billing_state_mandatory" operator="equals" value="Y">
            <if-not-empty field="statesList">
                <if-empty field="parameters.billing_state">
                    <property-to-field field="field" resource="OSafeUiLabels" property="StateOrProvinceCaption"/>
                    <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
	                <field field="field"/>
	            </call-class-method>
        			<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankBillingAddressGenericError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="billing_state" list="error_list"/>
                </if-empty>
            </if-not-empty>
        </if-compare>

        <!-- Check address fields on the Shipping Address -->
        <if-empty field="parameters.isSameAsBilling">
        	<if-not-empty field="parameters.shipping_firstName">
	            <set field="parameters.shipping_fullName" value="${parameters.shipping_firstName}"/>
	        </if-not-empty>
	        <if-not-empty field="parameters.shipping_lastName">
	            <if-not-empty field="parameters.shipping_firstName">
	                <set field="parameters.shipping_fullName" value="${parameters.shipping_firstName} ${parameters.shipping_lastName}"/>
	            <else>
	                <set field="parameters.shipping_fullName" value="${parameters.shipping_lastName}"/>
	            </else>
	            </if-not-empty>
	        </if-not-empty>
	        
	        <if-compare field="parameters.shipping_attnName_mandatory" operator="equals" value="Y">
	            <if-empty field="parameters.shipping_attnName">
	                <property-to-field field="field" resource="OSafeUiLabels" property="AddressNickNameCaption"/>
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
		                <field field="field"/>
		            </call-class-method>
        			<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankShippingAddressGenericError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="shipping_attnName" list="error_list"/>
	            </if-empty>
	         </if-compare>
	         <!-- Check that Billing and Shipping Nicknames are different -->
	         <if-not-empty field="parameters.billing_attnName">
	         	<if-not-empty field="parameters.shipping_attnName">
	         		<call-object-method method-name="toUpperCase" obj-field="parameters.billing_attnName" ret-field="billingPostalAddressAttnName"/>
	           		<call-object-method method-name="toUpperCase" obj-field="parameters.shipping_attnName" ret-field="shippingPostalAddressAttnName"/>
	           		<if-compare-field operator="equals" field="billingPostalAddressAttnName" to-field="shippingPostalAddressAttnName">
				        <set from-field="parameters.shipping_attnName" field="nickName"/>
				         <property-to-field field="field" resource="OSafeUiLabels" property="AddressNickNameCaption"/>
				         <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
			                <field field="field"/>
			            </call-class-method>
				        <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="AddressNickNameUniqueError"/>
				        <string-to-list string="${tempErrorMessage}" message-field="shipping_attnName" list="error_list"/>
	           		</if-compare-field>
	         	</if-not-empty>
	         </if-not-empty>

	        <if-compare field="parameters.shipping_address1_mandatory" operator="equals" value="Y">
	            <if-empty field="parameters.shipping_address1">
	                <property-to-field field="field" resource="OSafeUiLabels" property="AddressLine1Caption"/>
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
		                <field field="field"/>
		            </call-class-method>
        			<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankShippingAddressGenericError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="shipping_address1" list="error_list"/>
	            </if-empty>
	        </if-compare>
	        
	        <if-compare field="parameters.shipping_city_mandatory" operator="equals" value="Y">
	            <if-empty field="parameters.shipping_city">
	                <property-to-field field="field" resource="OSafeUiLabels" property="TownOrCityCaption"/>
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
		                <field field="field"/>
		            </call-class-method>
        			<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankShippingAddressGenericError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="shipping_city" list="error_list"/>
	            </if-empty>
	        </if-compare>
	        
	        <if-compare field="parameters.shipping_postalCode_mandatory" operator="equals" value="Y">
	            <if-empty field="parameters.shipping_postalCode">
	                <property-to-field field="field" resource="OSafeUiLabels" property="PostalCodeOrZipCaption"/>
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
		                <field field="field"/>
		            </call-class-method>
        			<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankShippingAddressGenericError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="shipping_postalCode" list="error_list"/>
	            </if-empty>
	        </if-compare>
	        <if-not-empty field="parameters.shipping_postalCode">
	            <if-compare value="USA" operator="equals" field="parameters.shipping_country">
	                <call-class-method class-name="com.osafe.util.Util"  method-name="isZipCode" ret-field="isZipCode">
	                    <field field="parameters.shipping_postalCode"/>
	                </call-class-method>
	            </if-compare>
	            <if-compare field="isZipCode" operator="equals"  value="false">
		            <property-to-field field="field" resource="OSafeUiLabels" property="PostalCodeOrZipCaption"/>
		            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
		                <field field="field"/>
		            </call-class-method>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidShippingPostalCodeError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="shipping_postalCode" list="error_list"/>
	            </if-compare>
	        </if-not-empty>
	        
	        <!-- if a country has States than state is mandatory. -->
	         <call-class-method class-name="org.ofbiz.common.CommonWorkers"  method-name="getAssociatedStateList" ret-field="statesList">
	             <field field="delegator" type="org.ofbiz.entity.Delegator"/>
	             <field field="parameters.shipping_country"/>
	         </call-class-method>
	        <if-compare field="parameters.shipping_state_mandatory" operator="equals" value="Y">
	            <if-not-empty field="statesList">
	                <if-empty field="parameters.shipping_state">
	                    <property-to-field field="field" resource="OSafeUiLabels" property="StateOrProvinceCaption"/>
	                    <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
			                <field field="field"/>
			            </call-class-method>
        				<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankShippingAddressGenericError"/>
	                    <string-to-list string="${tempErrorMessage}" message-field="shipping_state" list="error_list"/>
	                </if-empty>
	            </if-not-empty>
	        </if-compare>
	        
        </if-empty>
        
        <!-- Validate Website Login -->
        <call-simple-method method-name="validateWebsiteLogin" xml-resource="component://osafeadmin/script/com/osafeadmin/events/OsafeAdminValidationEvents.xml"/>
        
        <!-- Validate Custom Party Attributes -->
            <property-to-field resource="OsafeProperties" property="ecommerceUiSequenceXmlFile" field="XmlFileStr"/>
            <set field="XmlFilePath" value="${groovy: org.ofbiz.base.util.string.FlexibleStringExpander.expandString(XmlFileStr, context)}" type="String"/>
            
            <set field="searchRestrictionMap" type="NewMap"/>
            <set field="searchRestrictionMap.screen" value="Y" />
            <set field="searchIgnoreCase" value="true" type="Boolean"/>
            <set field="searchPartial" value="false" type="Boolean"/>
            <set field="useCache" value="false" type="Boolean"/>
            <set field="uiSequenceScreen" value="PersonalInfo" type="String"/>
            
            <call-class-method class-name="com.osafe.services.OsafeManageXml" method-name="getSearchListFromXmlFile" ret-field="uiSequenceSearchList">
                <field field="XmlFilePath" type="String"/>
                <field field="searchRestrictionMap" type="Map"/>
                <field field="uiSequenceScreen" type="String"/>
                <field field="searchIgnoreCase"  type="boolean" />
                <field field="searchPartial"  type="boolean" />
                <field field="useCache"  type="boolean" />
            </call-class-method>
            <set field="partyCustomAttributeActive" value="false"/>
            <iterate entry="uiSequenceSearchScreen" list="uiSequenceSearchList">
                <if-compare operator="equals" value="personalInfoCustomAttributes" field="uiSequenceSearchScreen.key">
                    <if-compare operator="not-equals" value="0" field="uiSequenceSearchScreen.value">
                        <set field="partyCustomAttributeActive" value="true"/>
                    </if-compare>
                </if-compare>
            </iterate> 
            
            <if-compare operator="equals" value="true" field="partyCustomAttributeActive">
                <set field="getPartyCustomAttributeListCtx" type="NewMap"/>
                <set field="getPartyCustomAttributeListCtx.useCache" value="false" type="String"/>
                <call-service service-name="getPartyCustomAttributeList" in-map-name="getPartyCustomAttributeListCtx">
                    <result-to-field result-name="customPartyAttributeList" field="customPartyAttributeList"/>
                </call-service>
	            
	            <set field="attrNo" value="0" type="Integer"/>
	            
	            <iterate entry="customPartyAttributeMap" list="customPartyAttributeList">
	                <set field="errorOnField" value="false"/>
	                <set field="requiredMessage" from-field="customPartyAttributeMap.ReqMessage"/>
	                <property-to-field field="dateCompletionErrorMessage" resource="OSafeAdminUiLabels" property="DateCompletionError"/>
	                <if>
                    <condition>
                        <or>
                            <if-compare operator="equals" value="Y" field="customPartyAttributeMap.Mandatory"/>
                            <if-compare operator="equals" value="Yes" field="customPartyAttributeMap.Mandatory"/>
                            <if-compare operator="equals" value="DATE_MMDD" field="customPartyAttributeMap.Type"/>
                            <if-compare operator="equals" value="DATE_MMDDYYYY" field="customPartyAttributeMap.Type"/>
                            <if-compare operator="equals" value="DATE_DDMM" field="customPartyAttributeMap.Type"/>
                            <if-compare operator="equals" value="DATE_DDMMYYYY" field="customPartyAttributeMap.Type"/>
                        </or>
                    </condition>
                    <then>
                        <if>
		                <condition> 
		                    <if-compare operator="equals" value="DATE_MMDD" field="customPartyAttributeMap.Type"/>
		                </condition>
		                <then>
		                    <!-- DOB Short(MMDD) validation -->
					        <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
					            <field field="paramMap.${customPartyAttributeMap.AttrName}_DD"/>
					            <field field="paramMap.${customPartyAttributeMap.AttrName}_MM"/>
					            <string value="1972"/>
					            <string value="MMDD"/>
					            <field field="customPartyAttributeMap.Mandatory"/>
					        </call-class-method>
					        <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
					            <if-compare field="checkDateOfBirthResult" operator="equals" value="missing">
					                <set field="errorOnField" value="true"/>
					                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MissingDobDateError"/>
					                <string-to-list string="${tempErrorMessage}" message-field="" list="error_list"/>
					            </if-compare>
					            <if-compare field="checkDateOfBirthResult" operator="equals" value="invalid">
					                <set field="errorOnField" value="true"/>
					                <if-compare operator="not-equals" value="Y" field="customPartyAttributeMap.Mandatory">
				                        <set field="requiredMessage" from-field="dateCompletionErrorMessage"/>
				                    </if-compare>
					            </if-compare>
					        </if-compare>
		                </then>
		                <else-if>
		                    <condition>
		                        <if-compare operator="equals" value="DATE_MMDDYYYY" field="customPartyAttributeMap.Type"/>
		                    </condition>
		                <then>
		                    <!-- DOB Long(MMDDYYYY) validation -->
					        <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
					            <field field="paramMap.${customPartyAttributeMap.AttrName}_DD"/>
					            <field field="paramMap.${customPartyAttributeMap.AttrName}_MM"/>
					            <field field="paramMap.${customPartyAttributeMap.AttrName}_YYYY"/>
					            <string value="MMDDYYYY"/>
					            <field field="customPartyAttributeMap.Mandatory"/>
					        </call-class-method>
					        <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
					            <if-compare field="checkDateOfBirthResult" operator="equals" value="missing">
					                <set field="errorOnField" value="true"/>
					                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MissingDobDateError"/>
					                <string-to-list string="${tempErrorMessage}" message-field="" list="error_list"/>
					            </if-compare>
					            <if-compare field="checkDateOfBirthResult" operator="equals" value="invalid">
					                <set field="errorOnField" value="true"/>
					                <if-compare operator="not-equals" value="Y" field="customPartyAttributeMap.Mandatory">
				                        <set field="requiredMessage" from-field="dateCompletionErrorMessage"/>
				                    </if-compare>
					        	</if-compare>
                            </if-compare>
		                </then>
		                </else-if>
		                <else-if>
		                    <condition>
		                        <if-compare operator="equals" value="DATE_DDMM" field="customPartyAttributeMap.Type"/>
		                    </condition>
		                <then>
		                    <!-- DOB Short(DDMM) validation -->
					        <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
					            <field field="paramMap.${customPartyAttributeMap.AttrName}_DD"/>
					            <field field="paramMap.${customPartyAttributeMap.AttrName}_MM"/>
					            <string value="1972"/>
					            <string value="DDMM"/>
					            <field field="customPartyAttributeMap.Mandatory"/>
					        </call-class-method>
					        <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
					            <if-compare field="checkDateOfBirthResult" operator="equals" value="missing">
					                <set field="errorOnField" value="true"/>
					                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MissingDobDateError"/>
					                <string-to-list string="${tempErrorMessage}" message-field="" list="error_list"/>
					            </if-compare>
					            <if-compare field="checkDateOfBirthResult" operator="equals" value="invalid">
					                <set field="errorOnField" value="true"/>
					                <if-compare operator="not-equals" value="Y" field="customPartyAttributeMap.Mandatory">
				                        <set field="requiredMessage" from-field="dateCompletionErrorMessage"/>
				                    </if-compare>
					            </if-compare>
					        </if-compare>
        
		                </then>
		                </else-if>
		                <else-if>
		                    <condition>
		                        <if-compare operator="equals" value="DATE_DDMMYYYY" field="customPartyAttributeMap.Type"/>
		                    </condition>
		                <then>
		                    <!-- DOB Long(DDMMYYYY) validation -->
					        <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="checkDateOfBirth" ret-field="checkDateOfBirthResult">
					            <field field="paramMap.${customPartyAttributeMap.AttrName}_DD"/>
					            <field field="paramMap.${customPartyAttributeMap.AttrName}_MM"/>
					            <field field="paramMap.${customPartyAttributeMap.AttrName}_YYYY"/>
					            <string value="DDMMYYYY"/>
					            <field field="customPartyAttributeMap.Mandatory"/>
					        </call-class-method>
					        <if-compare field="checkDateOfBirthResult" operator="not-equals" value="success">
					            <if-compare field="checkDateOfBirthResult" operator="equals" value="missing">
					                <set field="errorOnField" value="true"/>
					                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MissingDobDateError"/>
					                <string-to-list string="${tempErrorMessage}" message-field="" list="error_list"/>
					            </if-compare>
					            <if-compare field="checkDateOfBirthResult" operator="equals" value="invalid">
					                <set field="errorOnField" value="true"/>
					                <if-compare operator="not-equals" value="Y" field="customPartyAttributeMap.Mandatory">
				                        <set field="requiredMessage" from-field="dateCompletionErrorMessage"/>
				                    </if-compare>
					            </if-compare>
					        </if-compare>
		                </then>
		                </else-if>
		                <else>
		                    <set field="attrValue" from-field="paramMap.${customPartyAttributeMap.AttrName}"/>
		                    <if-empty field="paramMap.${customPartyAttributeMap.AttrName}">
		                        <set field="errorOnField" value="true"/>
		                    </if-empty>
		                </else>
		                </if>
		                <if-compare operator="equals" value="true" field="errorOnField">
		                    <if>
		                        <condition> 
		                            <if-compare operator="equals" value="0" field="attrNo"/>
		                        </condition>
		                        <then>
		                            <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_0" list="error_list"/>
		                        </then>
		                        <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="1" field="attrNo"/>
				                    </condition>
			                    <then>
			                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_1" list="error_list"/>
			                    </then>
				                </else-if>
		                        <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="2" field="attrNo"/>
				                    </condition>
			                    <then>
			                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_2" list="error_list"/>
			                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="3" field="attrNo"/>
				                    </condition>
				                <then>
				                    <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_3" list="error_list"/>
				                </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="4" field="attrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_4" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="5" field="attrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_5" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="6" field="attrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_6" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="7" field="attrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_7" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="8" field="attrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_8" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="9" field="attrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_9" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="10" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_10" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="11" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_11" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="12" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_12" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="13" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_13" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="14" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_14" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="15" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_15" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="16" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_16" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="17" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_17" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="18" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_18" list="error_list"/>
				                    </then>
				                </else-if>
				                <else-if>
				                    <condition> 
				                        <if-compare operator="equals" value="19" field="attrNoattrNo"/>
				                    </condition>
				                    <then>
				                        <string-to-list string="${requiredMessage}" message-field="FIELD_ERROR_19" list="error_list"/>
				                    </then>
				                </else-if>
		                    </if>
		                </if-compare>
                    </then>
                    </if>
	                
	                <calculate field="attrNo">
                        <calcop operator="add" >
                            <calcop operator="get" field="attrNo"/>
                            <number value="1"/>
                        </calcop>
                    </calculate>
	            </iterate>
            </if-compare>

        <check-errors/>

        <!-- create party -->
        <make-value value-field="createPartyEntity" entity-name="Party"/>
        <set-pk-fields map="parameters" value-field="createPartyEntity"/>
        <set-nonpk-fields map="parameters" value-field="createPartyEntity"/>
        <set field="createPartyEntity.partyTypeId" value="PERSON"/>
        <now-timestamp field="createPartyEntity.createdDate"/> 
        <create-value value-field="createPartyEntity"/>

        <!-- create person -->
        <make-value value-field="createPersonEntity" entity-name="Person"/>
        <set-pk-fields map="parameters" value-field="createPersonEntity"/>
        <set-nonpk-fields map="parameters" value-field="createPersonEntity"/>
        <create-value value-field="createPersonEntity"/>

        <!-- create party role -->
        <set-service-fields service-name="createPartyRole" to-map="partyRoleContext" map="parameters"/>
        <call-service service-name="createPartyRole" in-map-name="partyRoleContext"/>
        
        <if-not-empty field="parameters.organizationPartyId">
            <set-service-fields service-name="createPartyRelationship" to-map="createPartyRelationshipContext" map="parameters"/>
            <set field="createPartyRelationshipContext.partyIdFrom" from-field="parameters.organizationPartyId"/>
            <set field="createPartyRelationshipContext.partyIdTo" from-field="parameters.partyId"/>
            <set field="createPartyRelationshipContext.roleTypeIdFrom" value="INTERNAL_ORGANIZATIO"/>
            <set field="createPartyRelationshipContext.roleTypeIdTo" value="CUSTOMER"/>
            <set field="createPartyRelationshipContext.partyRelationshipTypeId" value="GROUP_ROLLUP"/>
            <call-service service-name="createPartyRelationship" in-map-name="createPartyRelationshipContext"/>
        </if-not-empty>
        
        <!-- create product store role -->
        <make-value entity-name="ProductStoreRole" value-field="productStoreRole"/>
        <set field="productStoreRole.partyId" from-field="parameters.partyId"/>
        <set field="productStoreRole.roleTypeId" from-field="parameters.roleTypeId"/>
        <set field="productStoreRole.productStoreId" from-field="parameters.productStoreId"/>
        <now-timestamp field="productStoreRole.fromDate"/>  
        <create-value value-field="productStoreRole"/>
        
        <!-- create Website  login -->
        <if-not-empty field="parameters.loginEmail">
        	<property-to-field resource="security" property="username.lowercase" default="false" field="username_lowercase"/>
	        <property-to-field resource="security" property="password.lowercase" default="false" field="password_lowercase"/>
	        <!-- if username and/or password should be lowercased, do that now -->
	        <if-compare field="username_lowercase" operator="equals" value="true">
	            <call-object-method obj-field="parameters.loginEmail" method-name="toLowerCase" ret-field="parameters.loginEmail"/>
	        </if-compare>
	        <if-compare field="password_lowercase" operator="equals" value="true">
	            <call-object-method obj-field="parameters.password" method-name="toLowerCase" ret-field="parameters.password"/>
	        </if-compare>
	        
	        <set-service-fields service-name="createUserLogin" to-map="createUserLoginContext" map="parameters"/>
	        <set field="createUserLoginContext.userLoginId" from-field="parameters.loginEmail"/>
	        <set field="createUserLoginContext.currentPassword" from-field="parameters.password"/>
	        <set field="createUserLoginContext.currentPasswordVerify" from-field="parameters.passwordConfirm"/>
	        <if-compare operator="equals" value="PARTY_DISABLED" field="parameters.statusId">
	            <set field="createUserLoginContext.enabled" value="N"/>
	        <else>
	            <set field="createUserLoginContext.enabled" value="Y"/>
	        </else>
	        </if-compare>
	        <call-service service-name="createUserLogin" in-map-name="createUserLoginContext"/>

            <!-- create email address from login email  (This code has to come after party role is created)-->
	        <set-service-fields service-name="createPartyEmailAddress" to-map="emailAddressContext" map="parameters"/>
	        <set value="PRIMARY_EMAIL" field="emailAddressContext.contactMechPurposeTypeId"/>
	        <set field="emailAddressContext.emailAddress" from-field="parameters.loginEmail"/>
            <call-service service-name="createPartyEmailAddress" in-map-name="emailAddressContext"/>
        </if-not-empty>
        
        <!-- email - address -->
        <if-not-empty field="parameters.emailAddress">
	        <set-service-fields service-name="createPartyEmailAddress" to-map="emailAddressContext" map="parameters"/>
	        <set value="PRIMARY_EMAIL" field="emailAddressContext.contactMechPurposeTypeId"/>
            <call-service service-name="createPartyEmailAddress" in-map-name="emailAddressContext"/>
        </if-not-empty>

        <!-- home phone -->
        <set-service-fields service-name="createPartyTelecomNumber" to-map="homePhoneContext" map="parameters"/>
        <set field="homePhoneContext.areaCode" from-field="parameters.phoneHomeArea"/>
        <set field="homePhoneContext.contactNumber" from-field="parameters.phoneHomeContact"/>
        <call-service service-name="createPartyTelecomNumber" in-map-name="homePhoneContext">
            <result-to-field result-name="contactMechId" field="homePhoneContext.contactMechId"/>
        </call-service>
        <set-service-fields service-name="createPartyContactMechPurpose" to-map="homePhonePurposeContext" map="parameters"/>
        <set field="homePhonePurposeContext.contactMechId" from-field="homePhoneContext.contactMechId"/>

        <set value="PHONE_HOME" field="homePhonePurposeContext.contactMechPurposeTypeId"/>
        <call-service service-name="createPartyContactMechPurpose" in-map-name="homePhonePurposeContext"/>
        <set value="PRIMARY_PHONE" field="homePhonePurposeContext.contactMechPurposeTypeId"/>
        <call-service service-name="createPartyContactMechPurpose" in-map-name="homePhonePurposeContext"/>

        <!-- mobile phone -->
        <if-not-empty field="parameters.phoneMobileContact">
            <set-service-fields service-name="createPartyTelecomNumber" to-map="mobilePhoneContext" map="parameters"/>
            <set field="mobilePhoneContext.areaCode" from-field="parameters.phoneMobileArea"/>
            <set field="mobilePhoneContext.contactNumber" from-field="parameters.phoneMobileContact"/>
            <call-service service-name="createPartyTelecomNumber" in-map-name="mobilePhoneContext">
                <result-to-field result-name="contactMechId" field="mobilePhoneContext.contactMechId"/>
            </call-service>

            <set-service-fields service-name="createPartyContactMechPurpose" to-map="mobilePhonePurposeContext" map="parameters"/>
            <set field="mobilePhonePurposeContext.contactMechId" from-field="mobilePhoneContext.contactMechId"/>
            <set value="PHONE_MOBILE" field="mobilePhonePurposeContext.contactMechPurposeTypeId"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="mobilePhonePurposeContext"/>
        </if-not-empty>

        <!-- work phone -->
        <if-not-empty field="parameters.phoneWorkContact">
            <set-service-fields service-name="createPartyTelecomNumber" to-map="workPhoneContext" map="parameters"/>
            <set field="workPhoneContext.areaCode" from-field="parameters.phoneWorkArea"/>
            <set field="workPhoneContext.contactNumber" from-field="parameters.phoneWorkContact"/>
            <set field="workPhoneContext.extension" from-field="parameters.phoneWorkExt"/>
            <call-service service-name="createPartyTelecomNumber" in-map-name="workPhoneContext">
                <result-to-field result-name="contactMechId" field="workPhoneContext.contactMechId"/>
            </call-service>

            <set-service-fields service-name="createPartyContactMechPurpose" to-map="workPhonePurposeContext" map="parameters"/>
            <set field="workPhonePurposeContext.contactMechId" from-field="workPhoneContext.contactMechId"/>
            <set value="PHONE_WORK" field="workPhonePurposeContext.contactMechPurposeTypeId"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="workPhonePurposeContext"/>
        </if-not-empty>

        <!-- CREATE BILLING ADDRESS -->
        <!--Set the Value for City and Postal Code if they are empty as they are required fields by the service -->
        <if>
                <condition>
                    <or>
                        <if-compare value="CAN" operator="equals" field="parameters.billing_country"></if-compare>
                        <if-compare value="USA" operator="equals" field="parameters.billing_country"></if-compare>
                    </or>
                </condition>
                <then></then>
                <else>
                    <if-empty field="parameters.billing_city">
                        <set field="parameters.billing_city" value="_NA_"/>
                    </if-empty>
                    <if-empty field="parameters.billing_postalCode">
                        <set field="parameters.billing_postalCode" value="_NA_"/>
                    </if-empty>
                </else>
        </if>
        
        <set-service-fields service-name="createUpdatePartyPostalAddress" to-map="createUpdatePartyPostalAddressctx" map="parameters"/>
        <set field="createUpdatePartyPostalAddressctx.toName" from-field="parameters.billing_fullName"/>
        <set field="createUpdatePartyPostalAddressctx.countryGeoId" from-field="parameters.billing_country"/>
        <set field="createUpdatePartyPostalAddressctx.attnName" from-field="parameters.billing_attnName"/>
        <set field="createUpdatePartyPostalAddressctx.address1" from-field="parameters.billing_address1"/>
        <set field="createUpdatePartyPostalAddressctx.address2" from-field="parameters.billing_address2"/>
        <set field="createUpdatePartyPostalAddressctx.address3" from-field="parameters.billing_address3"/>
        <set field="createUpdatePartyPostalAddressctx.city" from-field="parameters.billing_city"/>
        <set field="createUpdatePartyPostalAddressctx.stateProvinceGeoId" from-field="parameters.billing_state"/>
        <set field="createUpdatePartyPostalAddressctx.postalCode" from-field="parameters.billing_postalCode"/>
        <call-service service-name="createUpdatePartyPostalAddress" in-map-name="createUpdatePartyPostalAddressctx">
                <result-to-field result-name="contactMechId" field="addressPurposeContext.contactMechId"/>
        </call-service>
        <!-- create the billing location -->
        <set field="addressPurposeContext.contactMechPurposeTypeId" value="BILLING_LOCATION"/>
        <set field="addressPurposeContext.partyId" from-field="parameters.partyId" />
        <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>
        
        <if-empty field="parameters.isSameAsBilling">
	        <!-- CREATE SHIPPING ADDRESS -->
	        <!--Set the Value for City and Postal Code if they are empty as they are required fields by the service -->
	        <if>
	                <condition>
	                    <or>
	                        <if-compare value="CAN" operator="equals" field="parameters.shipping_country"></if-compare>
	                        <if-compare value="USA" operator="equals" field="parameters.shipping_country"></if-compare>
	                    </or>
	                </condition>
	                <then></then>
	                <else>
	                    <if-empty field="parameters.shipping_city">
	                        <set field="parameters.shipping_city" value="_NA_"/>
	                    </if-empty>
	                    <if-empty field="parameters.shipping_postalCode">
	                        <set field="parameters.shipping_postalCode" value="_NA_"/>
	                    </if-empty>
	                </else>
	        </if>
	        <set-service-fields service-name="createUpdatePartyPostalAddress" to-map="createUpdatePartyPostalAddressctx" map="parameters"/>
	        <set field="createUpdatePartyPostalAddressctx.toName" from-field="parameters.shipping_fullName"/>
	        <set field="createUpdatePartyPostalAddressctx.countryGeoId" from-field="parameters.shipping_country"/>
	        <set field="createUpdatePartyPostalAddressctx.attnName" from-field="parameters.shipping_attnName"/>
	        <set field="createUpdatePartyPostalAddressctx.address1" from-field="parameters.shipping_address1"/>
	        <set field="createUpdatePartyPostalAddressctx.address2" from-field="parameters.shipping_address2"/>
	        <set field="createUpdatePartyPostalAddressctx.address3" from-field="parameters.shipping_address3"/>
	        <set field="createUpdatePartyPostalAddressctx.city" from-field="parameters.shipping_city"/>
	        <set field="createUpdatePartyPostalAddressctx.stateProvinceGeoId" from-field="parameters.shipping_state"/>
	        <set field="createUpdatePartyPostalAddressctx.postalCode" from-field="parameters.shipping_postalCode"/>
	        <else>
	            <property-to-field field="defaultShippingAttnName" resource="OSafeAdminUiLabels" property="ShippingAddressDefaultNickNameLabel"/>
	            <set field="createUpdatePartyPostalAddressctx.attnName" from-field="defaultShippingAttnName"/>
	        </else>
        </if-empty>
        <call-service service-name="createUpdatePartyPostalAddress" in-map-name="createUpdatePartyPostalAddressctx">
                <result-to-field result-name="contactMechId" field="addressPurposeContext.contactMechId"/>
        </call-service>
        <!-- create the shipping location -->
        <set field="addressPurposeContext.contactMechPurposeTypeId" value="SHIPPING_LOCATION"/>
        <set field="addressPurposeContext.partyId" from-field="parameters.partyId" />
        <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>
        <!-- also consider this address the general correspondence address -->
        <set value="GENERAL_LOCATION" field="addressPurposeContext.contactMechPurposeTypeId"/>
        <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>

        <!-- create/Update party attribute -->
        <call-simple-method method-name="createUpdatePartyAttributes"/>
        
        <call-simple-method method-name="createUpdateCustomPartyAttributes"/>
        
        <property-to-field field="tempSuccessMessage" resource="OSafeAdminUiLabels" property="UpdatedSuccess"/>
        <string-to-list string="${tempSuccessMessage}"  list="successMessageList"/>
        <field-to-request field="successMessageList" request-name="osafeSuccessMessageList"/>
        
        
        <if-not-empty field="parameters.existingOrganizationId">
            <field-to-request field="parameters.existingOrganizationId" request-name="partyId"/>
        </if-not-empty>
        
    </simple-method>
    
    
    <simple-method method-name="updateOrganization" short-description="Update Organization">
    
        <!-- Validating group name -->
        <if-empty field="parameters.groupName">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankOrganizationNameError"/>
	        <string-to-list string="${tempErrorMessage}" message-field="groupName" list="error_list"/>
        </if-empty>
        
        <check-errors/>
        
        <!-- update PartyGroup -->
        <set-service-fields service-name="updatePartyGroup" to-map="updatePartyGroupCtx" map="parameters"/>
        <call-service service-name="updatePartyGroup" in-map-name="updatePartyGroupCtx"/>
        
        <if-not-empty field="parameters.partyId">
            <!-- REMOVE EXISTING PARTY RELATIONSHIP -->
            <entity-one entity-name="Party" value-field="party">
                <field-map field-name="partyId" from-field="parameters.partyId"/>
            </entity-one>
            
            <get-related relation-name="FromPartyRelationship" list="partyRelationships" value-field="party"/>
            <set field="filterMap.roleTypeIdTo" value="CUSTOMER"/>
            <filter-list-by-and list="partyRelationships" to-list="partyRelationships" map="filterMap"/>
            
            <iterate entry="partyRelationship" list="partyRelationships">
                <set field="deletePartyRelationshipContext.partyIdFrom" from-field="partyRelationship.partyIdFrom"/>
                <set field="deletePartyRelationshipContext.partyIdTo" from-field="partyRelationship.partyIdTo"/>
                <set field="deletePartyRelationshipContext.roleTypeIdFrom" from-field="partyRelationship.roleTypeIdFrom"/>
                <set field="deletePartyRelationshipContext.roleTypeIdTo" from-field="partyRelationship.roleTypeIdTo"/>
                <set field="deletePartyRelationshipContext.fromDate" from-field="partyRelationship.fromDate" type="Timestamp"/>
                <call-service service-name="deletePartyRelationship" in-map-name="deletePartyRelationshipContext"/>
            </iterate>
            
        </if-not-empty>
        
        <iterate-map key="organizationEmployeeIdKey" value="organizationEmployeeIdValue" map="parameters.organizationEmployeeId">
            
            <!-- Remove the relationship of  customer with any other organization -->
            
            <entity-one entity-name="Party" value-field="party">
                <field-map field-name="partyId" from-field="organizationEmployeeIdValue"/>
            </entity-one>
            
            <get-related relation-name="ToPartyRelationship" list="partyRelationships" value-field="party"/>
            <set field="filterMap.roleTypeIdFrom" value="INTERNAL_ORGANIZATIO"/>
            <filter-list-by-and list="partyRelationships" to-list="partyRelationships" map="filterMap"/>
            
            <iterate entry="partyRelationship" list="partyRelationships">
                <set field="deletePartyRelationshipContext.partyIdFrom" from-field="partyRelationship.partyIdFrom"/>
                <set field="deletePartyRelationshipContext.partyIdTo" from-field="partyRelationship.partyIdTo"/>
                <set field="deletePartyRelationshipContext.roleTypeIdFrom" from-field="partyRelationship.roleTypeIdFrom"/>
                <set field="deletePartyRelationshipContext.roleTypeIdTo" from-field="partyRelationship.roleTypeIdTo"/>
                <set field="deletePartyRelationshipContext.fromDate" from-field="partyRelationship.fromDate" type="Timestamp"/>
                <call-service service-name="deletePartyRelationship" in-map-name="deletePartyRelationshipContext"/>
            </iterate>
            
            <set-service-fields service-name="createPartyRelationship" to-map="createPartyRelationshipContext" map="parameters"/>
            <set field="createPartyRelationshipContext.partyIdFrom" from-field="parameters.partyId"/>
            <set field="createPartyRelationshipContext.partyIdTo" from-field="organizationEmployeeIdValue"/>
            <set field="createPartyRelationshipContext.roleTypeIdFrom" value="INTERNAL_ORGANIZATIO"/>
            <set field="createPartyRelationshipContext.roleTypeIdTo" value="CUSTOMER"/>
            <set field="createPartyRelationshipContext.partyRelationshipTypeId" value="GROUP_ROLLUP"/>
            <call-service service-name="createPartyRelationship" in-map-name="createPartyRelationshipContext"/>
            
        </iterate-map>
        
        <property-to-field field="tempSuccessMessage" resource="OSafeAdminUiLabels" property="UpdatedSuccess"/>
        <string-to-list string="${tempSuccessMessage}"  list="successMessageList"/>
        <field-to-request field="successMessageList" request-name="osafeSuccessMessageList"/>
    </simple-method>
    
    <simple-method method-name="createOrganization" short-description="create Customer">
        <set field="request" from-field="parameters.request"/>
        <call-class-method method-name="getParameterMap" class-name="org.ofbiz.base.util.UtilHttp" ret-field="paramMap">
            <field field="request" type="javax.servlet.http.HttpServletRequest"/>
        </call-class-method>
        <!-- validating customer id -->
        <if-empty field="parameters.partyId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankOrganizationIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="partyId" list="error_list"/>
        <else>
            <set field="startIndex" value="0" type="Integer"/>
            <set field="endIndex" value="1" type="Integer"/>
            <call-object-method method-name="substring" obj-field="parameters.partyId" ret-field="partyIdStartWith">
                <field field="startIndex" type="int"/>
                <field field="endIndex" type="int"/>
            </call-object-method>
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate" method-name="isInteger" ret-field="startsWithNumeric">
                    <string value="${partyIdStartWith}"></string>
            </call-class-method>
            
            <if-compare operator="equals" value="true" field="startsWithNumeric" type="Boolean">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="OrganizationIdNumericError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="partyId" list="error_list"/>
            <else>
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidId" ret-field="isValidId">
	                <field field="parameters.partyId"/>
	            </call-class-method>
	            <if-compare field="isValidId" operator="equals" value="true">
	                <entity-one entity-name="Party" value-field="existingParty">
	                    <field-map field-name="partyId" from-field="parameters.partyId"/>
	                </entity-one>
	                <if-not-empty field="existingParty">
	                    <set field="errorKey" from-field="parameters.partyId"/>
	                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="NewOrganizationIdExistError"/>
	                    <string-to-list string="${tempErrorMessage}" message-field="partyId" list="error_list"/>
	                </if-not-empty>
	            <else>
	                <set field="errorKey" from-field="parameters.partyId"/>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidIdError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="partyId" list="error_list"/>
	            </else>
	            </if-compare>
            </else>
            </if-compare>
            
        </else>
        </if-empty>
        
        <!-- Validating group name -->
        <if-empty field="parameters.groupName">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankOrganizationNameError"/>
	        <string-to-list string="${tempErrorMessage}" message-field="groupName" list="error_list"/>
        </if-empty>
        
        <!-- Check address fields on the Billing Address -->
         <if-compare field="parameters.billing_fullName_mandatory" operator="equals" value="Y">
        	<if-empty field="parameters.billing_firstName">
        		<property-to-field field="field" resource="OSafeUiLabels" property="FirstNameCaption"/>
        		<call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
	                <field field="field"/>
	            </call-class-method>
        		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankBillingAddressGenericError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="billing_firstName" list="error_list"/>
        	</if-empty>
        	<if-empty field="parameters.billing_lastName">
        		<property-to-field field="field" resource="OSafeUiLabels" property="LastNameCaption"/>
        		<call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
	                <field field="field"/>
	            </call-class-method>
        		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankBillingAddressGenericError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="billing_lastName" list="error_list"/>
        	</if-empty>
        </if-compare>
        <if-not-empty field="parameters.billing_firstName">
            <set field="parameters.billing_fullName" value="${parameters.billing_firstName}"/>
        </if-not-empty>
        <if-not-empty field="parameters.billing_lastName">
            <if-not-empty field="parameters.billing_firstName">
                <set field="parameters.billing_fullName" value="${parameters.billing_firstName} ${parameters.billing_lastName}"/>
            <else>
                <set field="parameters.billing_fullName" value="${parameters.billing_lastName}"/>
            </else>
            </if-not-empty>
        </if-not-empty>

        <if-compare field="parameters.billing_attnName_mandatory" operator="equals" value="Y">
	        <if-empty field="parameters.billing_attnName">
	            <property-to-field field="field" resource="OSafeUiLabels" property="AddressNickNameCaption"/>
	            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
	                <field field="field"/>
	            </call-class-method>
        		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankBillingAddressGenericError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="billing_attnName" list="error_list"/>
	        </if-empty>
        </if-compare>

        <if-compare field="parameters.billing_address1_mandatory" operator="equals" value="Y">
            <if-empty field="parameters.billing_address1">
                <property-to-field field="field" resource="OSafeUiLabels" property="AddressLine1Caption"/>
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
	                <field field="field"/>
	            </call-class-method>
        		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankBillingAddressGenericError"/>
                <string-to-list string="${tempErrorMessage}" message-field="billing_address1" list="error_list"/>
            </if-empty>
        </if-compare>

        <if-compare field="parameters.billing_city_mandatory" operator="equals" value="Y">
            <if-empty field="parameters.billing_city">
                <property-to-field field="field" resource="OSafeUiLabels" property="TownOrCityCaption"/>
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
	                <field field="field"/>
	            </call-class-method>
        		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankBillingAddressGenericError"/>
                <string-to-list string="${tempErrorMessage}" message-field="billing_city" list="error_list"/>
            </if-empty>
        </if-compare>
        
        <if-compare field="parameters.billing_postalCode_mandatory" operator="equals" value="Y">
            <if-empty field="parameters.billing_postalCode">
                <property-to-field field="field" resource="OSafeUiLabels" property="PostalCodeOrZipCaption"/>
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
	                <field field="field"/>
	            </call-class-method>
        		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankBillingAddressGenericError"/>
                <string-to-list string="${tempErrorMessage}" message-field="billing_postalCode" list="error_list"/>
            </if-empty>
        </if-compare>
        <if-not-empty field="parameters.billing_postalCode">
            <if-compare value="USA" operator="equals" field="parameters.billing_country">
                <call-class-method class-name="com.osafe.util.Util"  method-name="isZipCode" ret-field="isZipCode">
                    <field field="parameters.billing_postalCode"/>
                </call-class-method>
            </if-compare>
            <if-compare field="isZipCode" operator="equals"  value="false">
            	<property-to-field field="field" resource="OSafeUiLabels" property="PostalCodeOrZipCaption"/>
            	<call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
	                <field field="field"/>
	            </call-class-method>
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidBillingPostalCodeError"/>
                <string-to-list string="${tempErrorMessage}" message-field="billing_postalCode" list="error_list"/>
            </if-compare>
        </if-not-empty>
        
        <!-- if a country has States than state is mandatory. -->
         <call-class-method class-name="org.ofbiz.common.CommonWorkers"  method-name="getAssociatedStateList" ret-field="statesList">
             <field field="delegator" type="org.ofbiz.entity.Delegator"/>
             <field field="parameters.billing_country"/>
         </call-class-method>
        <if-compare field="parameters.billing_state_mandatory" operator="equals" value="Y">
            <if-not-empty field="statesList">
                <if-empty field="parameters.billing_state">
                    <property-to-field field="field" resource="OSafeUiLabels" property="StateOrProvinceCaption"/>
                    <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
	                <field field="field"/>
	            </call-class-method>
        			<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankBillingAddressGenericError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="billing_state" list="error_list"/>
                </if-empty>
            </if-not-empty>
        </if-compare>

        <!-- Check address fields on the Shipping Address -->
        <if-empty field="parameters.isSameAsBilling">
        	<if-not-empty field="parameters.shipping_firstName">
	            <set field="parameters.shipping_fullName" value="${parameters.shipping_firstName}"/>
	        </if-not-empty>
	        <if-not-empty field="parameters.shipping_lastName">
	            <if-not-empty field="parameters.shipping_firstName">
	                <set field="parameters.shipping_fullName" value="${parameters.shipping_firstName} ${parameters.shipping_lastName}"/>
	            <else>
	                <set field="parameters.shipping_fullName" value="${parameters.shipping_lastName}"/>
	            </else>
	            </if-not-empty>
	        </if-not-empty>
	        
	        <if-compare field="parameters.shipping_attnName_mandatory" operator="equals" value="Y">
	            <if-empty field="parameters.shipping_attnName">
	                <property-to-field field="field" resource="OSafeUiLabels" property="AddressNickNameCaption"/>
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
		                <field field="field"/>
		            </call-class-method>
        			<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankShippingAddressGenericError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="shipping_attnName" list="error_list"/>
	            </if-empty>
	         </if-compare>
	         <!-- Check that Billing and Shipping Nicknames are different -->
	         <if-not-empty field="parameters.billing_attnName">
	         	<if-not-empty field="parameters.shipping_attnName">
	         		<call-object-method method-name="toUpperCase" obj-field="parameters.billing_attnName" ret-field="billingPostalAddressAttnName"/>
	           		<call-object-method method-name="toUpperCase" obj-field="parameters.shipping_attnName" ret-field="shippingPostalAddressAttnName"/>
	           		<if-compare-field operator="equals" field="billingPostalAddressAttnName" to-field="shippingPostalAddressAttnName">
				        <set from-field="parameters.shipping_attnName" field="nickName"/>
				         <property-to-field field="field" resource="OSafeUiLabels" property="AddressNickNameCaption"/>
				         <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
			                <field field="field"/>
			            </call-class-method>
				        <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="AddressNickNameUniqueError"/>
				        <string-to-list string="${tempErrorMessage}" message-field="shipping_attnName" list="error_list"/>
	           		</if-compare-field>
	         	</if-not-empty>
	         </if-not-empty>

	        <if-compare field="parameters.shipping_address1_mandatory" operator="equals" value="Y">
	            <if-empty field="parameters.shipping_address1">
	                <property-to-field field="field" resource="OSafeUiLabels" property="AddressLine1Caption"/>
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
		                <field field="field"/>
		            </call-class-method>
        			<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankShippingAddressGenericError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="shipping_address1" list="error_list"/>
	            </if-empty>
	        </if-compare>
	        
	        <if-compare field="parameters.shipping_city_mandatory" operator="equals" value="Y">
	            <if-empty field="parameters.shipping_city">
	                <property-to-field field="field" resource="OSafeUiLabels" property="TownOrCityCaption"/>
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
		                <field field="field"/>
		            </call-class-method>
        			<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankShippingAddressGenericError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="shipping_city" list="error_list"/>
	            </if-empty>
	        </if-compare>
	        
	        <if-compare field="parameters.shipping_postalCode_mandatory" operator="equals" value="Y">
	            <if-empty field="parameters.shipping_postalCode">
	                <property-to-field field="field" resource="OSafeUiLabels" property="PostalCodeOrZipCaption"/>
	                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
		                <field field="field"/>
		            </call-class-method>
        			<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankShippingAddressGenericError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="shipping_postalCode" list="error_list"/>
	            </if-empty>
	        </if-compare>
	        <if-not-empty field="parameters.shipping_postalCode">
	            <if-compare value="USA" operator="equals" field="parameters.shipping_country">
	                <call-class-method class-name="com.osafe.util.Util"  method-name="isZipCode" ret-field="isZipCode">
	                    <field field="parameters.shipping_postalCode"/>
	                </call-class-method>
	            </if-compare>
	            <if-compare field="isZipCode" operator="equals"  value="false">
		            <property-to-field field="field" resource="OSafeUiLabels" property="PostalCodeOrZipCaption"/>
		            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
		                <field field="field"/>
		            </call-class-method>
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidShippingPostalCodeError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="shipping_postalCode" list="error_list"/>
	            </if-compare>
	        </if-not-empty>
	        
	        <!-- if a country has States than state is mandatory. -->
	         <call-class-method class-name="org.ofbiz.common.CommonWorkers"  method-name="getAssociatedStateList" ret-field="statesList">
	             <field field="delegator" type="org.ofbiz.entity.Delegator"/>
	             <field field="parameters.shipping_country"/>
	         </call-class-method>
	        <if-compare field="parameters.shipping_state_mandatory" operator="equals" value="Y">
	            <if-not-empty field="statesList">
	                <if-empty field="parameters.shipping_state">
	                    <property-to-field field="field" resource="OSafeUiLabels" property="StateOrProvinceCaption"/>
	                    <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="stripTrailingColon" ret-field="field">
			                <field field="field"/>
			            </call-class-method>
        				<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankShippingAddressGenericError"/>
	                    <string-to-list string="${tempErrorMessage}" message-field="shipping_state" list="error_list"/>
	                </if-empty>
	            </if-not-empty>
	        </if-compare>
	        
        </if-empty>
        
        <check-errors/>

        <!-- create party -->
        <make-value value-field="createPartyEntity" entity-name="Party"/>
        <set-pk-fields map="parameters" value-field="createPartyEntity"/>
        <set-nonpk-fields map="parameters" value-field="createPartyEntity"/>
        <set field="createPartyEntity.partyTypeId" value="PARTY_GROUP"/>
        <now-timestamp field="createPartyEntity.createdDate"/> 
        <create-value value-field="createPartyEntity"/>

        <!-- create party group -->
        <set-service-fields service-name="createPartyGroup" to-map="createPartyGroupContext" map="parameters"/>
        <call-service service-name="createPartyGroup" in-map-name="createPartyGroupContext"/>
        
        <!-- <make-value value-field="createPartyGroupEntity" entity-name="PartyGroup"/>
        <set-pk-fields map="parameters" value-field="createPartyGroupEntity"/>
        <set-nonpk-fields map="parameters" value-field="createPartyGroupEntity"/>
        <create-value value-field="createPartyGroupEntity"/> -->
        
        <!-- create party role -->
        <set-service-fields service-name="createPartyRole" to-map="partyRoleContext" map="parameters"/>
        <call-service service-name="createPartyRole" in-map-name="partyRoleContext"/>

        <!-- create product store role -->
        <make-value entity-name="ProductStoreRole" value-field="productStoreRole"/>
        <set field="productStoreRole.partyId" from-field="parameters.partyId"/>
        <set field="productStoreRole.roleTypeId" from-field="parameters.roleTypeId"/>
        <set field="productStoreRole.productStoreId" from-field="parameters.productStoreId"/>
        <now-timestamp field="productStoreRole.fromDate"/>  
        <create-value value-field="productStoreRole"/>
        
        <!-- CREATE BILLING ADDRESS -->
        <!--Set the Value for City and Postal Code if they are empty as they are required fields by the service -->
        <if>
                <condition>
                    <or>
                        <if-compare value="CAN" operator="equals" field="parameters.billing_country"></if-compare>
                        <if-compare value="USA" operator="equals" field="parameters.billing_country"></if-compare>
                    </or>
                </condition>
                <then></then>
                <else>
                    <if-empty field="parameters.billing_city">
                        <set field="parameters.billing_city" value="_NA_"/>
                    </if-empty>
                    <if-empty field="parameters.billing_postalCode">
                        <set field="parameters.billing_postalCode" value="_NA_"/>
                    </if-empty>
                </else>
        </if>
        
        <set-service-fields service-name="createUpdatePartyPostalAddress" to-map="createUpdatePartyPostalAddressctx" map="parameters"/>
        <set field="createUpdatePartyPostalAddressctx.toName" from-field="parameters.billing_fullName"/>
        <set field="createUpdatePartyPostalAddressctx.countryGeoId" from-field="parameters.billing_country"/>
        <set field="createUpdatePartyPostalAddressctx.attnName" from-field="parameters.billing_attnName"/>
        <set field="createUpdatePartyPostalAddressctx.address1" from-field="parameters.billing_address1"/>
        <set field="createUpdatePartyPostalAddressctx.address2" from-field="parameters.billing_address2"/>
        <set field="createUpdatePartyPostalAddressctx.address3" from-field="parameters.billing_address3"/>
        <set field="createUpdatePartyPostalAddressctx.city" from-field="parameters.billing_city"/>
        <set field="createUpdatePartyPostalAddressctx.stateProvinceGeoId" from-field="parameters.billing_state"/>
        <set field="createUpdatePartyPostalAddressctx.postalCode" from-field="parameters.billing_postalCode"/>
        <call-service service-name="createUpdatePartyPostalAddress" in-map-name="createUpdatePartyPostalAddressctx">
                <result-to-field result-name="contactMechId" field="addressPurposeContext.contactMechId"/>
        </call-service>
        <!-- create the billing location -->
        <set field="addressPurposeContext.contactMechPurposeTypeId" value="BILLING_LOCATION"/>
        <set field="addressPurposeContext.partyId" from-field="parameters.partyId" />
        <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>
        
        <if-empty field="parameters.isSameAsBilling">
	        <!-- CREATE SHIPPING ADDRESS -->
	        <!--Set the Value for City and Postal Code if they are empty as they are required fields by the service -->
	        <if>
	                <condition>
	                    <or>
	                        <if-compare value="CAN" operator="equals" field="parameters.shipping_country"></if-compare>
	                        <if-compare value="USA" operator="equals" field="parameters.shipping_country"></if-compare>
	                    </or>
	                </condition>
	                <then></then>
	                <else>
	                    <if-empty field="parameters.shipping_city">
	                        <set field="parameters.shipping_city" value="_NA_"/>
	                    </if-empty>
	                    <if-empty field="parameters.shipping_postalCode">
	                        <set field="parameters.shipping_postalCode" value="_NA_"/>
	                    </if-empty>
	                </else>
	        </if>
	        <set-service-fields service-name="createUpdatePartyPostalAddress" to-map="createUpdatePartyPostalAddressctx" map="parameters"/>
	        <set field="createUpdatePartyPostalAddressctx.toName" from-field="parameters.shipping_fullName"/>
	        <set field="createUpdatePartyPostalAddressctx.countryGeoId" from-field="parameters.shipping_country"/>
	        <set field="createUpdatePartyPostalAddressctx.attnName" from-field="parameters.shipping_attnName"/>
	        <set field="createUpdatePartyPostalAddressctx.address1" from-field="parameters.shipping_address1"/>
	        <set field="createUpdatePartyPostalAddressctx.address2" from-field="parameters.shipping_address2"/>
	        <set field="createUpdatePartyPostalAddressctx.address3" from-field="parameters.shipping_address3"/>
	        <set field="createUpdatePartyPostalAddressctx.city" from-field="parameters.shipping_city"/>
	        <set field="createUpdatePartyPostalAddressctx.stateProvinceGeoId" from-field="parameters.shipping_state"/>
	        <set field="createUpdatePartyPostalAddressctx.postalCode" from-field="parameters.shipping_postalCode"/>
	        <else>
	            <property-to-field field="defaultShippingAttnName" resource="OSafeAdminUiLabels" property="ShippingAddressDefaultNickNameLabel"/>
	            <set field="createUpdatePartyPostalAddressctx.attnName" from-field="defaultShippingAttnName"/>
	        </else>
        </if-empty>
        <call-service service-name="createUpdatePartyPostalAddress" in-map-name="createUpdatePartyPostalAddressctx">
                <result-to-field result-name="contactMechId" field="addressPurposeContext.contactMechId"/>
        </call-service>
        <!-- create the shipping location -->
        <set field="addressPurposeContext.contactMechPurposeTypeId" value="SHIPPING_LOCATION"/>
        <set field="addressPurposeContext.partyId" from-field="parameters.partyId" />
        <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>
        <!-- also consider this address the general correspondence address -->
        <set value="GENERAL_LOCATION" field="addressPurposeContext.contactMechPurposeTypeId"/>
        <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>

        <property-to-field field="tempSuccessMessage" resource="OSafeAdminUiLabels" property="UpdatedSuccess"/>
        <string-to-list string="${tempSuccessMessage}"  list="successMessageList"/>
        <field-to-request field="successMessageList" request-name="osafeSuccessMessageList"/>
    </simple-method>
    
    
    <simple-method method-name="validatePhoneHome" short-description="validate Phone Home" login-required="false">
        <set field="parameters.phoneHomeContact" value="${parameters.phoneHomeContact3}${parameters.phoneHomeContact4}"/>
        <if>
            <condition>
              <or>
                <not><if-empty field="parameters.phoneHomeArea"></if-empty></not>
                <not><if-empty field="parameters.phoneHomeContact"></if-empty></not>
              </or>
            </condition>
            <then>
               <set field="parameters.phoneHome_mandatory" value="Y"/>
            </then>
        </if>
        <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="checkTelecomNumber" ret-field="checkTelecomNumberResult">
            <field field="parameters.phoneHomeArea"/>
            <field field="parameters.phoneHomeContact"/>
            <field field="parameters.phoneHome_mandatory"/>
        </call-class-method>
        <if-compare field="checkTelecomNumberResult" operator="not-equals" value="success">
            <if-compare field="checkTelecomNumberResult" operator="equals" value="missing">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="HomePhoneMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="phoneHomeArea" list="error_list"/>
                <string-to-list string="" message-field="phoneHomeContact3" list="error_list"/>
                <string-to-list string="" message-field="phoneHomeContact4" list="error_list"/>
            </if-compare>
            <if-compare field="checkTelecomNumberResult" operator="equals" value="invalid">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="HomePhoneInvalidError"/>
                <string-to-list string="${tempErrorMessage}" message-field="phoneHomeArea" list="error_list"/>
                <string-to-list string="" message-field="phoneHomeContact3" list="error_list"/>
                <string-to-list string="" message-field="phoneHomeContact4" list="error_list"/>
            </if-compare>
        </if-compare>
    </simple-method>
    
    <simple-method method-name="validatePhoneHomeOther" short-description="validate Phone Home" login-required="false">
        <if-compare field="parameters.phoneHome_mandatory" operator="equals" value="Y">
            <if-empty field="parameters.phoneHomeContactOther">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="HomePhoneMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="phoneHomeContactOther" list="error_list"/>
            </if-empty>
        </if-compare>
       <if-not-empty field="parameters.phoneHomeContactOther">
        <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="checkTelecomNumber" ret-field="checkTelecomNumberResult">
            <string value=""/>
            <field field="parameters.phoneHomeContactOther"/>
            <string value="false"/>
        </call-class-method>
        <if-compare field="checkTelecomNumberResult" operator="not-equals" value="success">
            <if-compare field="checkTelecomNumberResult" operator="equals" value="invalid">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="HomePhoneInvalidError"/>
                <string-to-list string="${tempErrorMessage}" message-field="phoneHomeContactOther" list="error_list"/>
            </if-compare>
        <else>
            <set field="parameters.phoneHomeContact" from-field="parameters.phoneHomeContactOther"/>
        </else>
        </if-compare>
       </if-not-empty>
    </simple-method>


    <simple-method method-name="validatePhoneMobile" short-description="validate Phone Mobile" login-required="false">
        <set field="parameters.phoneMobileContact" value="${parameters.phoneMobileContact3}${parameters.phoneMobileContact4}"/>
        <if>
            <condition>
              <or>
                <not><if-empty field="parameters.phoneMobileArea"></if-empty></not>
                <not><if-empty field="parameters.phoneMobileContact"></if-empty></not>
              </or>
            </condition>
            <then>
               <set field="parameters.phoneMobile_mandatory" value="Y"/>
            </then>
        </if>
        <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="checkTelecomNumber" ret-field="checkTelecomNumberResult">
            <field field="parameters.phoneMobileArea"/>
            <field field="parameters.phoneMobileContact"/>
            <field field="parameters.phoneMobile_mandatory"/>
        </call-class-method>
        <if-compare field="checkTelecomNumberResult" operator="not-equals" value="success">
            <if-compare field="checkTelecomNumberResult" operator="equals" value="missing">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MobilePhoneMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="phoneMobileArea" list="error_list"/>
                <string-to-list string="" message-field="phoneMobileContact3" list="error_list"/>
                <string-to-list string="" message-field="phoneMobileContact4" list="error_list"/>
            </if-compare>
            <if-compare field="checkTelecomNumberResult" operator="equals" value="invalid">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MobilePhoneInvalidError"/>
                <string-to-list string="${tempErrorMessage}" message-field="phoneMobileArea" list="error_list"/>
                <string-to-list string="" message-field="phoneMobileContact3" list="error_list"/>
                <string-to-list string="" message-field="phoneMobileContact4" list="error_list"/>
            </if-compare>
        </if-compare>
    </simple-method>
    
    <simple-method method-name="validatePhoneMobileOther" short-description="validate Phone Mobile" login-required="false">
        <if-compare field="parameters.phoneMobile_mandatory" operator="equals" value="Y">
            <if-empty field="parameters.phoneMobileContactOther">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MobilePhoneMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="phoneMobileContactOther" list="error_list"/>
            </if-empty>
        </if-compare>
       <if-not-empty field="parameters.phoneMobileContactOther">
           <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="checkTelecomNumber" ret-field="checkTelecomNumberResult">
               <string value=""/>
               <field field="parameters.phoneMobileContactOther"/>
               <string value="false"/>
           </call-class-method>
           <if-compare field="checkTelecomNumberResult" operator="not-equals" value="success">
               <if-compare field="checkTelecomNumberResult" operator="equals" value="invalid">
                   <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MobilePhoneInvalidError"/>
                   <string-to-list string="${tempErrorMessage}" message-field="phoneMobileContactOther" list="error_list"/>
               </if-compare>
        <else>
            <set field="parameters.phoneMobileContact" from-field="parameters.phoneMobileContactOther"/>
        </else>
           </if-compare>
       </if-not-empty>
    </simple-method>
    
    <simple-method method-name="validatePhoneWork" short-description="validate Phone Work" login-required="false">
        <set field="parameters.phoneWorkContact" value="${parameters.phoneWorkContact3}${parameters.phoneWorkContact4}"/>
        <if>
            <condition>
              <or>
                <not><if-empty field="parameters.phoneWorkArea"></if-empty></not>
                <not><if-empty field="parameters.phoneWorkContact"></if-empty></not>
              </or>
            </condition>
            <then>
               <set field="parameters.phoneWork_mandatory" value="Y"/>
            </then>
        </if>
        <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="checkTelecomNumber" ret-field="checkTelecomNumberResult">
            <field field="parameters.phoneWorkArea"/>
            <field field="parameters.phoneWorkContact"/>
            <field field="parameters.phoneWorkExt"/>
            <field field="parameters.phoneWork_mandatory"/>
        </call-class-method>
        <if-compare field="checkTelecomNumberResult" operator="not-equals" value="success">
            <if-compare field="checkTelecomNumberResult" operator="equals" value="missing">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="WorkPhoneMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="phoneWorkArea" list="error_list"/>
                <string-to-list string="" message-field="phoneWorkContact3" list="error_list"/>
                <string-to-list string="" message-field="phoneWorkContact4" list="error_list"/>
                <string-to-list string="" message-field="phoneWorkExt" list="error_list"/>
            </if-compare>
            <if-compare field="checkTelecomNumberResult" operator="equals" value="invalid">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="WorkPhoneInvalidError"/>
                <string-to-list string="${tempErrorMessage}" message-field="phoneWorkArea" list="error_list"/>
                <string-to-list string="" message-field="phoneWorkContact3" list="error_list"/>
                <string-to-list string="" message-field="phoneWorkContact4" list="error_list"/>
                <string-to-list string="" message-field="phoneWorkExt" list="error_list"/>
            </if-compare>
        </if-compare>
    </simple-method>
    
    <simple-method method-name="validatePhoneWorkOther" short-description="validate Phone Work" login-required="false">
        <if-compare field="parameters.phoneWork_mandatory" operator="equals" value="Y">
            <if-empty field="parameters.phoneWorkContactOther">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="WorkPhoneMissingError"/>
                <string-to-list string="${tempErrorMessage}" message-field="phoneWorkContactOther" list="error_list"/>
            </if-empty>
        </if-compare>
       <if-not-empty field="parameters.phoneWorkContactOther">
           <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="checkTelecomNumber" ret-field="checkTelecomNumberResult">
               <string value=""/>
               <field field="parameters.phoneWorkContactOther"/>
               <field field="parameters.phoneWorkExtOther"/>
               <string value="false"/>
           </call-class-method>
           <if-compare field="checkTelecomNumberResult" operator="not-equals" value="success">
               <if-compare field="checkTelecomNumberResult" operator="equals" value="invalid">
                   <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="WorkPhoneInvalidError"/>
                   <string-to-list string="${tempErrorMessage}" message-field="phoneWorkContactOther" list="error_list"/>
               </if-compare>
           <else>
               <set field="parameters.phoneWorkContact" from-field="parameters.phoneWorkContactOther"/>
               <set field="parameters.phoneWorkExt" from-field="parameters.phoneWorkExtOther"/>
           </else>
           </if-compare>
       </if-not-empty>
    </simple-method>
    
</simple-methods>