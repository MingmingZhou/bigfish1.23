<?xml version="1.0" encoding="UTF-8"?>

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:noNamespaceSchemaLocation="http://www.ofbiz.org/dtds/simple-methods.xsd">

    <simple-method method-name="updateProdPrice" short-description="This Service Update Product Simple Price">
	    <if-compare field="parameters.isVariant" operator="not-equals" value="Y">
	        <if-empty field="parameters.listPrice">
	            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidProductListPriceError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="listPrice" list="error_list"/>
	        <else>
	            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isFloat" ret-field="checkFloatResult">
	                <field field="parameters.listPrice"/>
	            </call-class-method>
	            <if-compare field="checkFloatResult" operator="equals" value="false" type="Boolean">
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductListPriceError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="listPrice" list="error_list"/>
	            </if-compare>
	        </else>
	        </if-empty>
	        <if-empty field="parameters.defaultPrice">
	            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidProductDefaultPriceError"/>
	            <string-to-list string="${tempErrorMessage}" message-field="defaultPrice" list="error_list"/>
	        <else>
	            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isFloat" ret-field="checkFloatResult">
	                <field field="parameters.defaultPrice"/>
	            </call-class-method>
	            <if-compare field="checkFloatResult" operator="equals" value="false" type="Boolean">
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductDefaultPriceError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="defaultPrice" list="error_list"/>
	            </if-compare>
	        </else>
	        </if-empty>
	        <if-not-empty field="parameters.recurringPrice">
	            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isFloat" ret-field="checkFloatResult">
	                <field field="parameters.recurringPrice"/>
	            </call-class-method>
	            <if-compare field="checkFloatResult" operator="equals" value="false" type="Boolean">
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductRecurringPriceError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="recurringPrice" list="error_list"/>
	            </if-compare>
	        </if-not-empty>
	    </if-compare>
	    <if-compare field="parameters.isVariant" operator="equals" value="Y">
	        <if-not-empty field="parameters.variantListPrice">
		        <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="checkFloatResult">
		            <field field="parameters.variantListPrice"/>
		        </call-class-method>
		        <if-compare field="checkFloatResult" operator="equals" value="false" type="Boolean">
		            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductVariantListPriceError"/>
		            <string-to-list string="${tempErrorMessage}" message-field="variantListPrice" list="error_list"/>
		        </if-compare>
		    </if-not-empty>
		    <if-not-empty field="parameters.variantSalePrice">
		        <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="checkFloatResult">
		            <field field="parameters.variantSalePrice"/>
		        </call-class-method>
		        <if-compare field="checkFloatResult" operator="equals" value="false" type="Boolean">
		            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductVariantSalePriceError"/>
		            <string-to-list string="${tempErrorMessage}" message-field="variantSalePrice" list="error_list"/>
		        </if-compare>
		    </if-not-empty>
		    <if-not-empty field="parameters.variantRecurringPrice">
		        <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="checkFloatResult">
		            <field field="parameters.variantRecurringPrice"/>
		        </call-class-method>
		        <if-compare field="checkFloatResult" operator="equals" value="false" type="Boolean">
		            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ProductVariantRecurringPriceError"/>
		            <string-to-list string="${tempErrorMessage}" message-field="variantRecurringPrice" list="error_list"/>
		        </if-compare>
		    </if-not-empty>
	    </if-compare>
	    <check-errors/>
        
        <if-not-empty field="parameters.defaultPrice">
            <set field="createUpdateProdPriceCtx.productId" from-field="parameters.productId"/>
            <set field="createUpdateProdPriceCtx.newPrice" from-field="parameters.defaultPrice" type="BigDecimal"/>
            <set field="createUpdateProdPriceCtx.productPriceTypeId" value="DEFAULT_PRICE"/>
            <set field="createUpdateProdPriceCtx.isVariant" from-field="parameters.isVariant"/>
            <set field="createUpdateProdPriceCtx.currencyUomId" from-field="parameters.currencyUomId"/>
            <set field="createUpdateProdPriceCtx.productPricePurposeId" value="PURCHASE"/>
            <set field="createUpdateProdPriceCtx.productStoreGroupId" value="_NA_"/>
            <call-service service-name="createUpdateProdPrice" in-map-name="createUpdateProdPriceCtx"/>
        </if-not-empty>
        <if-not-empty field="parameters.listPrice">
            <set field="createUpdateProdPriceCtx.productId" from-field="parameters.productId"/>
            <set field="createUpdateProdPriceCtx.newPrice" from-field="parameters.listPrice" type="BigDecimal"/>
            <set field="createUpdateProdPriceCtx.productPriceTypeId" value="LIST_PRICE"/>
            <set field="createUpdateProdPriceCtx.isVariant" from-field="parameters.isVariant"/>
            <set field="createUpdateProdPriceCtx.currencyUomId" from-field="parameters.currencyUomId"/>
            <set field="createUpdateProdPriceCtx.productPricePurposeId" value="PURCHASE"/>
            <set field="createUpdateProdPriceCtx.productStoreGroupId" value="_NA_"/>
            <call-service service-name="createUpdateProdPrice" in-map-name="createUpdateProdPriceCtx"/>
        </if-not-empty>
        
        <if-not-empty field="parameters.recurringPrice">
            <set field="createUpdateProdPriceCtx.productId" from-field="parameters.productId"/>
            <set field="createUpdateProdPriceCtx.newPrice" from-field="parameters.recurringPrice" type="BigDecimal"/>
            <set field="createUpdateProdPriceCtx.productPriceTypeId" value="DEFAULT_PRICE"/>
            <set field="createUpdateProdPriceCtx.isVariant" from-field="parameters.isVariant"/>
            <set field="createUpdateProdPriceCtx.currencyUomId" from-field="parameters.currencyUomId"/>
            <set field="createUpdateProdPriceCtx.productPricePurposeId" value="RECURRING_CHARGE"/>
            <set field="createUpdateProdPriceCtx.productStoreGroupId" value="_NA_"/>
            <call-service service-name="createUpdateProdPrice" in-map-name="createUpdateProdPriceCtx"/>
        <else>
        		<entity-and entity-name="ProductPrice" list="productPriceList" filter-by-date="true">
	                <field-map field-name="productId" from-field="parameters.productId"/>
	                <field-map field-name="productPriceTypeId" value="DEFAULT_PRICE"/>
	                <field-map field-name="productPricePurposeId" value="RECURRING_CHARGE"/>
		            <field-map field-name="currencyUomId" from-field="parameters.currencyUomId"/>
		            <field-map field-name="productStoreGroupId" value="_NA_"/>
	                <order-by field-name="-fromDate"/>
	            </entity-and>
	            <if-not-empty field="productPriceList">
	            	<first-from-list entry="productPrice" list="productPriceList"/>
            		<set field="deleteProductVariantListPriceCtx.productId" from-field="productPrice.productId"/>
	                <set field="deleteProductVariantListPriceCtx.productPriceTypeId" from-field="productPrice.productPriceTypeId"/>
	                <set field="deleteProductVariantListPriceCtx.productPricePurposeId" from-field="productPrice.productPricePurposeId"/>
	                <set field="deleteProductVariantListPriceCtx.currencyUomId" from-field="productPrice.currencyUomId"/>
	                <set field="deleteProductVariantListPriceCtx.productStoreGroupId" from-field="productPrice.productStoreGroupId"/>
	                <set field="deleteProductVariantListPriceCtx.fromDate" from-field="productPrice.fromDate" type="Timestamp"/>
	                <call-service service-name="deleteProductPrice" in-map-name="deleteProductVariantListPriceCtx"/>
	            </if-not-empty>
        </else>

        </if-not-empty>

        <if-compare field="parameters.isVariant" operator="equals" value="Y">
        	<set field="createUpdateProdPriceCtx.productId" from-field="parameters.productId"/>
            <set field="createUpdateProdPriceCtx.newPrice" from-field="parameters.variantListPrice" type="BigDecimal"/>
            <set field="createUpdateProdPriceCtx.productPriceTypeId" value="LIST_PRICE"/>
            <set field="createUpdateProdPriceCtx.isVariant" from-field="parameters.isVariant"/>
            <set field="createUpdateProdPriceCtx.currencyUomId" from-field="parameters.currencyUomId"/>
            <set field="createUpdateProdPriceCtx.productPricePurposeId" value="PURCHASE"/>
            <set field="createUpdateProdPriceCtx.productStoreGroupId" value="_NA_"/>
            <call-service service-name="createUpdateProdPrice" in-map-name="createUpdateProdPriceCtx"/>
            
            <set field="createUpdateProdPriceCtx.productId" from-field="parameters.productId"/>
            <set field="createUpdateProdPriceCtx.newPrice" from-field="parameters.variantSalePrice" type="BigDecimal"/>
            <set field="createUpdateProdPriceCtx.productPriceTypeId" value="DEFAULT_PRICE"/>
            <set field="createUpdateProdPriceCtx.isVariant" from-field="parameters.isVariant"/>
            <set field="createUpdateProdPriceCtx.currencyUomId" from-field="parameters.currencyUomId"/>
            <set field="createUpdateProdPriceCtx.productPricePurposeId" value="PURCHASE"/>
            <set field="createUpdateProdPriceCtx.productStoreGroupId" value="_NA_"/>
            <call-service service-name="createUpdateProdPrice" in-map-name="createUpdateProdPriceCtx"/>

		    <if-not-empty field="parameters.variantRecurringPrice">
	            <set field="createUpdateProdPriceCtx.productId" from-field="parameters.productId"/>
	            <set field="createUpdateProdPriceCtx.newPrice" from-field="parameters.variantRecurringPrice" type="BigDecimal"/>
	            <set field="createUpdateProdPriceCtx.productPriceTypeId" value="DEFAULT_PRICE"/>
	            <set field="createUpdateProdPriceCtx.isVariant" from-field="parameters.isVariant"/>
	            <set field="createUpdateProdPriceCtx.currencyUomId" from-field="parameters.currencyUomId"/>
	            <set field="createUpdateProdPriceCtx.productPricePurposeId" value="RECURRING_CHARGE"/>
	            <set field="createUpdateProdPriceCtx.productStoreGroupId" value="_NA_"/>
	            <call-service service-name="createUpdateProdPrice" in-map-name="createUpdateProdPriceCtx"/>
	        <else>
	        		<entity-and entity-name="ProductPrice" list="productPriceList" filter-by-date="true">
		                <field-map field-name="productId" from-field="parameters.productId"/>
		                <field-map field-name="productPriceTypeId" value="DEFAULT_PRICE"/>
		                <field-map field-name="productPricePurposeId" value="RECURRING_CHARGE"/>
			            <field-map field-name="currencyUomId" from-field="parameters.currencyUomId"/>
			            <field-map field-name="productStoreGroupId" value="_NA_"/>
		                <order-by field-name="-fromDate"/>
		            </entity-and>
		            <if-not-empty field="productPriceList">
		            	<first-from-list entry="productPrice" list="productPriceList"/>
	            		<set field="deleteProductVariantListPriceCtx.productId" from-field="productPrice.productId"/>
		                <set field="deleteProductVariantListPriceCtx.productPriceTypeId" from-field="productPrice.productPriceTypeId"/>
		                <set field="deleteProductVariantListPriceCtx.productPricePurposeId" from-field="productPrice.productPricePurposeId"/>
		                <set field="deleteProductVariantListPriceCtx.currencyUomId" from-field="productPrice.currencyUomId"/>
		                <set field="deleteProductVariantListPriceCtx.productStoreGroupId" from-field="productPrice.productStoreGroupId"/>
		                <set field="deleteProductVariantListPriceCtx.fromDate" from-field="productPrice.fromDate" type="Timestamp"/>
		                <call-service service-name="deleteProductPrice" in-map-name="deleteProductVariantListPriceCtx"/>
		            </if-not-empty>
	        </else>
	        </if-not-empty>

        </if-compare>
        
        <property-to-field resource="OSafeAdminUiLabels" property="ProductGenericSavedSuccess" field="productGenericSavedSuccessMessage"/>
	    <string-to-list string="${productGenericSavedSuccessMessage}" list="successMessageList"/>
        
    </simple-method>

    
    <simple-method method-name="createUpdateProdPrice" short-description="This Service Update Product Price">
        <if>
        	<condition>
        		<and>
        			<not><if-empty field="parameters.productId"></if-empty></not>
        			<not><if-empty field="parameters.productPriceTypeId"></if-empty></not>
        			<not><if-empty field="parameters.isVariant"></if-empty></not>
        			<not><if-empty field="parameters.currencyUomId"></if-empty></not>
        			<not><if-empty field="parameters.productPricePurposeId"></if-empty></not>
        			<not><if-empty field="parameters.productStoreGroupId"></if-empty></not>
        		</and>
        	</condition>
        	<then>
        		<entity-and entity-name="ProductPrice" list="productPriceList" filter-by-date="true">
	                <field-map field-name="productId" from-field="parameters.productId"/>
	                <field-map field-name="productPriceTypeId" from-field="parameters.productPriceTypeId"/>
	                <field-map field-name="productPricePurposeId" from-field="parameters.productPricePurposeId"/>
		            <field-map field-name="currencyUomId" from-field="parameters.currencyUomId"/>
		            <field-map field-name="productStoreGroupId" from-field="parameters.productStoreGroupId"/>
	                <order-by field-name="-fromDate"/>
	            </entity-and>
	            
	            <if-not-empty field="productPriceList">
	            	<first-from-list entry="productPrice" list="productPriceList"/>
	            </if-not-empty>
	            
            	<if-not-empty field="parameters.newPrice">
		            <if-not-empty field="productPrice">
		                <set-service-fields service-name="updateProductPrice" to-map="productPriceCtx" map="productPrice"/>
		                <set field="productPriceCtx.price" from-field="parameters.newPrice" type="BigDecimal"/>
		                <call-service service-name="updateProductPrice" in-map-name="productPriceCtx"/>
		                <else>
		                	<!-- create one if one does not exist -->
		                	<now-timestamp field="fromDate"/>
			                <set field="createProductPriceCtx.price" from-field="parameters.newPrice" type="BigDecimal"/>
			                <set field="createProductPriceCtx.productId" from-field="parameters.productId"/>
			                <set field="createProductPriceCtx.productPriceTypeId" from-field="parameters.productPriceTypeId"/>
			                <set field="createProductPriceCtx.productPricePurposeId" from-field="parameters.productPricePurposeId"/>
			                <set field="createProductPriceCtx.currencyUomId" from-field="parameters.currencyUomId"/>
			                <set field="createProductPriceCtx.productStoreGroupId" from-field="parameters.productStoreGroupId"/>
			                <set field="createProductPriceCtx.fromDate" from-field="fromDate" type="Timestamp"/>
			                <call-service service-name="createProductPrice" in-map-name="createProductPriceCtx"/>
	                	</else>
		            </if-not-empty>
		            <else>
		            	<if-not-empty field="productPrice">
		            		<!-- If this ProductPrice is for a variant -->
			            	<if-compare field="parameters.isVariant" operator="equals" value="Y">
			            		<set field="deleteProductVariantListPriceCtx.productId" from-field="parameters.productId"/>
				                <set field="deleteProductVariantListPriceCtx.productPriceTypeId" from-field="parameters.productPriceTypeId"/>
				                <set field="deleteProductVariantListPriceCtx.productPricePurposeId" from-field="parameters.productPricePurposeId"/>
				                <set field="deleteProductVariantListPriceCtx.currencyUomId" from-field="parameters.currencyUomId"/>
				                <set field="deleteProductVariantListPriceCtx.productStoreGroupId" from-field="parameters.productStoreGroupId"/>
				                <set field="deleteProductVariantListPriceCtx.fromDate" from-field="productPrice.fromDate" type="Timestamp"/>
				                <call-service service-name="deleteProductPrice" in-map-name="deleteProductVariantListPriceCtx"/>
			            	</if-compare>
		            	</if-not-empty>
		            </else>
	            </if-not-empty>
        	</then>
        </if>
    </simple-method>
    
</simple-methods>