<?xml version="1.0" encoding="UTF-8"?>

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:noNamespaceSchemaLocation="http://www.ofbiz.org/dtds/simple-methods.xsd">

    <simple-method method-name="cancelScheduledJob" short-description="Create a Scheduled Job">
 		<!-- check for bad or missing values --> 
 		<if-empty field="parameters.jobId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankJobIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="jobId"  list="error_list"/>
        </if-empty>

        <check-errors/>
   
        <!-- update record in entities: JobSandbox  -->     
        <make-value entity-name="JobSandbox" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" value-field="lookupPKMap"/>
        <find-by-primary-key map="lookupPKMap" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <now-timestamp field="nowTimestamp"/>
        <set from-field="nowTimestamp" field="lookedUpValue.cancelDateTime"/>
        <set field="statusId" value="SERVICE_CANCELLED" type="String"/>
        <set from-field="statusId" field="lookedUpValue.statusId"/>
        <store-value value-field="lookedUpValue"/>
    </simple-method>
    
    <simple-method method-name="updateScheduledJob" short-description="Update a scheduled job">
    	<!-- check for bad or missing values -->     
        <if-empty field="parameters.JOB_NAME">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MissingJobNameError"/>
            <string-to-list string="${tempErrorMessage}" message-field="JOB_NAME"  list="error_list"/>
        </if-empty>

        <if-empty field="parameters.SERVICE_NAME">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MissingServiceNameError"/>
            <string-to-list string="${tempErrorMessage}" message-field="SERVICE_NAME"  list="error_list"/> 
            <else>
            <set field="dispatcher" from-field="parameters.dispatcher" type="Object"/>
            <call-class-method class-name="com.osafe.services.OsafeAdminScheduledJobServices"  method-name="checkValidServiceName" ret-field="isValid">
                <field field="parameters.SERVICE_NAME"/>
                <field field="dispatcher" type="org.ofbiz.service.LocalDispatcher"/>
            </call-class-method>
            <if-compare field="isValid" operator="equals" value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidServiceNameError"/>
                <string-to-list string="${tempErrorMessage}" message-field="SERVICE_NAME"  list="error_list"/>
            </if-compare>
            </else>    
        </if-empty>
 
        <!-- check if this is a valid date and time -->
         
        <if-not-empty field="parameters.SERVICE_DATE">
        	<call-class-method class-name="com.osafe.services.OsafeAdminScheduledJobServices"  method-name="getValidJobDate" ret-field="ValidServDateEOD">
	            <field field="parameters.SERVICE_DATE"/>
	            <field field="parameters.entryDateTimeFormat"/>
	        </call-class-method>
	        <if-not-empty field="ValidServDateEOD">
	        	<call-class-method class-name="com.osafe.services.OsafeAdminScheduledJobServices"  method-name="checkPassedJobDate" ret-field="PassedServEOD">
	                <field field="ValidServDateEOD"/>
	            </call-class-method>
	            <if-compare field="PassedServEOD" operator="equals" value="false">
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="StartTimePassedError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="SERVICE_DATE"  list="error_list"/>
	                <else>
        				 <call-class-method class-name="com.osafe.services.OsafeAdminScheduledJobServices"  method-name="getValidJobDate" ret-field="ValidServDateTime">
				            <field field="parameters.SERVICE_DATE"/>
				            <field field="parameters.entryDateTimeFormat"/>
				        </call-class-method>
				        <if-empty field="ValidServDateTime">
				            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankStartDateError"/>
				            <string-to-list string="${tempErrorMessage}" message-field="SERVICE_DATE"  list="error_list"/>
					        <else>
					            <set from-field="ValidServDateTime" field="parameters.SERVICE_DATE"/> 
					            <!-- check if datetime passed already -->
					            <call-class-method class-name="com.osafe.services.OsafeAdminScheduledJobServices"  method-name="checkPassedJobDate" ret-field="PassedServTime">
					                <field field="parameters.SERVICE_DATE"/>
					            </call-class-method>
					            <if-compare field="PassedServTime" operator="equals" value="false">
					                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="StartTimePassedError"/>
					                <string-to-list string="${tempErrorMessage}" message-field="SERVICE_DATE"  list="error_list"/>
					            </if-compare>
					        </else>
				        </if-empty>
	                </else>
	            </if-compare>
	        	<else>
	        		<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankStartDateError"/>
		            <string-to-list string="${tempErrorMessage}" message-field="SERVICE_DATE"  list="error_list"/>
	        	</else>
	        </if-not-empty>
	        <else>
	        	<if-compare field="parameters.jobStatus" operator="equals" value="PENDING">
		        	<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankStartDateError"/>
		            <string-to-list string="${tempErrorMessage}" message-field="jobStatus"  list="error_list"/>
	            </if-compare>
        	</else>
        </if-not-empty>
         
        <if-compare field="parameters.SERVICE_FREQUENCY" operator="equals" value="0">
        	<set field="parameters.SERVICE_FREQUENCY" value="DAILY" type="String"/>
        </if-compare>
        <if-compare field="parameters.SERVICE_FREQUENCY" operator="equals" value="2">
        	<set field="parameters.SERVICE_FREQUENCY" value="MINUTELY" type="String"/>
        </if-compare>
        <if-compare field="parameters.SERVICE_FREQUENCY" operator="equals" value="3">
        	<set field="parameters.SERVICE_FREQUENCY" value="HOURLY" type="String"/>
        </if-compare>
        <if-compare field="parameters.SERVICE_FREQUENCY" operator="equals" value="4">
        	<set field="parameters.SERVICE_FREQUENCY" value="DAILY" type="String"/>
        </if-compare>
        <if-compare field="parameters.SERVICE_FREQUENCY" operator="equals" value="5">
        	<set field="parameters.SERVICE_FREQUENCY" value="WEEKLY" type="String"/>
        </if-compare>
        <if-compare field="parameters.SERVICE_FREQUENCY" operator="equals" value="6">
        	<set field="parameters.SERVICE_FREQUENCY" value="MONTHLY" type="String"/>
        </if-compare>
        <if-compare field="parameters.SERVICE_FREQUENCY" operator="equals" value="7">
        	<set field="parameters.SERVICE_FREQUENCY" value="YEARLY" type="String"/>
        </if-compare>
        
        <if-not-empty field="parameters.SERVICE_INTERVAL">
            <!-- check if this is a valid interval -->
            <call-class-method class-name="com.osafe.services.OsafeAdminScheduledJobServices"  method-name="checkValidInterval" ret-field="isValidInterval">
                <field field="parameters.SERVICE_INTERVAL"/>
            </call-class-method>
            <if-compare field="isValidInterval" operator="equals" value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidIntervalError"/>
                <string-to-list string="${tempErrorMessage}" message-field="SERVICE_INTERVAL"  list="error_list"/>
                <else>
                <!-- check if interval is out of range -->
                <call-class-method class-name="com.osafe.services.OsafeAdminScheduledJobServices"  method-name="checkValidIntervalRange" ret-field="OutofRangeInterval">
                	<field field="parameters.SERVICE_INTERVAL"/>
                	<field field="parameters.SERVICE_FREQUENCY"/>
            	</call-class-method>
            	<if-compare field="OutofRangeInterval" operator="equals" value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="OutRangeIntervalError"/>
                <string-to-list string="${tempErrorMessage}" message-field="SERVICE_INTERVAL"  list="error_list"/>
            	</if-compare>
                </else>
            </if-compare>
        </if-not-empty>
        
        <if-not-empty field="parameters.SERVICE_COUNT">
            <!-- check if this is a valid interval -->
            <call-class-method class-name="com.osafe.services.OsafeAdminScheduledJobServices"  method-name="checkValidInterval" ret-field="isValidCount">
                <field field="parameters.SERVICE_COUNT"/>
            </call-class-method>
            <if-compare field="isValidCount" operator="equals" value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="InvalidFrequencyCountError"/>
                <string-to-list string="${tempErrorMessage}" message-field="SERVICE_COUNT"  list="error_list"/>
                <else>
                <!-- check if count is out of range -->
                <call-class-method class-name="com.osafe.services.OsafeAdminScheduledJobServices"  method-name="checkValidCountRange" ret-field="OutofRangeCount">
                	<field field="parameters.SERVICE_COUNT"/>
                	<field field="parameters.SERVICE_FREQUENCY"/>
            	</call-class-method>
            	<if-compare field="OutofRangeCount" operator="equals" value="false">
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="OutRangeFreqError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="SERVICE_COUNT"  list="error_list"/>
            	</if-compare>
                </else>
            </if-compare>
        </if-not-empty>
        
        <check-errors/>
        
        <!-- update record in entities: JobSandbox, RecurrenceInfo  -->     
        <make-value entity-name="JobSandbox" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" value-field="lookupPKMap"/>
        <find-by-primary-key map="lookupPKMap" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <set from-field="parameters.JOB_NAME" field="lookedUpValue.jobName"/>
        <set from-field="parameters.SERVICE_NAME" field="lookedUpValue.serviceName"/>
        <set from-field="parameters.SERVICE_DATE" field="lookedUpValue.runTime" type="Timestamp"/>
        <store-value value-field="lookedUpValue"/>
        
        <!-- get reccurenceInfoId from JobSandbox -->
        <make-value entity-name="JobSandbox" value-field="JobSandBoxMap"/>
        <set from-field="parameters.jobId" field="JobSandBoxMap.jobId"/>
        <find-by-primary-key map="JobSandBoxMap" value-field="JobSandBoxValues"/>
        <set from-field="JobSandBoxValues.recurrenceInfoId" field="parameters.recurrenceInfoId"/>
        
        <if-not-empty field="parameters.recurrenceInfoId">
	        <!-- get the recurrenceInfo table using the recurrenceInfoId and then get the RecurrenceRuleId  -->
	        <make-value entity-name="RecurrenceInfo" value-field="RecurrenceInfoMap"/>
	        <set from-field="parameters.recurrenceInfoId" field="RecurrenceInfoMap.recurrenceInfoId"/>
	        <find-by-primary-key map="RecurrenceInfoMap" value-field="RecurrenceInfoValues"/>
	        <set from-field="RecurrenceInfoValues.recurrenceRuleId" field="parameters.recurrenceRuleId"/>
	        <set from-field="parameters.SERVICE_DATE" field="RecurrenceInfoValues.startDateTime" type="Timestamp"/>
	        <store-value value-field="RecurrenceInfoValues"/>
	        
	        <!-- get the recurrenceRule table and store the updated values using the recurrenceRuleId -->
	        <make-value entity-name="RecurrenceRule" value-field="RecurrenceRuleMap"/>
	        <set-pk-fields map="parameters" value-field="RecurrenceRuleMap"/>
	        <find-by-primary-key map="RecurrenceRuleMap" value-field="RecurrenceRuleValues"/>
	        <!-- <set from-field="parameters.SERVICE_END_TIME" field="RecurrenceRuleLookedUpValue.lastUpdatedTxStamp"/>-->
	        <set from-field="parameters.SERVICE_FREQUENCY" field="RecurrenceRuleValues.frequency"/>
	        <set from-field="parameters.SERVICE_INTERVAL" field="RecurrenceRuleValues.intervalNumber" type="Long"/>
	        <set from-field="parameters.SERVICE_COUNT" field="RecurrenceRuleValues.countNumber" type="Long"/>
	        <store-value value-field="RecurrenceRuleValues"/>

        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="deleteScheduledJob" short-description="Delete a Scheduled Job">
 		<!-- check for bad or missing values --> 
 		<if-empty field="parameters.currentId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankJobIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="currentId"  list="error_list"/>
        </if-empty>

        <check-errors/>
   
        <!-- delete record in entities: JobSandbox  -->     
        <entity-one entity-name="JobSandbox" value-field="JobSandboxLookedUpValue">
                <field-map field-name="jobId" from-field="parameters.currentId"/>
        </entity-one>
        <if-not-empty field="JobSandboxLookedUpValue">
            <remove-value value-field="JobSandboxLookedUpValue"/>
            <property-to-field resource="OSafeAdminUiLabels" property="DeletedSuccess" field="deletedSuccessMessage"/>
            <string-to-list string="${deletedSuccessMessage}" list="successMessageList"/>
        </if-not-empty>
    </simple-method>
   
</simple-methods>