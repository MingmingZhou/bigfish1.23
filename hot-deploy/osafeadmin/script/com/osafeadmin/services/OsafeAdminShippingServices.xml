<?xml version="1.0" encoding="UTF-8"?>

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:noNamespaceSchemaLocation="http://www.ofbiz.org/dtds/simple-methods.xsd">

    <simple-method method-name="createShippingCharge" short-description="Create a shipping charge">
 		<!-- check for bad or missing values --> 
        <if-empty field="parameters.productStoreShipMethId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankProductStoreShipMethIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="productStoreShipMethId" list="error_list"/>
            <else>
                <set field="maxLength" value="20" type="Integer"/>
                <set field="spaceReplacement" value=" " type="String"/>
                <set field="makeUpCase" value="true" type="Boolean"/>
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="makeValidId" ret-field="productStoreShipMethId">
                    <field field="parameters.productStoreShipMethId" type="String"/>
                    <field field="maxLength" type="Integer"/>
                    <field field="spaceReplacement" type="String"/>
                    <field field="makeUpCase" type="boolean"/>
                </call-class-method>
                <if-empty field="productStoreShipMethId">
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="productStoreShipMethIdLengthError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="productStoreShipMethId"  list="error_list"/>
                <else>
                    <make-value value-field="existingPProductStoreShipmentMethValue" entity-name="ProductStoreShipmentMeth"/>
                    <set-pk-fields map="parameters" value-field="existingPProductStoreShipmentMethValue"/>
                    <set from-field="productStoreShipMethId" field="existingPProductStoreShipmentMethValue.productStoreShipMethId"/>
                    <find-by-primary-key map="existingPProductStoreShipmentMethValue" value-field="existingPProductStoreShipmentMeth"/> 
                        <if-not-empty field="existingPProductStoreShipmentMeth">
                            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="productStoreShipMethIdExistError"/>
                            <string-to-list string="${tempErrorMessage}" message-field="productStoreShipMethId"  list="error_list"/>
                            <else>
                                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidId" ret-field="isValidId">
					                <field field="parameters.productStoreShipMethId"/>
					            </call-class-method>
					            <if-compare field="isValidId" operator="equals" value="false">
					            	<set field="errorKey" from-field="parameters.productStoreShipMethId"/>
					                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidIdError"/>
					                <string-to-list string="${tempErrorMessage}" message-field="productStoreShipMethId"  list="error_list"/>
					            </if-compare>
					            <set field="parameters.productStoreShipMethId" from-field="productStoreShipMethId"/>
                            </else>
                        </if-not-empty>
                    </else>
                </if-empty>
            </else>
        </if-empty>
           
        <if-empty field="parameters.partyId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankPartyIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="partyId"  list="error_list"/>
        </if-empty>
          
        <if-empty field="parameters.shipmentMethodTypeId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankShipmentMethodTypeIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="shipmentMethodTypeId"  list="error_list"/>
        </if-empty>
        
        <if-empty field="parameters.carrierServiceCode">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankCarrierServiceCodeError"/>
            <string-to-list string="${tempErrorMessage}" message-field="carrierServiceCode"  list="error_list"/>
        </if-empty>
 
        <if-not-empty field="parameters.minTotal">
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="isFloat">
                <field field="parameters.minTotal"/>
            </call-class-method>
            <if-compare field="isFloat" operator="equals" value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidMinTotalError"/>
                <string-to-list string="${tempErrorMessage}" message-field="minTotal"  list="error_list"/>
                <else>
                	<set field="parameters.minTotal" from-field="parameters.minTotal" type="BigDecimal"/>
                </else>
            </if-compare>
        </if-not-empty>
        
        <if-not-empty field="parameters.maxTotal">
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="isFloat">
                <field field="parameters.maxTotal"/>
            </call-class-method>
            <if-compare field="isFloat" operator="equals" value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidMaxTotalError"/>
                <string-to-list string="${tempErrorMessage}" message-field="maxTotal"  list="error_list"/>
                <else>
                	<set field="parameters.maxTotal" from-field="parameters.maxTotal" type="BigDecimal"/>
                </else>
            </if-compare>
        </if-not-empty>
        
        <if-not-empty field="parameters.minTotal">
	        <if-not-empty field="parameters.maxTotal">
	        	<if>
                    <condition>
                    	<if-compare operator="greater-equals" value="${parameters.maxTotal}" field="parameters.minTotal" type="BigDecimal"/>
                    </condition>
                    <then>
                        <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MinGreaterError"/>
		            	<string-to-list string="${tempErrorMessage}" message-field="maxTotal"  list="error_list"/>
                    </then>
                </if> 
	        </if-not-empty>
        </if-not-empty>
        
        <if-not-empty field="parameters.minWeight">
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="isFloat">
                <field field="parameters.minWeight"/>
            </call-class-method>
            <if-compare field="isFloat" operator="equals" value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidMinWeightError"/>
                <string-to-list string="${tempErrorMessage}" message-field="minWeight"  list="error_list"/>
                <else>
                	<set field="parameters.minWeight" from-field="parameters.minWeight" type="BigDecimal"/>
                </else>
            </if-compare>
        </if-not-empty>
        <if-not-empty field="parameters.maxWeight">
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="isFloat">
                <field field="parameters.maxWeight"/>
            </call-class-method>
            <if-compare field="isFloat" operator="equals" value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidMaxWeightError"/>
                <string-to-list string="${tempErrorMessage}" message-field="maxWeight"  list="error_list"/>
                <else>
                	<set field="parameters.maxWeight" from-field="parameters.maxWeight" type="BigDecimal"/>
                </else>
            </if-compare>
        </if-not-empty>
        
        <if-not-empty field="parameters.minWeight">
	        <if-not-empty field="parameters.maxWeight">
	        	<if>
                    <condition>
                    	<if-compare operator="greater-equals" value="${parameters.maxWeight}" field="parameters.minWeight" type="BigDecimal"/>
                    </condition>
                    <then>
                        <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MinGreaterWeightError"/>
		            	<string-to-list string="${tempErrorMessage}" message-field="maxWeight"  list="error_list"/>
                    </then>
                </if> 
	        </if-not-empty>
        </if-not-empty>
        
        
        <if-empty field="parameters.sequenceNum">
        	<set field="parameters.sequenceNum" value="1" type="Long"/>
        	<else>
            <call-class-method class-name="com.osafe.util.Util"  method-name="isNumber" ret-field="isNumber">
                <field field="parameters.sequenceNum"/>
            </call-class-method>
            <if-compare field="isNumber" operator="equals" value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidSeqNumError"/>
                <string-to-list string="${tempErrorMessage}" message-field="sequenceNum"  list="error_list"/>
            </if-compare>
            </else>
        </if-empty> 
 
        <if-empty field="parameters.orderFlatPrice">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankOrderFlatPriceError"/>
            <string-to-list string="${tempErrorMessage}" message-field="orderFlatPrice"  list="error_list"/>
            <else>
	            <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="isFloat">
	                <field field="parameters.orderFlatPrice"/>
	            </call-class-method>
	            <if-compare field="isFloat" operator="equals" value="false">
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidFlatRateError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="orderFlatPrice"  list="error_list"/>
	            </if-compare>
            </else>
        </if-empty>
        
        <set from-field="globalContext.productStoreId" field="parameters.productStoreId"/>
        
        <set field="carrier" value="CARRIER" type="String"/>
        <set from-field="carrier" field="parameters.roleTypeId"/>

        <check-errors/>
        
        <!-- check if combination of partyId and shipMethodTypeId exists -->
        <make-value entity-name="CarrierShipmentMethod" value-field="carrierShipmentMethodMap"/>
        <set-pk-fields map="parameters" value-field="carrierShipmentMethodMap"/>
        <set field="carrier" value="CARRIER" type="String"/>
        <set from-field="carrier" field="carrierShipmentMethodMap.roleTypeId"/>
        <find-by-primary-key map="carrierShipmentMethodMap" value-field="carrierShipmentMethodValue"/>

        <!-- create record in entities: CarrierShipmentMethod, ProductStoreShipmentMeth and ShipmentCostEstimate -->  
        <if-empty field="carrierShipmentMethodValue.partyId">
	        <set-service-fields service-name="createCarrierShip" map="parameters" to-map="createCarrierShipCtx"/>
	        <make-value value-field="createCarrierShipEntity" entity-name="CarrierShipmentMethod"/>
	        <set-pk-fields map="createCarrierShipCtx" value-field="createCarrierShipEntity"/>
	        <set-nonpk-fields map="createCarrierShipCtx" value-field="createCarrierShipEntity"/>
	        <now-timestamp field="nowTimestamp"/>
	        <set from-field="nowTimestamp" field="createCarrierShipEntity.createdTxStamp"/>
	        <set from-field="nowTimestamp" field="createCarrierShipEntity.createdStamp"/>
	        <set from-field="nowTimestamp" field="createCarrierShipEntity.lastUpdatedTxStamp"/>
	        <set from-field="nowTimestamp" field="createCarrierShipEntity.lastUpdatedStamp"/>
	        <set field="carrier" value="CARRIER" type="String"/>
	        <set from-field="carrier" field="createCarrierShipEntity.roleTypeId"/>
	        <create-value value-field="createCarrierShipEntity"/>
	    <else>
		    <make-value entity-name="CarrierShipmentMethod" value-field="lookupPKMap"/>
	        <set-pk-fields map="parameters" value-field="lookupPKMap"/>
	        <find-by-primary-key map="lookupPKMap" value-field="lookedUpValue"/>
	        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
	        <now-timestamp field="nowTimestamp"/>
	        <set from-field="nowTimestamp" field="lookedUpValue.lastUpdatedTxStamp"/>
	        <set from-field="nowTimestamp" field="lookedUpValue.lastUpdatedStamp"/>
	        <set field="carrier" value="CARRIER" type="String"/>
	        <set from-field="carrier" field="lookedUpValue.roleTypeId"/>
	        <store-value value-field="lookedUpValue"/>
	    </else>
        </if-empty>
        
        
        <make-value value-field="createShipChargeEntity" entity-name="ProductStoreShipmentMeth"/>
        <set-nonpk-fields map="parameters" value-field="createShipChargeEntity"/>
        <if-empty field="parameters.productStoreShipMethId">
            <sequenced-id sequence-name="ProductStoreShipmentMeth" field="createShipChargeEntity.productStoreShipMethId"/>
            <set field="parameters.productStoreShipMethId" from-field="createShipChargeEntity.productStoreShipMethId"/>
            <else>
                <set field="createShipChargeEntity.productStoreShipMethId" from-field="parameters.productStoreShipMethId"/>
            </else>
        </if-empty>
        <now-timestamp field="nowTimestamp"/>
        <set from-field="nowTimestamp" field="createShipChargeEntity.createdTxStamp"/>
        <set from-field="nowTimestamp" field="createShipChargeEntity.createdStamp"/>
        <set from-field="nowTimestamp" field="createShipChargeEntity.lastUpdatedTxStamp"/>
        <set from-field="nowTimestamp" field="createShipChargeEntity.lastUpdatedStamp"/>
        <set field="carrier" value="CARRIER" type="String"/>
        <set from-field="carrier" field="createShipChargeEntity.roleTypeId"/>
        <set from-field="parameters.productStoreId" field="createShipChargeEntity.productStoreId"/>
        <set from-field="parameters.sequenceNum" field="createShipChargeEntity.sequenceNumber" type="Long"/>
        <set field="createShipChargeEntity.allowPoBoxAddr" from-field="parameters.deliverToPOBox" type="String"/>
        <set field="createShipChargeEntity.shipmentGatewayConfigId" from-field="parameters.shipmentGatewayConfigId" type="String"/>
        <set field="createShipChargeEntity.includeGeoId" from-field="parameters.includeGeoId" type="String"/>
        <set field="createShipChargeEntity.excludeGeoId" from-field="parameters.excludeGeoId" type="String"/>
        <set field="createShipChargeEntity.includeFeatureGroup" from-field="parameters.includeFeatureGroupId" type="String"/>
        <set field="createShipChargeEntity.excludeFeatureGroup" from-field="parameters.excludeFeatureGroupId" type="String"/>
        <create-value value-field="createShipChargeEntity"/>
               
        <make-value value-field="createShipmentCostEstimateEntity" entity-name="ShipmentCostEstimate"/>
        <!--  need to sequence because the user never enters the shipmentCostEstimateId. -->
        <sequenced-id sequence-name="ShipmentCostEstimate" field="createShipmentCostEstimateEntity.shipmentCostEstimateId"/>
        <now-timestamp field="nowTimestamp"/>
        <set from-field="nowTimestamp" field="createShipmentCostEstimateEntity.createdTxStamp"/>
        <set from-field="nowTimestamp" field="createShipmentCostEstimateEntity.createdStamp"/>
        <set from-field="nowTimestamp" field="createShipmentCostEstimateEntity.lastUpdatedTxStamp"/>
        <set from-field="nowTimestamp" field="createShipmentCostEstimateEntity.lastUpdatedStamp"/>
        <set from-field="parameters.productStoreId" field="createShipmentCostEstimateEntity.productStoreId"/>
        <set from-field="parameters.shipmentMethodTypeId" field="createShipmentCostEstimateEntity.shipmentMethodTypeId"/>
        <set from-field="parameters.partyId" field="createShipmentCostEstimateEntity.carrierPartyId"/>
        <set field="carrier" value="CARRIER" type="String"/>
        <set from-field="carrier" field="createShipmentCostEstimateEntity.carrierRoleTypeId"/>
        <set from-field="parameters.productStoreShipMethId" field="createShipmentCostEstimateEntity.productStoreShipMethId"/>
        <set from-field="parameters.orderFlatPrice" field="createShipmentCostEstimateEntity.orderFlatPrice" type="BigDecimal"/>
        <create-value value-field="createShipmentCostEstimateEntity"/>

    </simple-method>
  
    <simple-method method-name="updateShippingCharge" short-description="Update a shipping charge">
    	<!-- check for bad or missing values -->     
    	<if-empty field="parameters.productStoreShipMethId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankProductStoreShipMethIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="productStoreShipMethId"  list="error_list"/>
            <else>
                <set field="maxLength" value="20" type="Integer"/>
                <set field="spaceReplacement" value=" " type="String"/>
                <set field="makeUpCase" value="true" type="Boolean"/>
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="makeValidId" ret-field="productStoreShipMethId">
                    <field field="parameters.productStoreShipMethId" type="String"/>
                    <field field="maxLength" type="Integer"/>
                    <field field="spaceReplacement" type="String"/>
                    <field field="makeUpCase" type="boolean"/>
                </call-class-method>
                <if-empty field="productStoreShipMethId">
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="productStoreShipMethIdLengthError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="productStoreShipMethId"  list="error_list"/>
                    <else>
                    	<set field="parameters.productStoreShipMethId" from-field="productStoreShipMethId"/>
                    </else>
                </if-empty>
            </else>
        </if-empty>
   
        <if-empty field="parameters.partyId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankPartyIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="partyId"  list="error_list"/>
        </if-empty>
          
        <if-empty field="parameters.shipmentMethodTypeId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankShipmentMethodTypeIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="shipmentMethodTypeId"  list="error_list"/>
        </if-empty>
        
        <!-- check if combination of partyId and shipMethodTypeId exists -->
        <make-value entity-name="CarrierShipmentMethod" value-field="carrierShipmentMethodMap"/>
        <set-pk-fields map="parameters" value-field="carrierShipmentMethodMap"/>
        <set field="carrier" value="CARRIER" type="String"/>
        <set from-field="carrier" field="carrierShipmentMethodMap.roleTypeId"/>
        <find-by-primary-key map="carrierShipmentMethodMap" value-field="carrierShipmentMethodValue"/>
        
        <if-empty field="carrierShipmentMethodValue.partyId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BadCarrierShipmentIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="partyId"  list="error_list"/>
        </if-empty>
        
        <if-not-empty field="parameters.minTotal">
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="isFloat">
                <field field="parameters.minTotal"/>
            </call-class-method>
            <if-compare field="isFloat" operator="equals" value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidMinTotalError"/>
                <string-to-list string="${tempErrorMessage}" message-field="minTotal"  list="error_list"/>
                <else>
                	<set field="parameters.minTotal" from-field="parameters.minTotal" type="BigDecimal"/>
                </else>
            </if-compare>
        </if-not-empty>
        
        <if-not-empty field="parameters.maxTotal">
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="isFloat">
                <field field="parameters.maxTotal"/>
            </call-class-method>
            <if-compare field="isFloat" operator="equals" value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidMaxTotalError"/>
                <string-to-list string="${tempErrorMessage}" message-field="maxTotal"  list="error_list"/>
                <else>
                	<set field="parameters.maxTotal" from-field="parameters.maxTotal" type="BigDecimal"/>
                </else>
            </if-compare>
        </if-not-empty>
        
        <if-not-empty field="parameters.minTotal">
	        <if-not-empty field="parameters.maxTotal">
	        	<if>
                    <condition>
                    	<if-compare  operator="greater-equals" value="${parameters.maxTotal}" field="parameters.minTotal" type="BigDecimal"/>
                    </condition>
                    <then>
                        <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MinGreaterError"/>
		            	<string-to-list string="${tempErrorMessage}" message-field="minTotal"  list="error_list"/>
                    </then>
                </if>
	        </if-not-empty>
        </if-not-empty>
        
        <if-not-empty field="parameters.minWeight">
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="isFloat">
                <field field="parameters.minWeight"/>
            </call-class-method>
            <if-compare field="isFloat" operator="equals" value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidMinWeightError"/>
                <string-to-list string="${tempErrorMessage}" message-field="minWeight"  list="error_list"/>
                <else>
                	<set field="parameters.minWeight" from-field="parameters.minWeight" type="BigDecimal"/>
                </else>
            </if-compare>
        </if-not-empty>
        
        <if-not-empty field="parameters.maxWeight">
            <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="isFloat">
                <field field="parameters.maxWeight"/>
            </call-class-method>
            <if-compare field="isFloat" operator="equals" value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidMaxWeightError"/>
                <string-to-list string="${tempErrorMessage}" message-field="maxWeight"  list="error_list"/>
                <else>
                	<set field="parameters.maxWeight" from-field="parameters.maxWeight" type="BigDecimal"/>
                </else>
            </if-compare>
        </if-not-empty>
        
        <if-not-empty field="parameters.minWeight">
	        <if-not-empty field="parameters.maxWeight">
	        	<if>
                    <condition>
                    	<if-compare  operator="greater-equals" value="${parameters.maxWeight}" field="parameters.minWeight" type="BigDecimal"/>
                    </condition>
                    <then>
                        <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="MinGreaterWeightError"/>
		            	<string-to-list string="${tempErrorMessage}" message-field="maxWeight"  list="error_list"/>
                    </then>
                </if>
	        </if-not-empty>
        </if-not-empty>
        
        <if-empty field="parameters.sequenceNum">
        	<set field="parameters.sequenceNum" value="1" type="Long"/>
        	<else>
            <call-class-method class-name="com.osafe.util.Util"  method-name="isNumber" ret-field="isNumber">
                <field field="parameters.sequenceNum" />
            </call-class-method>
            <if-compare field="isNumber" operator="equals" value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidSeqNumError"/>
                <string-to-list string="${tempErrorMessage}" message-field="sequenceNum"  list="error_list"/>
            </if-compare>
            </else>
        </if-empty>  
        
        <if-empty field="parameters.orderFlatPrice">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankOrderFlatPriceError"/>
            <string-to-list string="${tempErrorMessage}" message-field="orderFlatPrice"  list="error_list"/>
            <else>
	            <call-class-method class-name="org.ofbiz.base.util.UtilValidate"  method-name="isFloat" ret-field="isFloat">
	                <field field="parameters.orderFlatPrice"/>
	            </call-class-method>
	            <if-compare field="isFloat" operator="equals" value="false">
	                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidFlatRateError"/>
	                <string-to-list string="${tempErrorMessage}" message-field="orderFlatPrice"  list="error_list"/>
	            </if-compare>
            </else>
        </if-empty>
        
        <set field="carrier" value="CARRIER" type="String"/>
        <set from-field="carrier" field="parameters.roleTypeId"/>

        <check-errors/>
        
        <!-- update record in entities: CarrierShipmentMethod, ProductStoreShipmentMeth and ShipmentCostEstimate --> 
        <make-value entity-name="CarrierShipmentMethod" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" value-field="lookupPKMap"/>
        <find-by-primary-key map="lookupPKMap" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <now-timestamp field="nowTimestamp"/>
        <set from-field="nowTimestamp" field="lookedUpValue.lastUpdatedTxStamp"/>
        <set from-field="nowTimestamp" field="lookedUpValue.lastUpdatedStamp"/>
        <set field="carrier" value="CARRIER" type="String"/>
        <set from-field="carrier" field="lookedUpValue.roleTypeId"/>
        <store-value value-field="lookedUpValue"/>
	            
        <make-value entity-name="ProductStoreShipmentMeth" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" value-field="lookupPKMap"/>
        <find-by-primary-key map="lookupPKMap" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <now-timestamp field="nowTimestamp"/>
        <set from-field="nowTimestamp" field="lookedUpValue.lastUpdatedTxStamp"/>
        <set from-field="nowTimestamp" field="lookedUpValue.lastUpdatedStamp"/>
        <set field="carrier" value="CARRIER" type="String"/>
        <set from-field="carrier" field="lookedUpValue.roleTypeId"/>
        <set from-field="parameters.shipmentGatewayConfigId" field="lookedUpValue.shipmentGatewayConfigId" type="String"/>
        <set from-field="parameters.sequenceNum" field="lookedUpValue.sequenceNumber" type="Long"/>
        <set from-field="parameters.deliverToPOBox" field="lookedUpValue.allowPoBoxAddr" type="String"/>
        <set from-field="parameters.includeGeoId" field="lookedUpValue.includeGeoId" type="String"/>
        <set from-field="parameters.excludeGeoId" field="lookedUpValue.excludeGeoId" type="String"/>
        <set from-field="parameters.includeFeatureGroupId " field="lookedUpValue.includeFeatureGroup" type="String" set-if-null="true"/>
        <set from-field="parameters.excludeFeatureGroupId" field="lookedUpValue.excludeFeatureGroup" type="String" set-if-null="true"/>
        <store-value value-field="lookedUpValue"/>

        <make-value entity-name="ShipmentCostEstimate" value-field="anotherLookupPKMap"/>
        <set from-field="parameters.shipmentCostEstimateId" field="shipmentCostEstValue.shipmentCostEstimateId"/>
        <set from-field="parameters.productStoreShipMethId" field="shipmentCostEstValue.productStoreShipMethId"/>
        <set from-field="parameters.partyId" field="shipmentCostEstValue.carrierPartyId"/>
        <set from-field="parameters.shipmentMethodTypeId" field="shipmentCostEstValue.shipmentMethodTypeId"/>
        <set from-field="parameters.minTotal" field="shipmentCostEstValue.minTotal" type="BigDecimal"/>
        <set from-field="parameters.maxTotal" field="shipmentCostEstValue.maxTotal" type="BigDecimal"/>
        <set from-field="parameters.orderFlatPrice" field="shipmentCostEstValue.orderFlatPrice" type="BigDecimal"/>
        <now-timestamp field="nowTimestamp"/>
        <set from-field="nowTimestamp" field="shipmentCostEstValue.lastUpdatedTxStamp"/>
        <set from-field="nowTimestamp" field="shipmentCostEstValue.lastUpdatedStamp"/>
        <set from-field="globalContext.productStoreId" field="shipmentCostEstValue.productStoreId"/>
        <set field="carrier" value="CARRIER" type="String"/>
        <set from-field="carrier" field="shipmentCostEstValue.carrierRoleTypeId"/>
        <set-pk-fields map="shipmentCostEstValue" value-field="anotherLookupPKMap"/>
        <find-by-primary-key map="anotherLookupPKMap" value-field="anotherLookedUpValuep"/>
        <set-nonpk-fields map="shipmentCostEstValue" value-field="anotherLookedUpValuep"/>
        <store-value value-field="anotherLookedUpValuep"/>

    </simple-method>
    
    <simple-method method-name="deleteShippingCharge" short-description="Delete a shipping charge">
    	<!-- check for missing productStoreShipMethId --> 
        <if-empty field="parameters.productStoreShipMethId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankProductStoreShipMethIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="productStoreShipMethId" list="error_list"/>
        </if-empty>
       
        <check-errors/>
        
        <!-- delete records from entities: ProductStoreShipmentMeth and ShipmentCostEstimate --> 
        <set from-field="parameters.productStoreShipMethId" field="shipmentCostEstimateLookedMap.productStoreShipMethId"/>
        <set from-field="globalContext.productStoreId" field="shipmentCostEstimateLookedMap.productStoreId"/>
        <set field="carrier" value="CARRIER" type="String"/>
        <set from-field="carrier" field="shipmentCostEstimateLookedMap.carrierRoleTypeId"/>
       	<find-by-and entity-name="ShipmentCostEstimate" map="shipmentCostEstimateLookedMap" list="shipmentCostEstimateList" use-cache="true"/>
       	<call-object-method obj-field="shipmentCostEstimateList" method-name="size" ret-field="shipmentCostEstimateListSize"/>
       	<if-compare field="shipmentCostEstimateListSize" operator="greater" value="0" type="Integer">
       		<call-class-method class-name="org.ofbiz.entity.util.EntityUtil" method-name="getFirst" ret-field="shipmentCostEstimateValue">
               <field field="shipmentCostEstimateList" type="List"/>
           </call-class-method>
       	</if-compare>
       	
        <if-not-empty field="shipmentCostEstimateValue">
            <remove-value value-field="shipmentCostEstimateValue"/>
        </if-not-empty>

        <entity-one entity-name="ProductStoreShipmentMeth" value-field="productStoreShipMethLookedUpValue"/>
        <if-not-empty field="productStoreShipMethLookedUpValue">
            <remove-value value-field="productStoreShipMethLookedUpValue"/>
            <property-to-field resource="OSafeAdminUiLabels" property="DeletedSuccess" field="deletedSuccessMessage"/>
            <string-to-list string="${deletedSuccessMessage}" list="successMessageList"/>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="createCarrier" short-description="Create a shipping charge carrier">
    
        <if-empty field="parameters.carrierPartyId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankPartyIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="carrierPartyId"  list="error_list"/>
            <else>
                <set field="maxLength" value="20" type="Integer"/>
                <set field="spaceReplacement" value=" " type="String"/>
                <set field="makeUpCase" value="true" type="Boolean"/>
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="makeValidId" ret-field="partyId">
                    <field field="parameters.carrierPartyId" type="String"/>
                    <field field="maxLength" type="Integer"/>
                    <field field="spaceReplacement" type="String"/>
                    <field field="makeUpCase" type="boolean"/>
                </call-class-method>
                <if-empty field="partyId">
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="partyIdLengthError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="carrierPartyId"  list="error_list"/>
                    <else>
                        <entity-one entity-name="Party" value-field="existingParty">
                            <field-map field-name="partyId" from-field="partyId"/>
                        </entity-one>
                        <if-not-empty field="existingParty">
                        	<set field="errorKey" from-field="parameters.carrierPartyId"/>
                            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="partyIdExistError"/>
                            <string-to-list string="${tempErrorMessage}" message-field="carrierPartyId"  list="error_list"/>
                            <else>
                            	<call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidId" ret-field="isValidId">
					                <field field="parameters.carrierPartyId"/>
					            </call-class-method>
					            <if-compare field="isValidId" operator="equals" value="false">
					            	<set field="errorKey" from-field="parameters.carrierPartyId"/>
					                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidIdError"/>
					                <string-to-list string="${tempErrorMessage}" message-field="carrierPartyId"  list="error_list"/>
					            </if-compare>
					            <set field="parameters.partyId" from-field="partyId"/>
                            </else>
                        </if-not-empty>
                    </else>
                </if-empty>
            </else>
        </if-empty>
        
        <if-empty field="parameters.groupName">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankGroupNameError"/>
            <string-to-list string="${tempErrorMessage}" message-field="groupName"  list="error_list"/>
        </if-empty>
        
        <check-errors/>
 
        <set-service-fields service-name="createCarrier" map="parameters" to-map="createCarrierCtx"/>
        <make-value value-field="newEntity" entity-name="Party"/>
        <set-nonpk-fields map="createCarrierCtx" value-field="newEntity"/>
        <if-empty field="parameters.partyId">
            <sequenced-id sequence-name="Party" field="newEntity.partyId"/>
            <set field="parameters.partyId" from-field="newEntity.partyId"/>
            <else>
                <set field="newEntity.partyId" from-field="parameters.partyId"/>
            </else>
        </if-empty>
        <now-timestamp field="nowTimestamp"/>
        <set from-field="nowTimestamp" field="newEntity.createdTxStamp"/>
        <set from-field="nowTimestamp" field="newEntity.createdStamp"/>
        <set from-field="nowTimestamp" field="newEntity.lastUpdatedTxStamp"/>
        <set from-field="nowTimestamp" field="newEntity.lastUpdatedStamp"/>
        <set from-field="nowTimestamp" field="newEntity.lastModifiedDate"/>
        <set from-field="nowTimestamp" field="newEntity.createdDate"/>
        <set field="partyTypeId" value="PARTY_GROUP" type="String"/>
        <set from-field="partyTypeId" field="newEntity.partyTypeId"/>
        <set field="statusId" value="PARTY_ENABLED" type="String"/>
        <set from-field="statusId" field="newEntity.statusId"/>
        <create-value value-field="newEntity"/>
         
        <make-value value-field="anotherNewEntity" entity-name="PartyRole"/>
        <set from-field="parameters.partyId" field="anotherNewEntity.partyId" />
        <now-timestamp field="nowTimestamp"/>
        <set from-field="nowTimestamp" field="anotherNewEntity.createdTxStamp"/>
        <set from-field="nowTimestamp" field="anotherNewEntity.createdStamp"/>
        <set from-field="nowTimestamp" field="anotherNewEntity.lastUpdatedTxStamp"/>
        <set from-field="nowTimestamp" field="anotherNewEntity.lastUpdatedStamp"/>
        <set field="roleTypeId" value="CARRIER" type="String"/>
        <set from-field="roleTypeId" field="anotherNewEntity.roleTypeId"/>
        <create-value value-field="anotherNewEntity"/>
        
        <make-value value-field="partyGroupEntity" entity-name="PartyGroup"/>
        <set from-field="parameters.partyId" field="partyGroupEntity.partyId" />
        <set from-field="parameters.groupName" field="partyGroupEntity.groupName" />
        <now-timestamp field="nowTimestamp"/>
        <set from-field="nowTimestamp" field="partyGroupEntity.createdTxStamp"/>
        <set from-field="nowTimestamp" field="partyGroupEntity.createdStamp"/>
        <set from-field="nowTimestamp" field="partyGroupEntity.lastUpdatedTxStamp"/>
        <set from-field="nowTimestamp" field="partyGroupEntity.lastUpdatedStamp"/>
        <create-value value-field="partyGroupEntity"/>

		<!-- Create Tracking URL  -->
        <set-service-fields service-name="createPartyContent" map="parameters" to-map="createPartyTrackingUrlContentCtx"/>
        <set-service-fields service-name="createTextContent" map="parameters" to-map="createTextTrackingUrlContentCtx"/>
        <set field="createTextTrackingUrlContentCtx.dataResourceTypeId" value="ELECTRONIC_TEXT"/>
        <set field="createTextTrackingUrlContentCtx.dataTemplateTypeId" value="FTL"/>
        <set field="createTextTrackingUrlContentCtx.contentTypeId" value="DOCUMENT"/>
        <set field="createTextTrackingUrlContentCtx.statusId" value="CTNT_PUBLISHED"/>
        <set field="createTextTrackingUrlContentCtx.textData" from-field="parameters.trackingURL"/>
        <call-service service-name="createTextContent" in-map-name="createTextTrackingUrlContentCtx">
            <result-to-field result-name="contentId" field="createPartyTrackingUrlContentCtx.contentId"/>
        </call-service>
        <set field="createPartyTrackingUrlContentCtx.partyContentTypeId" value="TRACKING_URL"/>        
        <call-service service-name="createPartyContent" in-map-name="createPartyTrackingUrlContentCtx"/>
        <!-- End of Create Tracking URL -->
        
    </simple-method>
    
    <simple-method method-name="createCarrierShip" short-description="Create a carrier shipment method">
    	<set field="carrier" value="CARRIER" type="String"/>
        <set from-field="carrier" field="parameters.roleTypeId"/>
        
        <!-- check if it is already existing --> 
        <if-empty field="parameters.partyId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankPartyIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="partyId"  list="error_list"/>
            <else>
	            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidId" ret-field="isValidId">
					<field field="parameters.partyId"/>
				</call-class-method>
				<if-compare field="isValidId" operator="equals" value="false">
					<set field="errorKey" from-field="parameters.partyId"/>
					<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidIdError"/>
					<string-to-list string="${tempErrorMessage}" message-field="partyId"  list="error_list"/>
				</if-compare>
            </else>
        </if-empty>
        
        <if-not-empty field="parameters.partyId">
        	<if-not-empty field="parameters.shipmentMethodTypeId">
        		<if-not-empty field="parameters.roleTypeId">
        			<entity-one entity-name="CarrierShipmentMethod" value-field="existingCarrierShipmentMethod">
                            <field-map field-name="partyId" from-field="parameters.partyId"/>
                            <field-map field-name="shipmentMethodTypeId" from-field="parameters.shipmentMethodTypeId"/>
                            <field-map field-name="roleTypeId" from-field="parameters.roleTypeId"/>
                    </entity-one>
                    <if-not-empty field="existingCarrierShipmentMethod">
                            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="CarrierShipmentMethodExistError"/>
                            <string-to-list string="${tempErrorMessage}" message-field="partyId"  list="error_list"/>
                    </if-not-empty>
        		</if-not-empty>
        	</if-not-empty>
        </if-not-empty>
        
 		<!-- check for bad or missing values -->            
        <if-empty field="parameters.partyId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankPartyIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="partyId"  list="error_list"/>
        </if-empty>
          
        <if-empty field="parameters.shipmentMethodTypeId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankShipmentMethodTypeIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="shipmentMethodTypeId"  list="error_list"/>
        </if-empty>
 
        <if-empty field="parameters.carrierServiceCode">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankCarrierServiceCodeError"/>
            <string-to-list string="${tempErrorMessage}" message-field="carrierServiceCode"  list="error_list"/>
        </if-empty>

        <if-empty field="parameters.sequenceNumber">
        	<set field="parameters.sequenceNumber" value="1" type="Long"/>
        	<else>
            <call-class-method class-name="com.osafe.util.Util"  method-name="isNumber" ret-field="isNumber">
                <field field="parameters.sequenceNumber"/>
            </call-class-method>
            <if-compare field="isNumber" operator="equals" value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidSeqNumError"/>
                <string-to-list string="${tempErrorMessage}" message-field="sequenceNumber"  list="error_list"/>
                <else>
                	<set field="parameters.sequenceNumber" from-field="parameters.sequenceNumber" type="Long"/>
                </else>
            </if-compare>
            </else>
        </if-empty> 

        <check-errors/>
        
        <!-- create record in entity: CarrierShipmentMethod -->  
        <set-service-fields service-name="createCarrierShip" map="parameters" to-map="createCarrierShipCtx"/>
        <make-value value-field="createCarrierShipEntity" entity-name="CarrierShipmentMethod"/>
        <set-pk-fields map="createCarrierShipCtx" value-field="createCarrierShipEntity"/>
        <set-nonpk-fields map="createCarrierShipCtx" value-field="createCarrierShipEntity"/>
        <now-timestamp field="nowTimestamp"/>
        <set from-field="nowTimestamp" field="createCarrierShipEntity.createdTxStamp"/>
        <set from-field="nowTimestamp" field="createCarrierShipEntity.createdStamp"/>
        <set from-field="nowTimestamp" field="createCarrierShipEntity.lastUpdatedTxStamp"/>
        <set from-field="nowTimestamp" field="createCarrierShipEntity.lastUpdatedStamp"/>
        <set field="carrier" value="CARRIER" type="String"/>
        <set from-field="carrier" field="createCarrierShipEntity.roleTypeId"/>
        <set from-field="parameters.sequenceNumber" field="createCarrierShipEntity.sequenceNumber" type="Long"/>
        <create-value value-field="createCarrierShipEntity"/>

    </simple-method>
  
    <simple-method method-name="updateCarrierShip" short-description="Update a carrier shipment method">  
    	<set field="carrier" value="CARRIER" type="String"/>
        <set from-field="carrier" field="parameters.roleTypeId"/>    
 		<!-- check for bad or missing values -->            
        <if-empty field="parameters.partyId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankPartyIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="partyId"  list="error_list"/>
            <else>
	            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidId" ret-field="isValidId">
					<field field="parameters.partyId"/>
				</call-class-method>
				<if-compare field="isValidId" operator="equals" value="false">
					<set field="errorKey" from-field="parameters.partyId"/>
					<property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidIdError"/>
					<string-to-list string="${tempErrorMessage}" message-field="partyId"  list="error_list"/>
				</if-compare>
            </else>
        </if-empty>
          
        <if-empty field="parameters.shipmentMethodTypeId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankShipmentMethodTypeIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="shipmentMethodTypeId"  list="error_list"/>
        </if-empty>
 
        <if-empty field="parameters.carrierServiceCode">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankCarrierServiceCodeError"/>
            <string-to-list string="${tempErrorMessage}" message-field="carrierServiceCode"  list="error_list"/>
        </if-empty>

        <if-empty field="parameters.sequenceNumber">
        	<set field="parameters.sequenceNumber" value="1" type="Long"/>
        	<else>
            <call-class-method class-name="com.osafe.util.Util"  method-name="isNumber" ret-field="isNumber">
                <field field="parameters.sequenceNumber"/>
            </call-class-method>
            <if-compare field="isNumber" operator="equals" value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidSeqNumError"/>
                <string-to-list string="${tempErrorMessage}" message-field="sequenceNumber"  list="error_list"/>
                <else>
                	<set field="parameters.sequenceNumber" from-field="parameters.sequenceNumber" type="Long"/>
                </else>
            </if-compare>
            </else>
        </if-empty> 

        <check-errors/>
        
        <!-- update record in entity: CarrierShipmentMethod -->     
        <make-value entity-name="CarrierShipmentMethod" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" value-field="lookupPKMap"/>
        <find-by-primary-key map="lookupPKMap" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <now-timestamp field="nowTimestamp"/>
        <set from-field="nowTimestamp" field="lookedUpValue.lastUpdatedTxStamp"/>
        <set from-field="nowTimestamp" field="lookedUpValue.lastUpdatedStamp"/>
        <set field="carrier" value="CARRIER" type="String"/>
        <set from-field="carrier" field="lookedUpValue.roleTypeId"/>
        <set from-field="parameters.sequenceNumber" field="createCarrierShipEntity.sequenceNumber" type="Long"/>
        <store-value value-field="lookedUpValue"/>

    </simple-method>
    
    <simple-method method-name="createShipmentMethod" short-description="Create shipment method type">
    
        <if-empty field="parameters.shipmentMethodTypeId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankShipmentMethodTypeIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="shipmentMethodTypeId"  list="error_list"/>
            <else>
                <set field="maxLength" value="20" type="Integer"/>
                <set field="spaceReplacement" value=" " type="String"/>
                <set field="makeUpCase" value="true" type="Boolean"/>
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="makeValidId" ret-field="shipmentMethodTypeId">
                    <field field="parameters.shipmentMethodTypeId" type="String"/>
                    <field field="maxLength" type="Integer"/>
                    <field field="spaceReplacement" type="String"/>
                    <field field="makeUpCase" type="boolean"/>
                </call-class-method>
                <if-empty field="shipmentMethodTypeId">
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ShipmentMethodTypeIdLengthError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="shipmentMethodTypeId"  list="error_list"/>
                    <else>
                        <set field="shipmentMethodTypePK.shipmentMethodTypeId" from-field="shipmentMethodTypeId"/>
                        <find-by-primary-key value-field="existingShipmentMethodType" map="shipmentMethodTypePK" entity-name="ShipmentMethodType"/>
                        <if-not-empty field="existingShipmentMethodType">
                            <set field="shippingMethodType" from-field="shipmentMethodTypeId"/>
                            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ShipmentMethodTypeIdExistError"/>
                            <string-to-list string="${tempErrorMessage}" message-field="shipmentMethodTypeId"  list="error_list"/>
                        <else>
                                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isValidId" ret-field="isValidId">
					                <field field="parameters.shipmentMethodTypeId"/>
					            </call-class-method>
					            <if-compare field="isValidId" operator="equals" value="false">
					            	<set field="errorKey" from-field="parameters.shipmentMethodTypeId"/>
					                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidIdError"/>
					                <string-to-list string="${tempErrorMessage}" message-field="shipmentMethodTypeId"  list="error_list"/>
					            </if-compare>
					            <set field="parameters.shipmentMethodTypeId" from-field="shipmentMethodTypeId"/>
                        </else>
                        </if-not-empty>
                    </else>
                </if-empty>
            </else>
            
        </if-empty>
        <if-empty field="parameters.description">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankShipmentMethodTypeDescriptionError"/>
            <string-to-list string="${tempErrorMessage}" message-field="description"  list="error_list"/>
        </if-empty>
        <if-empty field="parameters.sequenceNum">
        	<set field="parameters.sequenceNum" value="1" type="Long"/>
        <else>
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isNumber" ret-field="isNumber">
                <field field="parameters.sequenceNum"/>
            </call-class-method>
            <if-compare field="isNumber" operator="equals" value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidSeqNumError"/>
                <string-to-list string="${tempErrorMessage}" message-field="sequenceNum"  list="error_list"/>
            </if-compare>
            </else>
        </if-empty> 
    
        <check-errors/>
 
        <set-service-fields service-name="createShipmentMethodType" map="parameters" to-map="createShipmentMethodTypeCtx"/>
        <set from-field="parameters.sequenceNum" field="createShipmentMethodTypeCtx.sequenceNum" type="Long"/>
        <call-service service-name="createShipmentMethodType" in-map-name="createShipmentMethodTypeCtx">
            <result-to-field result-name="shipmentMethodTypeId"/>
        </call-service>
    </simple-method>
    
    <simple-method method-name="updateCarrier" short-description="Update a carrier">
    	<!-- check for bad or missing values -->     
    	<if-empty field="parameters.carrierPartyId">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankPartyIdError"/>
            <string-to-list string="${tempErrorMessage}" message-field="carrierPartyId"  list="error_list"/>
            <else>
                <set field="maxLength" value="20" type="Integer"/>
                <set field="spaceReplacement" value=" " type="String"/>
                <set field="makeUpCase" value="true" type="Boolean"/>
                <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="makeValidId" ret-field="partyId">
                    <field field="parameters.carrierPartyId" type="String"/>
                    <field field="maxLength" type="Integer"/>
                    <field field="spaceReplacement" type="String"/>
                    <field field="makeUpCase" type="boolean"/>
                </call-class-method>
                <if-empty field="partyId">
                    <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="partyIdLengthError"/>
                    <string-to-list string="${tempErrorMessage}" message-field="carrierPartyId"  list="error_list"/>
                    <else>
                    	<set field="parameters.partyId" from-field="partyId"/>
                    </else>
                </if-empty>
            </else>
        </if-empty>
          
        <if-empty field="parameters.groupName">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankGroupNameError"/>
            <string-to-list string="${tempErrorMessage}" message-field="groupName"  list="error_list"/>
        </if-empty>
        
        <check-errors/>
        
        <!-- update record in entity: PartyCroup -->     
        <make-value entity-name="PartyGroup" value-field="lookupPKMap"/>
        <set-pk-fields map="parameters" value-field="lookupPKMap"/>
        <find-by-primary-key map="lookupPKMap" value-field="lookedUpValue"/>
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <now-timestamp field="nowTimestamp"/>
        <set from-field="nowTimestamp" field="lookedUpValue.lastUpdatedTxStamp"/>
        <set from-field="nowTimestamp" field="lookedUpValue.lastUpdatedStamp"/>
        <store-value value-field="lookedUpValue"/>
        
        <!-- Update Tracking URL -->
        <if-not-empty field="parameters.trackingUrlDataResourceId">
            <if-not-empty field="parameters.trackingURL">
              <set-service-fields service-name="updateElectronicText" map="parameters" to-map="updateElectronicTextContentCtx"/>
              <set field="updateElectronicTextContentCtx.dataResourceId" from-field="parameters.trackingUrlDataResourceId"/>
              <set field="updateElectronicTextContentCtx.textData" from-field="parameters.trackingURL"/>              
              <call-service service-name="updateElectronicText" in-map-name="updateElectronicTextContentCtx"/>
            <else>
              <set field="partyContentCtx.partyId" from-field="parameters.partyId"/>
              <set field="partyContentCtx.contentId" from-field="parameters.contentId"/>
              <set field="partyContentCtx.partyContentTypeId" from-field="parameters.partyContentTypeId"/>
              <find-by-and entity-name="PartyContent" map="partyContentCtx" list="partyContentList" />
              <if-not-empty field="partyContentList">
                  <filter-list-by-date list="partyContentList"/>
                  <first-from-list list="partyContentList" entry="partyContent"/>
                  <set field="removePartyContentCtx.partyId" from-field="partyContent.partyId"/>
                  <set field="removePartyContentCtx.contentId" from-field="partyContent.contentId"/>
                  <set field="removePartyContentCtx.partyContentTypeId" from-field="partyContent.partyContentTypeId"/>
                  <set field="removePartyContentCtx.fromDate" from-field="partyContent.fromDate"/>
                  <call-service service-name="removePartyContent" in-map-name="removePartyContentCtx"/>
              </if-not-empty>
            </else>    
            </if-not-empty>
        <else>
            <set-service-fields service-name="createPartyContent" map="parameters" to-map="createPartyContentCtx"/>
            <set-service-fields service-name="createTextContent" map="parameters" to-map="createTextContentCtx"/>
            <set field="createTextContentCtx.dataResourceTypeId" value="ELECTRONIC_TEXT"/>
            <set field="createTextContentCtx.dataTemplateTypeId" value="FTL"/>
            <set field="createTextContentCtx.contentTypeId" value="DOCUMENT"/>
            <set field="createTextContentCtx.statusId" value="CTNT_PUBLISHED"/>
            <set field="createTextContentCtx.textData" from-field="parameters.trackingURL"/>
            <call-service service-name="createTextContent" in-map-name="createTextContentCtx">
                <result-to-field result-name="contentId" field="createPartyContentCtx.contentId"/>
            </call-service>
            <set field="createPartyContentCtx.partyContentTypeId" value="TRACKING_URL"/>
            <call-service service-name="createPartyContent" in-map-name="createPartyContentCtx"/>
        </else>
        </if-not-empty>
        <!-- End of Update Tracking URL -->

    </simple-method>
    
    <simple-method method-name="updateShipmentMethod" short-description="Update a shipment method">
        <if-empty field="parameters.description">
            <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="BlankShipmentMethodDescriptionError"/>
            <string-to-list string="${tempErrorMessage}" message-field="description"  list="error_list"/>
        </if-empty>
        <if-empty field="parameters.sequenceNum">
        	<set field="parameters.sequenceNum" value="1" type="Long"/>
        <else>
            <call-class-method class-name="com.osafe.util.OsafeAdminUtil"  method-name="isNumber" ret-field="isNumber">
                <field field="parameters.sequenceNum"/>
            </call-class-method>
            <if-compare field="isNumber" operator="equals" value="false">
                <property-to-field field="tempErrorMessage" resource="OSafeAdminUiLabels" property="ValidSeqNumError"/>
                <string-to-list string="${tempErrorMessage}" message-field="sequenceNum"  list="error_list"/>
            </if-compare>
            </else>
        </if-empty>
        <check-errors/>
        <!-- update record in entity: ShipmentMethodType -->     
        <set-service-fields service-name="updateShipmentMethodType" map="parameters" to-map="updateShipmentMethodTypeCtx"/>
        <set from-field="parameters.sequenceNum" field="updateShipmentMethodTypeCtx.sequenceNum" type="Long"/>
        <call-service service-name="updateShipmentMethodType" in-map-name="updateShipmentMethodTypeCtx" />
    </simple-method>    
    
    <simple-method method-name="updateShipmentGateway" short-description="Update shipment gateways">    
     <entity-one entity-name="ShipmentGatewayDhl" value-field="shipmentGatewayDhl"/>     
      <if-compare-field operator="equals" field="shipmentGatewayDhl.shipmentGatewayConfigId" to-field="parameters.shipmentGatewayConfigId"> 
        <make-value entity-name="ShipmentGatewayDhl" value-field="shipmentGatewayDhl"/>         	
        <set from-field="parameters.shipmentGatewayConfigId" field="pkValue.shipmentGatewayConfigId"/>        
        <set-pk-fields map="pkValue" value-field="shipmentGatewayDhl"/>
        <find-by-primary-key map="shipmentGatewayDhl" value-field="lookedUpValue"/> 
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <store-value value-field="lookedUpValue"/> 
      </if-compare-field>
    
     <entity-one entity-name="ShipmentGatewayFedex" value-field="shipmentGatewayFedex"/>
      <if-compare-field operator="equals" field="shipmentGatewayFedex.shipmentGatewayConfigId" to-field="parameters.shipmentGatewayConfigId">
        <set-service-fields service-name="updateShipmentGatewayConfigFedex" map="parameters" to-map="updateShipmentGatewayCtx"/>
        <set from-field="parameters.shipmentGatewayConfigId" field="updateShipmentGatewayCtx.shipmentGatewayConfigId" type="String"/>
        <call-service service-name="updateShipmentGatewayConfigFedex" in-map-name="updateShipmentGatewayCtx" />      
      </if-compare-field>
        
     <entity-one entity-name="ShipmentGatewayUps" value-field="shipmentGatewayUps"/>
      <if-compare-field operator="equals" field="shipmentGatewayUps.shipmentGatewayConfigId" to-field="parameters.shipmentGatewayConfigId">
        <set-service-fields service-name="updateShipmentGatewayConfigUps" map="parameters" to-map="updateShipmentGatewayCtx"/>
        <set from-field="parameters.shipmentGatewayConfigId" field="updateShipmentGatewayCtx.shipmentGatewayConfigId" type="String"/>
        <call-service service-name="updateShipmentGatewayConfigUps" in-map-name="updateShipmentGatewayCtx" /> 
      </if-compare-field>
      
      <entity-one entity-name="ShipmentGatewayUsps" value-field="shipmentGatewayUsps"/>
      <if-compare-field operator="equals" field="shipmentGatewayUsps.shipmentGatewayConfigId" to-field="parameters.shipmentGatewayConfigId">
        <set-service-fields service-name="updateShipmentGatewayConfigUsps" map="parameters" to-map="updateShipmentGatewayCtx"/>
        <set from-field="parameters.shipmentGatewayConfigId" field="updateShipmentGatewayCtx.shipmentGatewayConfigId" type="String"/>
        <call-service service-name="updateShipmentGatewayConfigUsps" in-map-name="updateShipmentGatewayCtx" />        
      </if-compare-field>
      
      <entity-one entity-name="ShipmentGatewayBlueDart" value-field="shipmentGatewayBlueDart"/>     
      <if-compare-field operator="equals" field="shipmentGatewayBlueDart.shipmentGatewayConfigId" to-field="parameters.shipmentGatewayConfigId"> 
        <make-value entity-name="ShipmentGatewayBlueDart" value-field="shipmentGatewayBlueDart"/>         	
        <set from-field="parameters.shipmentGatewayConfigId" field="pkValue.shipmentGatewayConfigId"/>        
        <set-pk-fields map="pkValue" value-field="shipmentGatewayBlueDart"/>
        <find-by-primary-key map="shipmentGatewayBlueDart" value-field="lookedUpValue"/> 
        <set-nonpk-fields map="parameters" value-field="lookedUpValue"/>
        <store-value value-field="lookedUpValue"/> 
      </if-compare-field>
    </simple-method> 
</simple-methods>